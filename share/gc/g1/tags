!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AOT_ONLY	g1GCPhaseTimes.hpp	/^    AOT_ONLY(AOTCodeRoots COMMA)$/;"	e	enum:G1GCPhaseTimes::GCParPhases
AOT_ONLY	g1RootProcessor.hpp	/^    AOT_ONLY(G1RP_PS_aot_oops_do COMMA)$/;"	e	enum:G1RootProcessor::G1H_process_roots_tasks
ASSERT_PHASE_UNINITIALIZED	g1GCPhaseTimes.cpp	207;"	d	file:
ASSERT_PHASE_UNINITIALIZED	g1GCPhaseTimes.cpp	259;"	d	file:
AccessBarrier	g1BarrierSet.hpp	/^  class AccessBarrier: public ModRefBarrierSet::AccessBarrier<decorators, BarrierSetT> {$/;"	c	class:G1BarrierSet
Active	g1CollectionSet.hpp	/^    Active,             \/\/ We are actively building the collection set$/;"	e	enum:G1CollectionSet::CSetBuildType
AddCardResult	sparsePRT.hpp	/^  enum AddCardResult {$/;"	g	class:SparsePRT
AllRootsClosures	g1RootProcessor.cpp	/^  AllRootsClosures(OopClosure* roots, CLDClosure* clds) :$/;"	f	class:AllRootsClosures
AllRootsClosures	g1RootProcessor.cpp	/^class AllRootsClosures : public G1RootClosures {$/;"	c	file:
AnyNodeIndex	g1NUMA.hpp	/^  static const uint AnyNodeIndex = UnknownNodeIndex - 1;$/;"	m	class:G1NUMA
ArchiveMask	heapRegionType.hpp	/^    ArchiveMask           = 32,$/;"	e	enum:HeapRegionType::__anon1
ArchiveRegionSetChecker	g1CollectedHeap.cpp	/^class ArchiveRegionSetChecker : public HeapRegionSetChecker {$/;"	c	file:
ArraySliceBit	g1ConcurrentMark.hpp	/^  static const uintptr_t ArraySliceBit = 1;$/;"	m	class:G1TaskQueueEntry
C1G1PostBarrierCodeGenClosure	c1/g1BarrierSetC1.cpp	/^class C1G1PostBarrierCodeGenClosure : public StubAssemblerCodeGenClosure {$/;"	c	file:
C1G1PreBarrierCodeGenClosure	c1/g1BarrierSetC1.cpp	/^class C1G1PreBarrierCodeGenClosure : public StubAssemblerCodeGenClosure {$/;"	c	file:
CLDGRoots	g1GCPhaseTimes.hpp	/^    CLDGRoots,$/;"	e	enum:G1GCPhaseTimes::GCParPhases
CMCleanup	g1ConcurrentMarkThread.cpp	/^  CMCleanup(G1ConcurrentMark* cm) : _cm(cm) {}$/;"	f	class:CMCleanup
CMCleanup	g1ConcurrentMarkThread.cpp	/^class CMCleanup : public VoidClosure {$/;"	c	file:
CMRefRoots	g1GCPhaseTimes.hpp	/^    CMRefRoots,$/;"	e	enum:G1GCPhaseTimes::GCParPhases
CMRemark	g1ConcurrentMarkThread.cpp	/^  CMRemark(G1ConcurrentMark* cm) : _cm(cm) {}$/;"	f	class:CMRemark
CMRemark	g1ConcurrentMarkThread.cpp	/^class CMRemark : public VoidClosure {$/;"	c	file:
CSetBuildType	g1CollectionSet.hpp	/^  enum CSetBuildType {$/;"	g	class:G1CollectionSet
CTRL_TAGS	g1ConcurrentRefine.cpp	180;"	d	file:
CardIdx_t	g1CollectedHeap.hpp	/^typedef int CardIdx_t;     \/\/ needs to hold [ 0..CardsPerRegion )$/;"	t
CardValue	g1CardCounts.hpp	/^  typedef CardTable::CardValue CardValue;$/;"	t	class:G1CardCounts
CardValue	g1CardTableEntryClosure.hpp	/^  typedef CardTable::CardValue CardValue;$/;"	t	class:G1CardTableEntryClosure
CardValue	g1HotCardCache.hpp	/^  typedef CardTable::CardValue CardValue;$/;"	t	class:G1HotCardCache
CardValue	g1RemSet.cpp	/^  typedef CardTable::CardValue CardValue;$/;"	t	class:G1CardTableScanner	file:
CardValue	g1RemSet.hpp	/^  typedef CardTable::CardValue CardValue;$/;"	t	class:G1RemSet
CardsPerRegion	heapRegion.cpp	/^size_t HeapRegion::CardsPerRegion    = 0;$/;"	m	class:HeapRegion	file:
CardsPerRegion	heapRegion.hpp	/^  static size_t CardsPerRegion;$/;"	m	class:HeapRegion
ClaimChunkSize	g1HotCardCache.hpp	/^  static const int ClaimChunkSize = 32;$/;"	m	class:G1HotCardCache
Claimed	g1FreeIdSet.cpp	/^const uint Claimed = UINT_MAX;$/;"	v
Claimed	heapRegionManager.hpp	/^  static const uint Claimed   = 1;$/;"	m	class:HeapRegionClaimer
CleanCallback	g1CodeCacheRemSet.cpp	/^  CleanCallback(HeapRegion* hr) : _detector(hr), _blobs(&_detector, !CodeBlobToOopClosure::FixRelocations) {}$/;"	f	class:CleanCallback
CleanCallback	g1CodeCacheRemSet.cpp	/^class CleanCallback : public StackObj {$/;"	c	file:
Cleanup	g1Policy.hpp	/^    Cleanup,$/;"	e	enum:G1Policy::PauseKind
ClosedArchive	g1Allocator.hpp	/^  static const uint8_t ClosedArchive = 2;$/;"	m	class:G1ArchiveRegionMap
ClosedArchive	g1HeapRegionTraceType.hpp	/^    ClosedArchive,$/;"	e	enum:G1HeapRegionTraceType::Type
ClosedArchiveTag	heapRegionType.hpp	/^    ClosedArchiveTag      = ArchiveMask | PinnedMask + 1$/;"	e	enum:HeapRegionType::__anon1
CodeRoots	g1GCPhaseTimes.hpp	/^    CodeRoots,$/;"	e	enum:G1GCPhaseTimes::GCParPhases
Complete	heapRegionRemSet.hpp	/^    Complete$/;"	e	enum:HeapRegionRemSet::RemSetState
ConcurrentStart	g1YCTypes.hpp	/^  ConcurrentStart,$/;"	e	enum:G1YCType
ConcurrentStartGC	g1Policy.hpp	/^    ConcurrentStartGC,$/;"	e	enum:G1Policy::PauseKind
ContinuesHumongous	g1HeapRegionTraceType.hpp	/^    ContinuesHumongous,$/;"	e	enum:G1HeapRegionTraceType::Type
ContinuesHumongousTag	heapRegionType.hpp	/^    ContinuesHumongousTag = HumongousMask | PinnedMask + 1,$/;"	e	enum:HeapRegionType::__anon1
Data	g1HeapTransition.cpp	/^G1HeapTransition::Data::Data(G1CollectedHeap* g1_heap) :$/;"	f	class:G1HeapTransition::Data
Data	g1HeapTransition.hpp	/^  struct Data {$/;"	s	class:G1HeapTransition
DetailedUsage	g1HeapTransition.cpp	/^  DetailedUsage() :$/;"	f	struct:DetailedUsage
DetailedUsage	g1HeapTransition.cpp	/^struct DetailedUsage : public StackObj {$/;"	s	file:
DetailedUsageClosure	g1HeapTransition.cpp	/^class DetailedUsageClosure: public HeapRegionClosure {$/;"	c	file:
DumpEventInfoClosure	g1HeapRegionEventSender.cpp	/^class DumpEventInfoClosure : public HeapRegionClosure {$/;"	c	file:
DuringMarkOrRebuild	g1YCTypes.hpp	/^  DuringMarkOrRebuild,$/;"	e	enum:G1YCType
Eden	g1HeapRegionTraceType.hpp	/^    Eden,$/;"	e	enum:G1HeapRegionTraceType::Type
Eden	heapRegionType.cpp	/^const HeapRegionType HeapRegionType::Eden      = HeapRegionType(EdenTag);$/;"	m	class:HeapRegionType	file:
Eden	heapRegionType.hpp	/^  static const HeapRegionType Eden;$/;"	m	class:HeapRegionType
EdenTag	heapRegionType.hpp	/^    EdenTag               = YoungMask,$/;"	e	enum:HeapRegionType::__anon1
EntriesPerChunk	g1ConcurrentMark.hpp	/^  static const size_t EntriesPerChunk = 1024 - 1 \/* One reference for the next pointer *\/;$/;"	m	class:G1CMMarkStack
Entry	g1CodeRootSetTable.hpp	/^  typedef HashtableEntry<nmethod*, mtGC> Entry;$/;"	t	class:G1CodeRootSetTable
ExpandedToScanMask	g1RemSet.cpp	/^  static const size_t ExpandedToScanMask = G1CardTable::WordAlreadyScanned;$/;"	m	class:G1CardTableScanner	file:
ExtRootScan	g1GCPhaseTimes.hpp	/^    ExtRootScan,$/;"	e	enum:G1GCPhaseTimes::GCParPhases
ExtRootScanSubPhasesFirst	g1GCPhaseTimes.hpp	/^  static const GCParPhases ExtRootScanSubPhasesFirst = ThreadRoots;$/;"	m	class:G1GCPhaseTimes
ExtRootScanSubPhasesLast	g1GCPhaseTimes.hpp	/^  static const GCParPhases ExtRootScanSubPhasesLast = GCParPhases(MergeER - 1);$/;"	m	class:G1GCPhaseTimes
False	g1OopClosures.hpp	/^    False = 0,$/;"	e	enum:G1ScanEvacuatedObjClosure::ScanningInYoungValues
Free	g1HeapRegionTraceType.hpp	/^    Free,$/;"	e	enum:G1HeapRegionTraceType::Type
FreeCSetClosure	g1CollectedHeap.cpp	/^    FreeCSetClosure(const size_t* surviving_young_words,$/;"	f	class:G1FreeCollectionSetTask::FreeCSetClosure
FreeCSetClosure	g1CollectedHeap.cpp	/^  class FreeCSetClosure : public HeapRegionClosure {$/;"	c	class:G1FreeCollectionSetTask	file:
FreeCSetStats	g1CollectedHeap.cpp	/^    FreeCSetStats() :$/;"	f	class:G1FreeCollectionSetTask::FreeCSetStats
FreeCSetStats	g1CollectedHeap.cpp	/^  class FreeCSetStats {$/;"	c	class:G1FreeCollectionSetTask	file:
FreeRegionList	heapRegionSet.cpp	/^FreeRegionList::FreeRegionList(const char* name, HeapRegionSetChecker* checker):$/;"	f	class:FreeRegionList
FreeRegionList	heapRegionSet.hpp	/^class FreeRegionList : public HeapRegionSetBase {$/;"	c
FreeRegionListIterator	heapRegionSet.hpp	/^  FreeRegionListIterator(FreeRegionList* list)$/;"	f	class:FreeRegionListIterator
FreeRegionListIterator	heapRegionSet.hpp	/^class FreeRegionListIterator : public StackObj {$/;"	c
FreeTag	heapRegionType.hpp	/^    FreeTag               = 0,$/;"	e	enum:HeapRegionType::__anon1
FullGC	g1Policy.hpp	/^    FullGC,$/;"	e	enum:G1Policy::PauseKind
G1AbandonCollectionSetClosure	g1CollectedHeap.cpp	/^class G1AbandonCollectionSetClosure : public HeapRegionClosure {$/;"	c	file:
G1AdaptiveIHOPControl	g1IHOPControl.cpp	/^G1AdaptiveIHOPControl::G1AdaptiveIHOPControl(double ihop_percent,$/;"	f	class:G1AdaptiveIHOPControl
G1AdaptiveIHOPControl	g1IHOPControl.hpp	/^class G1AdaptiveIHOPControl : public G1IHOPControl {$/;"	c
G1AdjustClosure	g1FullGCOopClosures.hpp	/^class G1AdjustClosure : public BasicOopIterateClosure {$/;"	c
G1AdjustLiveClosure	g1FullGCAdjustTask.cpp	/^  G1AdjustLiveClosure(G1AdjustClosure* cl) :$/;"	f	class:G1AdjustLiveClosure
G1AdjustLiveClosure	g1FullGCAdjustTask.cpp	/^class G1AdjustLiveClosure : public StackObj {$/;"	c	file:
G1AdjustRegionClosure	g1FullGCAdjustTask.cpp	/^  G1AdjustRegionClosure(G1CMBitMap* bitmap, uint worker_id) :$/;"	f	class:G1AdjustRegionClosure
G1AdjustRegionClosure	g1FullGCAdjustTask.cpp	/^class G1AdjustRegionClosure : public HeapRegionClosure {$/;"	c	file:
G1AllocRegion	g1AllocRegion.cpp	/^G1AllocRegion::G1AllocRegion(const char* name,$/;"	f	class:G1AllocRegion
G1AllocRegion	g1AllocRegion.hpp	/^class G1AllocRegion : public CHeapObj<mtGC> {$/;"	c
G1Allocator	g1Allocator.cpp	/^G1Allocator::G1Allocator(G1CollectedHeap* heap) :$/;"	f	class:G1Allocator
G1Allocator	g1Allocator.hpp	/^class G1Allocator : public CHeapObj<mtGC> {$/;"	c
G1Analytics	g1Analytics.cpp	/^G1Analytics::G1Analytics(const G1Predictions* predictor) :$/;"	f	class:G1Analytics
G1Analytics	g1Analytics.hpp	/^class G1Analytics: public CHeapObj<mtGC> {$/;"	c
G1ArchiveAllocator	g1Allocator.hpp	/^  G1ArchiveAllocator(G1CollectedHeap* g1h, bool open) :$/;"	f	class:G1ArchiveAllocator
G1ArchiveAllocator	g1Allocator.hpp	/^class G1ArchiveAllocator : public CHeapObj<mtGC> {$/;"	c
G1ArchiveRegionMap	g1Allocator.hpp	/^class G1ArchiveRegionMap : public G1BiasedMappedArray<uint8_t> {$/;"	c
G1Arguments	g1Arguments.hpp	/^class G1Arguments : public GCArguments {$/;"	c
G1Barrier	g1OopClosures.hpp	/^enum G1Barrier {$/;"	g
G1BarrierCLD	g1OopClosures.hpp	/^  G1BarrierCLD,$/;"	e	enum:G1Barrier
G1BarrierNoOptRoots	g1OopClosures.hpp	/^  G1BarrierNoOptRoots  \/\/ Do not collect optional roots.$/;"	e	enum:G1Barrier
G1BarrierNone	g1OopClosures.hpp	/^  G1BarrierNone,$/;"	e	enum:G1Barrier
G1BarrierSet	g1BarrierSet.cpp	/^G1BarrierSet::G1BarrierSet(G1CardTable* card_table) :$/;"	f	class:G1BarrierSet
G1BarrierSet	g1BarrierSet.hpp	/^class G1BarrierSet: public CardTableBarrierSet {$/;"	c
G1BarrierSetC1	c1/g1BarrierSetC1.hpp	/^  G1BarrierSetC1()$/;"	f	class:G1BarrierSetC1
G1BarrierSetC1	c1/g1BarrierSetC1.hpp	/^class G1BarrierSetC1 : public ModRefBarrierSetC1 {$/;"	c
G1BarrierSetC2	c2/g1BarrierSetC2.hpp	/^class G1BarrierSetC2: public CardTableBarrierSetC2 {$/;"	c
G1BarrierSetRuntime	g1BarrierSetRuntime.hpp	/^class G1BarrierSetRuntime: public AllStatic {$/;"	c
G1BiasedMappedArray	g1BiasedArray.hpp	/^  G1BiasedMappedArray() {}$/;"	f	class:G1BiasedMappedArray
G1BiasedMappedArray	g1BiasedArray.hpp	/^class G1BiasedMappedArray : public G1BiasedMappedArrayBase {$/;"	c
G1BiasedMappedArrayBase	g1BiasedArray.hpp	/^  G1BiasedMappedArrayBase() : _base(NULL), _length(0), _biased_base(NULL),$/;"	f	class:G1BiasedMappedArrayBase
G1BiasedMappedArrayBase	g1BiasedArray.hpp	/^class G1BiasedMappedArrayBase {$/;"	c
G1BlockOffsetTable	g1BlockOffsetTable.cpp	/^G1BlockOffsetTable::G1BlockOffsetTable(MemRegion heap, G1RegionToSpaceMapper* storage) :$/;"	f	class:G1BlockOffsetTable
G1BlockOffsetTable	g1BlockOffsetTable.hpp	/^class G1BlockOffsetTable: public CHeapObj<mtGC> {$/;"	c
G1BlockOffsetTablePart	g1BlockOffsetTable.hpp	/^class G1BlockOffsetTablePart {$/;"	c
G1BufferNodeList	g1BufferNodeList.cpp	/^G1BufferNodeList::G1BufferNodeList() :$/;"	f	class:G1BufferNodeList
G1BufferNodeList	g1BufferNodeList.cpp	/^G1BufferNodeList::G1BufferNodeList(BufferNode* head,$/;"	f	class:G1BufferNodeList
G1BufferNodeList	g1BufferNodeList.hpp	/^struct G1BufferNodeList {$/;"	s
G1BuildCandidateArray	g1CollectionSetChooser.cpp	/^    G1BuildCandidateArray(uint max_num_regions, uint chunk_size, uint num_workers) :$/;"	f	class:G1BuildCandidateRegionsTask::G1BuildCandidateArray
G1BuildCandidateArray	g1CollectionSetChooser.cpp	/^  class G1BuildCandidateArray : public StackObj {$/;"	c	class:G1BuildCandidateRegionsTask	file:
G1BuildCandidateRegionsClosure	g1CollectionSetChooser.cpp	/^    G1BuildCandidateRegionsClosure(G1BuildCandidateArray* array) :$/;"	f	class:G1BuildCandidateRegionsTask::G1BuildCandidateRegionsClosure
G1BuildCandidateRegionsClosure	g1CollectionSetChooser.cpp	/^  class G1BuildCandidateRegionsClosure : public HeapRegionClosure {$/;"	c	class:G1BuildCandidateRegionsTask	file:
G1BuildCandidateRegionsTask	g1CollectionSetChooser.cpp	/^  G1BuildCandidateRegionsTask(uint max_num_regions, uint chunk_size, uint num_workers) :$/;"	f	class:G1BuildCandidateRegionsTask
G1BuildCandidateRegionsTask	g1CollectionSetChooser.cpp	/^class G1BuildCandidateRegionsTask : public AbstractGangTask {$/;"	c	file:
G1CLDScanClosure	g1OopClosures.hpp	/^  G1CLDScanClosure(G1ParCopyHelper* closure, bool process_only_dirty)$/;"	f	class:G1CLDScanClosure
G1CLDScanClosure	g1OopClosures.hpp	/^class G1CLDScanClosure : public CLDClosure {$/;"	c
G1CMBitMap	g1ConcurrentMarkBitMap.hpp	/^  G1CMBitMap() : MarkBitMap(), _listener() { _listener.set_bitmap(this); }$/;"	f	class:G1CMBitMap
G1CMBitMap	g1ConcurrentMarkBitMap.hpp	/^class G1CMBitMap : public MarkBitMap {$/;"	c
G1CMBitMapClosure	g1ConcurrentMarkBitMap.hpp	/^  G1CMBitMapClosure(G1CMTask *task, G1ConcurrentMark* cm) : _cm(cm), _task(task) { }$/;"	f	class:G1CMBitMapClosure
G1CMBitMapClosure	g1ConcurrentMarkBitMap.hpp	/^class G1CMBitMapClosure {$/;"	c
G1CMBitMapMappingChangedListener	g1ConcurrentMarkBitMap.hpp	/^  G1CMBitMapMappingChangedListener() : _bm(NULL) {}$/;"	f	class:G1CMBitMapMappingChangedListener
G1CMBitMapMappingChangedListener	g1ConcurrentMarkBitMap.hpp	/^class G1CMBitMapMappingChangedListener : public G1MappingChangedListener {$/;"	c
G1CMConcurrentMarkingTask	g1ConcurrentMark.cpp	/^  G1CMConcurrentMarkingTask(G1ConcurrentMark* cm) :$/;"	f	class:G1CMConcurrentMarkingTask
G1CMConcurrentMarkingTask	g1ConcurrentMark.cpp	/^class G1CMConcurrentMarkingTask : public AbstractGangTask {$/;"	c	file:
G1CMDrainMarkingStackClosure	g1ConcurrentMark.cpp	/^  G1CMDrainMarkingStackClosure(G1ConcurrentMark* cm, G1CMTask* task, bool is_serial) :$/;"	f	class:G1CMDrainMarkingStackClosure
G1CMDrainMarkingStackClosure	g1ConcurrentMark.cpp	/^class G1CMDrainMarkingStackClosure : public VoidClosure {$/;"	c	file:
G1CMIsAliveClosure	g1ConcurrentMark.hpp	/^  G1CMIsAliveClosure(G1CollectedHeap* g1h) : _g1h(g1h) { }$/;"	f	class:G1CMIsAliveClosure
G1CMIsAliveClosure	g1ConcurrentMark.hpp	/^class G1CMIsAliveClosure : public BoolObjectClosure {$/;"	c
G1CMKeepAliveAndDrainClosure	g1ConcurrentMark.cpp	/^  G1CMKeepAliveAndDrainClosure(G1ConcurrentMark* cm, G1CMTask* task, bool is_serial) :$/;"	f	class:G1CMKeepAliveAndDrainClosure
G1CMKeepAliveAndDrainClosure	g1ConcurrentMark.cpp	/^class G1CMKeepAliveAndDrainClosure : public OopClosure {$/;"	c	file:
G1CMMarkStack	g1ConcurrentMark.cpp	/^G1CMMarkStack::G1CMMarkStack() :$/;"	f	class:G1CMMarkStack
G1CMMarkStack	g1ConcurrentMark.hpp	/^class G1CMMarkStack {$/;"	c
G1CMObjArrayProcessor	g1ConcurrentMarkObjArrayProcessor.hpp	/^  G1CMObjArrayProcessor(G1CMTask* task) : _task(task) {$/;"	f	class:G1CMObjArrayProcessor
G1CMObjArrayProcessor	g1ConcurrentMarkObjArrayProcessor.hpp	/^class G1CMObjArrayProcessor {$/;"	c
G1CMOopClosure	g1ConcurrentMark.cpp	/^G1CMOopClosure::G1CMOopClosure(G1CollectedHeap* g1h,$/;"	f	class:G1CMOopClosure
G1CMOopClosure	g1OopClosures.hpp	/^class G1CMOopClosure : public MetadataVisitingOopIterateClosure {$/;"	c
G1CMRefProcTaskExecutor	g1ConcurrentMark.cpp	/^  G1CMRefProcTaskExecutor(G1CollectedHeap* g1h,$/;"	f	class:G1CMRefProcTaskExecutor
G1CMRefProcTaskExecutor	g1ConcurrentMark.cpp	/^class G1CMRefProcTaskExecutor : public AbstractRefProcTaskExecutor {$/;"	c	file:
G1CMRefProcTaskProxy	g1ConcurrentMark.cpp	/^  G1CMRefProcTaskProxy(ProcessTask& proc_task,$/;"	f	class:G1CMRefProcTaskProxy
G1CMRefProcTaskProxy	g1ConcurrentMark.cpp	/^class G1CMRefProcTaskProxy : public AbstractGangTask {$/;"	c	file:
G1CMRemarkTask	g1ConcurrentMark.cpp	/^  G1CMRemarkTask(G1ConcurrentMark* cm, uint active_workers) :$/;"	f	class:G1CMRemarkTask
G1CMRemarkTask	g1ConcurrentMark.cpp	/^class G1CMRemarkTask : public AbstractGangTask {$/;"	c	file:
G1CMRootMemRegions	g1ConcurrentMark.cpp	/^G1CMRootMemRegions::G1CMRootMemRegions(uint const max_regions) :$/;"	f	class:G1CMRootMemRegions
G1CMRootMemRegions	g1ConcurrentMark.hpp	/^class G1CMRootMemRegions {$/;"	c
G1CMRootRegionScanTask	g1ConcurrentMark.cpp	/^  G1CMRootRegionScanTask(G1ConcurrentMark* cm) :$/;"	f	class:G1CMRootRegionScanTask
G1CMRootRegionScanTask	g1ConcurrentMark.cpp	/^class G1CMRootRegionScanTask : public AbstractGangTask {$/;"	c	file:
G1CMSATBBufferClosure	g1ConcurrentMark.cpp	/^  G1CMSATBBufferClosure(G1CMTask* task, G1CollectedHeap* g1h)$/;"	f	class:G1CMSATBBufferClosure
G1CMSATBBufferClosure	g1ConcurrentMark.cpp	/^class G1CMSATBBufferClosure : public SATBBufferClosure {$/;"	c	file:
G1CMSubjectToDiscoveryClosure	g1ConcurrentMark.hpp	/^  G1CMSubjectToDiscoveryClosure(G1CollectedHeap* g1h) : _g1h(g1h) { }$/;"	f	class:G1CMSubjectToDiscoveryClosure
G1CMSubjectToDiscoveryClosure	g1ConcurrentMark.hpp	/^class G1CMSubjectToDiscoveryClosure : public BoolObjectClosure {$/;"	c
G1CMTask	g1ConcurrentMark.cpp	/^G1CMTask::G1CMTask(uint worker_id,$/;"	f	class:G1CMTask
G1CMTask	g1ConcurrentMark.hpp	/^class G1CMTask : public TerminatorTerminator {$/;"	c
G1CMTaskQueue	g1ConcurrentMark.hpp	/^typedef GenericTaskQueue<G1TaskQueueEntry, mtGC> G1CMTaskQueue;$/;"	t
G1CMTaskQueueSet	g1ConcurrentMark.hpp	/^typedef GenericTaskQueueSet<G1CMTaskQueue, mtGC> G1CMTaskQueueSet;$/;"	t
G1CalculatePointersClosure	g1FullGCPrepareTask.cpp	/^G1FullGCPrepareTask::G1CalculatePointersClosure::G1CalculatePointersClosure(G1CMBitMap* bitmap,$/;"	f	class:G1FullGCPrepareTask::G1CalculatePointersClosure
G1CalculatePointersClosure	g1FullGCPrepareTask.hpp	/^  class G1CalculatePointersClosure : public HeapRegionClosure {$/;"	c	class:G1FullGCPrepareTask
G1CardCounts	g1CardCounts.cpp	/^G1CardCounts::G1CardCounts(G1CollectedHeap *g1h):$/;"	f	class:G1CardCounts
G1CardCounts	g1CardCounts.hpp	/^class G1CardCounts: public CHeapObj<mtGC> {$/;"	c
G1CardCountsClearClosure	g1CardCounts.cpp	/^  G1CardCountsClearClosure(G1CardCounts* card_counts) :$/;"	f	class:G1CardCountsClearClosure
G1CardCountsClearClosure	g1CardCounts.cpp	/^class G1CardCountsClearClosure : public HeapRegionClosure {$/;"	c	file:
G1CardCountsMappingChangedListener	g1CardCounts.hpp	/^class G1CardCountsMappingChangedListener : public G1MappingChangedListener {$/;"	c
G1CardTable	g1CardTable.hpp	/^  G1CardTable(MemRegion whole_heap): CardTable(whole_heap, \/* scanned concurrently *\/ true), _listener() {$/;"	f	class:G1CardTable
G1CardTable	g1CardTable.hpp	/^class G1CardTable : public CardTable {$/;"	c
G1CardTableChangedListener	g1CardTable.hpp	/^  G1CardTableChangedListener() : _card_table(NULL) { }$/;"	f	class:G1CardTableChangedListener
G1CardTableChangedListener	g1CardTable.hpp	/^class G1CardTableChangedListener : public G1MappingChangedListener {$/;"	c
G1CardTableChunkClaimer	g1RemSet.cpp	/^  G1CardTableChunkClaimer(G1RemSetScanState* scan_state, uint region_idx) :$/;"	f	class:G1CardTableChunkClaimer
G1CardTableChunkClaimer	g1RemSet.cpp	/^class G1CardTableChunkClaimer {$/;"	c	file:
G1CardTableEntryClosure	g1CardTableEntryClosure.hpp	/^class G1CardTableEntryClosure: public CHeapObj<mtGC> {$/;"	c
G1CardTableScanner	g1RemSet.cpp	/^  G1CardTableScanner(CardValue* start_card, size_t size) :$/;"	f	class:G1CardTableScanner
G1CardTableScanner	g1RemSet.cpp	/^class G1CardTableScanner : public StackObj {$/;"	c	file:
G1CardValues	g1CardTable.hpp	/^  enum G1CardValues {$/;"	g	class:G1CardTable
G1CheckRegionAttrTableClosure	g1HeapVerifier.cpp	/^  G1CheckRegionAttrTableClosure() : HeapRegionClosure(), _failures(false) { }$/;"	f	class:G1CheckRegionAttrTableClosure
G1CheckRegionAttrTableClosure	g1HeapVerifier.cpp	/^class G1CheckRegionAttrTableClosure : public HeapRegionClosure {$/;"	c	file:
G1ClearBitMapTask	g1ConcurrentMark.cpp	/^  G1ClearBitMapTask(G1CMBitMap* bitmap, G1ConcurrentMark* cm, uint n_workers, bool suspendible) :$/;"	f	class:G1ClearBitMapTask
G1ClearBitMapTask	g1ConcurrentMark.cpp	/^class G1ClearBitMapTask : public AbstractGangTask {$/;"	c	file:
G1ClearBitmapHRClosure	g1ConcurrentMark.cpp	/^    G1ClearBitmapHRClosure(G1CMBitMap* bitmap, G1ConcurrentMark* cm) : HeapRegionClosure(), _bitmap(bitmap), _cm(cm) {$/;"	f	class:G1ClearBitMapTask::G1ClearBitmapHRClosure
G1ClearBitmapHRClosure	g1ConcurrentMark.cpp	/^  class G1ClearBitmapHRClosure : public HeapRegionClosure {$/;"	c	class:G1ClearBitMapTask	file:
G1ClearCardTableTask	g1RemSet.cpp	/^    G1ClearCardTableTask(G1CollectedHeap* g1h,$/;"	f	class:G1RemSetScanState::G1ClearCardTableTask
G1ClearCardTableTask	g1RemSet.cpp	/^  class G1ClearCardTableTask : public AbstractGangTask {$/;"	c	class:G1RemSetScanState	file:
G1ClearCollectionSetCandidateRemSets	g1Policy.cpp	/^class G1ClearCollectionSetCandidateRemSets : public HeapRegionClosure {$/;"	c	file:
G1CodeBlobClosure	g1CodeBlobClosure.hpp	/^  G1CodeBlobClosure(uint worker_id, OopClosure* oc, bool strong) :$/;"	f	class:G1CodeBlobClosure
G1CodeBlobClosure	g1CodeBlobClosure.hpp	/^class G1CodeBlobClosure : public CodeBlobClosure {$/;"	c
G1CodeRootSet	g1CodeCacheRemSet.hpp	/^  G1CodeRootSet() : _table(NULL), _length(0) {}$/;"	f	class:G1CodeRootSet
G1CodeRootSet	g1CodeCacheRemSet.hpp	/^class G1CodeRootSet {$/;"	c
G1CodeRootSetTable	g1CodeRootSetTable.hpp	/^  G1CodeRootSetTable(int size) : Hashtable<nmethod*, mtGC>(size, sizeof(Entry)), _purge_next(NULL) {}$/;"	f	class:G1CodeRootSetTable
G1CodeRootSetTable	g1CodeRootSetTable.hpp	/^class G1CodeRootSetTable : public Hashtable<nmethod*, mtGC> {$/;"	c
G1CollectedHeap	g1CollectedHeap.cpp	/^G1CollectedHeap::G1CollectedHeap() :$/;"	f	class:G1CollectedHeap
G1CollectedHeap	g1CollectedHeap.hpp	/^class G1CollectedHeap : public CollectedHeap {$/;"	c
G1CollectionSet	g1CollectionSet.cpp	/^G1CollectionSet::G1CollectionSet(G1CollectedHeap* g1h, G1Policy* policy) :$/;"	f	class:G1CollectionSet
G1CollectionSet	g1CollectionSet.hpp	/^class G1CollectionSet {$/;"	c
G1CollectionSetCandidates	g1CollectionSetCandidates.hpp	/^  G1CollectionSetCandidates(HeapRegion** regions, uint num_regions, size_t remaining_reclaimable_bytes) :$/;"	f	class:G1CollectionSetCandidates
G1CollectionSetCandidates	g1CollectionSetCandidates.hpp	/^class G1CollectionSetCandidates : public CHeapObj<mtGC> {$/;"	c
G1CollectionSetChooser	g1CollectionSetChooser.hpp	/^class G1CollectionSetChooser : public AllStatic {$/;"	c
G1CollectorState	g1CollectorState.hpp	/^  G1CollectorState() :$/;"	f	class:G1CollectorState
G1CollectorState	g1CollectorState.hpp	/^class G1CollectorState {$/;"	c
G1CompactRegionClosure	g1FullGCCompactTask.hpp	/^    G1CompactRegionClosure(G1CMBitMap* bitmap) : _bitmap(bitmap) { }$/;"	f	class:G1FullGCCompactTask::G1CompactRegionClosure
G1CompactRegionClosure	g1FullGCCompactTask.hpp	/^  class G1CompactRegionClosure : public StackObj {$/;"	c	class:G1FullGCCompactTask
G1ConcPhaseTimer	g1ConcurrentMarkThread.cpp	/^  G1ConcPhaseTimer(G1ConcurrentMark* cm, const char* title) :$/;"	f	class:G1ConcPhaseTimer
G1ConcPhaseTimer	g1ConcurrentMarkThread.cpp	/^class G1ConcPhaseTimer : public GCTraceConcTimeImpl<LogLevel::Info, LOG_TAGS(gc, marking)> {$/;"	c	file:
G1ConcurrentMark	g1ConcurrentMark.cpp	/^G1ConcurrentMark::G1ConcurrentMark(G1CollectedHeap* g1h,$/;"	f	class:G1ConcurrentMark
G1ConcurrentMark	g1ConcurrentMark.hpp	/^class G1ConcurrentMark : public CHeapObj<mtGC> {$/;"	c
G1ConcurrentMarkThread	g1ConcurrentMarkThread.cpp	/^G1ConcurrentMarkThread::G1ConcurrentMarkThread(G1ConcurrentMark* cm) :$/;"	f	class:G1ConcurrentMarkThread
G1ConcurrentMarkThread	g1ConcurrentMarkThread.hpp	/^class G1ConcurrentMarkThread: public ConcurrentGCThread {$/;"	c
G1ConcurrentRefine	g1ConcurrentRefine.cpp	/^G1ConcurrentRefine::G1ConcurrentRefine(size_t green_zone,$/;"	f	class:G1ConcurrentRefine
G1ConcurrentRefine	g1ConcurrentRefine.hpp	/^class G1ConcurrentRefine : public CHeapObj<mtGC> {$/;"	c
G1ConcurrentRefineOopClosure	g1OopClosures.hpp	/^  G1ConcurrentRefineOopClosure(G1CollectedHeap* g1h, uint worker_id) :$/;"	f	class:G1ConcurrentRefineOopClosure
G1ConcurrentRefineOopClosure	g1OopClosures.hpp	/^class G1ConcurrentRefineOopClosure: public BasicOopIterateClosure {$/;"	c
G1ConcurrentRefineStats	g1ConcurrentRefineStats.cpp	/^G1ConcurrentRefineStats::G1ConcurrentRefineStats() :$/;"	f	class:G1ConcurrentRefineStats
G1ConcurrentRefineStats	g1ConcurrentRefineStats.hpp	/^class G1ConcurrentRefineStats : public CHeapObj<mtGC> {$/;"	c
G1ConcurrentRefineThread	g1ConcurrentRefineThread.cpp	/^G1ConcurrentRefineThread::G1ConcurrentRefineThread(G1ConcurrentRefine* cr, uint worker_id) :$/;"	f	class:G1ConcurrentRefineThread
G1ConcurrentRefineThread	g1ConcurrentRefineThread.hpp	/^class G1ConcurrentRefineThread: public ConcurrentGCThread {$/;"	c
G1ConcurrentRefineThreadControl	g1ConcurrentRefine.cpp	/^G1ConcurrentRefineThreadControl::G1ConcurrentRefineThreadControl() :$/;"	f	class:G1ConcurrentRefineThreadControl
G1ConcurrentRefineThreadControl	g1ConcurrentRefine.hpp	/^class G1ConcurrentRefineThreadControl {$/;"	c
G1ConcurrentStartMarkClosures	g1RootClosures.cpp	/^  G1ConcurrentStartMarkClosures(G1CollectedHeap* g1h,$/;"	f	class:G1ConcurrentStartMarkClosures
G1ConcurrentStartMarkClosures	g1RootClosures.cpp	/^class G1ConcurrentStartMarkClosures : public G1EvacuationRootClosures {$/;"	c	file:
G1ConcurrentStartToMixedTimeTracker	g1ConcurrentStartToMixedTimeTracker.hpp	/^  G1ConcurrentStartToMixedTimeTracker() { reset(); }$/;"	f	class:G1ConcurrentStartToMixedTimeTracker
G1ConcurrentStartToMixedTimeTracker	g1ConcurrentStartToMixedTimeTracker.hpp	/^class G1ConcurrentStartToMixedTimeTracker {$/;"	c
G1CopyingKeepAliveClosure	g1CollectedHeap.cpp	/^  G1CopyingKeepAliveClosure(G1CollectedHeap* g1h,$/;"	f	class:G1CopyingKeepAliveClosure
G1CopyingKeepAliveClosure	g1CollectedHeap.cpp	/^class G1CopyingKeepAliveClosure: public OopClosure {$/;"	c	file:
G1DirtyCardQueue	g1DirtyCardQueue.cpp	/^G1DirtyCardQueue::G1DirtyCardQueue(G1DirtyCardQueueSet* qset) :$/;"	f	class:G1DirtyCardQueue
G1DirtyCardQueue	g1DirtyCardQueue.hpp	/^class G1DirtyCardQueue: public PtrQueue {$/;"	c
G1DirtyCardQueueSet	g1DirtyCardQueue.cpp	/^G1DirtyCardQueueSet::G1DirtyCardQueueSet(BufferNode::Allocator* allocator) :$/;"	f	class:G1DirtyCardQueueSet
G1DirtyCardQueueSet	g1DirtyCardQueue.hpp	/^class G1DirtyCardQueueSet: public PtrQueueSet {$/;"	c
G1DirtyRegions	g1RemSet.cpp	/^    G1DirtyRegions(size_t max_regions) :$/;"	f	class:G1RemSetScanState::G1DirtyRegions
G1DirtyRegions	g1RemSet.cpp	/^  class G1DirtyRegions : public CHeapObj<mtGC> {$/;"	c	class:G1RemSetScanState	file:
G1EdenPool	g1MemoryPool.cpp	/^G1EdenPool::G1EdenPool(G1CollectedHeap* g1h, size_t initial_size) :$/;"	f	class:G1EdenPool
G1EdenPool	g1MemoryPool.hpp	/^class G1EdenPool : public G1MemoryPoolSuper {$/;"	c
G1EdenRegions	g1EdenRegions.hpp	/^  G1EdenRegions() : _length(0), _used_bytes(0), _regions_on_node() { }$/;"	f	class:G1EdenRegions
G1EdenRegions	g1EdenRegions.hpp	/^class G1EdenRegions {$/;"	c
G1EvacPhaseTimesTracker	g1GCParPhaseTimesTracker.hpp	/^class G1EvacPhaseTimesTracker : public G1GCParPhaseTimesTracker {$/;"	c
G1EvacPhaseTimesTracker	g1GCPhaseTimes.cpp	/^G1EvacPhaseTimesTracker::G1EvacPhaseTimesTracker(G1GCPhaseTimes* phase_times,$/;"	f	class:G1EvacPhaseTimesTracker
G1EvacPhaseWithTrimTimeTracker	g1GCPhaseTimes.cpp	/^G1EvacPhaseWithTrimTimeTracker::G1EvacPhaseWithTrimTimeTracker(G1ParScanThreadState* pss, Tickspan& total_time, Tickspan& trim_time) :$/;"	f	class:G1EvacPhaseWithTrimTimeTracker
G1EvacPhaseWithTrimTimeTracker	g1GCPhaseTimes.hpp	/^class G1EvacPhaseWithTrimTimeTracker : public StackObj {$/;"	c
G1EvacStats	g1EvacStats.cpp	/^G1EvacStats::G1EvacStats(const char* description, size_t desired_plab_sz_, unsigned wt) :$/;"	f	class:G1EvacStats
G1EvacStats	g1EvacStats.hpp	/^class G1EvacStats : public PLABStats {$/;"	c
G1EvacuateOptionalRegionsTask	g1CollectedHeap.cpp	/^  G1EvacuateOptionalRegionsTask(G1ParScanThreadStateSet* per_thread_states,$/;"	f	class:G1EvacuateOptionalRegionsTask
G1EvacuateOptionalRegionsTask	g1CollectedHeap.cpp	/^class G1EvacuateOptionalRegionsTask : public G1EvacuateRegionsBaseTask {$/;"	c	file:
G1EvacuateRegionsBaseTask	g1CollectedHeap.cpp	/^  G1EvacuateRegionsBaseTask(const char* name,$/;"	f	class:G1EvacuateRegionsBaseTask
G1EvacuateRegionsBaseTask	g1CollectedHeap.cpp	/^class G1EvacuateRegionsBaseTask : public AbstractGangTask {$/;"	c	file:
G1EvacuateRegionsTask	g1CollectedHeap.cpp	/^  G1EvacuateRegionsTask(G1CollectedHeap* g1h,$/;"	f	class:G1EvacuateRegionsTask
G1EvacuateRegionsTask	g1CollectedHeap.cpp	/^class G1EvacuateRegionsTask : public G1EvacuateRegionsBaseTask {$/;"	c	file:
G1EvacuationClosures	g1RootClosures.cpp	/^  G1EvacuationClosures(G1CollectedHeap* g1h,$/;"	f	class:G1EvacuationClosures
G1EvacuationClosures	g1RootClosures.cpp	/^class G1EvacuationClosures : public G1EvacuationRootClosures {$/;"	c	file:
G1EvacuationInfo	g1EvacuationInfo.hpp	/^  G1EvacuationInfo() :$/;"	f	class:G1EvacuationInfo
G1EvacuationInfo	g1EvacuationInfo.hpp	/^class G1EvacuationInfo : public StackObj {$/;"	c
G1EvacuationRootClosures	g1RootClosures.hpp	/^class G1EvacuationRootClosures : public G1RootClosures {$/;"	c
G1FlushHumongousCandidateRemSets	g1RemSet.cpp	/^    G1FlushHumongousCandidateRemSets(G1RemSetScanState* scan_state) : _cl(scan_state) { }$/;"	f	class:G1MergeHeapRootsTask::G1FlushHumongousCandidateRemSets
G1FlushHumongousCandidateRemSets	g1RemSet.cpp	/^  class G1FlushHumongousCandidateRemSets : public HeapRegionClosure {$/;"	c	class:G1MergeHeapRootsTask	file:
G1FollowStackClosure	g1FullGCOopClosures.hpp	/^  G1FollowStackClosure(G1FullGCMarker* marker) : _marker(marker) {}$/;"	f	class:G1FollowStackClosure
G1FollowStackClosure	g1FullGCOopClosures.hpp	/^class G1FollowStackClosure: public VoidClosure {$/;"	c
G1FreeCollectionSetTask	g1CollectedHeap.cpp	/^  G1FreeCollectionSetTask(G1EvacuationInfo* evacuation_info, const size_t* surviving_young_words, uint active_workers) :$/;"	f	class:G1FreeCollectionSetTask
G1FreeCollectionSetTask	g1CollectedHeap.cpp	/^class G1FreeCollectionSetTask : public AbstractGangTask {$/;"	c	file:
G1FreeHumongousRegionClosure	g1CollectedHeap.cpp	/^  G1FreeHumongousRegionClosure(FreeRegionList* free_region_list) :$/;"	f	class:G1FreeHumongousRegionClosure
G1FreeHumongousRegionClosure	g1CollectedHeap.cpp	/^class G1FreeHumongousRegionClosure : public HeapRegionClosure {$/;"	c	file:
G1FreeIdSet	g1FreeIdSet.cpp	/^G1FreeIdSet::G1FreeIdSet(uint start, uint size) :$/;"	f	class:G1FreeIdSet
G1FreeIdSet	g1FreeIdSet.hpp	/^class G1FreeIdSet {$/;"	c
G1FromCardCache	g1FromCardCache.hpp	/^class G1FromCardCache : public AllStatic {$/;"	c
G1FullCollector	g1FullCollector.cpp	/^G1FullCollector::G1FullCollector(G1CollectedHeap* heap, bool explicit_gc, bool clear_soft_refs) :$/;"	f	class:G1FullCollector
G1FullCollector	g1FullCollector.hpp	/^class G1FullCollector : StackObj {$/;"	c
G1FullGCAdjustTask	g1FullGCAdjustTask.cpp	/^G1FullGCAdjustTask::G1FullGCAdjustTask(G1FullCollector* collector) :$/;"	f	class:G1FullGCAdjustTask
G1FullGCAdjustTask	g1FullGCAdjustTask.hpp	/^class G1FullGCAdjustTask : public G1FullGCTask {$/;"	c
G1FullGCCompactTask	g1FullGCCompactTask.hpp	/^  G1FullGCCompactTask(G1FullCollector* collector) :$/;"	f	class:G1FullGCCompactTask
G1FullGCCompactTask	g1FullGCCompactTask.hpp	/^class G1FullGCCompactTask : public G1FullGCTask {$/;"	c
G1FullGCCompactionPoint	g1FullGCCompactionPoint.cpp	/^G1FullGCCompactionPoint::G1FullGCCompactionPoint() :$/;"	f	class:G1FullGCCompactionPoint
G1FullGCCompactionPoint	g1FullGCCompactionPoint.hpp	/^class G1FullGCCompactionPoint : public CHeapObj<mtGC> {$/;"	c
G1FullGCMarkTask	g1FullGCMarkTask.cpp	/^G1FullGCMarkTask::G1FullGCMarkTask(G1FullCollector* collector) :$/;"	f	class:G1FullGCMarkTask
G1FullGCMarkTask	g1FullGCMarkTask.hpp	/^class G1FullGCMarkTask : public G1FullGCTask {$/;"	c
G1FullGCMarker	g1FullGCMarker.cpp	/^G1FullGCMarker::G1FullGCMarker(uint worker_id, PreservedMarks* preserved_stack, G1CMBitMap* bitmap) :$/;"	f	class:G1FullGCMarker
G1FullGCMarker	g1FullGCMarker.hpp	/^class G1FullGCMarker : public CHeapObj<mtGC> {$/;"	c
G1FullGCPrepareTask	g1FullGCPrepareTask.cpp	/^G1FullGCPrepareTask::G1FullGCPrepareTask(G1FullCollector* collector) :$/;"	f	class:G1FullGCPrepareTask
G1FullGCPrepareTask	g1FullGCPrepareTask.hpp	/^class G1FullGCPrepareTask : public G1FullGCTask {$/;"	c
G1FullGCReferenceProcessingExecutor	g1FullGCReferenceProcessorExecutor.cpp	/^G1FullGCReferenceProcessingExecutor::G1FullGCReferenceProcessingExecutor(G1FullCollector* collector) :$/;"	f	class:G1FullGCReferenceProcessingExecutor
G1FullGCReferenceProcessingExecutor	g1FullGCReferenceProcessorExecutor.hpp	/^class G1FullGCReferenceProcessingExecutor: public AbstractRefProcTaskExecutor {$/;"	c
G1FullGCScope	g1FullGCScope.cpp	/^G1FullGCScope::G1FullGCScope(G1MonitoringSupport* monitoring_support, bool explicit_gc, bool clear_soft) :$/;"	f	class:G1FullGCScope
G1FullGCScope	g1FullGCScope.hpp	/^class G1FullGCScope : public StackObj {$/;"	c
G1FullGCSubjectToDiscoveryClosure	g1FullCollector.hpp	/^class G1FullGCSubjectToDiscoveryClosure: public BoolObjectClosure {$/;"	c
G1FullGCTask	g1FullGCTask.hpp	/^  G1FullGCTask(const char* name, G1FullCollector* collector) :$/;"	f	class:G1FullGCTask
G1FullGCTask	g1FullGCTask.hpp	/^class G1FullGCTask : public AbstractGangTask {$/;"	c
G1FullGCTracer	g1Trace.hpp	/^  G1FullGCTracer() : OldGCTracer(G1Full) {}$/;"	f	class:G1FullGCTracer
G1FullGCTracer	g1Trace.hpp	/^class G1FullGCTracer : public OldGCTracer {$/;"	c
G1FullKeepAliveClosure	g1FullGCOopClosures.hpp	/^  G1FullKeepAliveClosure(G1FullGCMarker* pm) : _marker(pm) { }$/;"	f	class:G1FullKeepAliveClosure
G1FullKeepAliveClosure	g1FullGCOopClosures.hpp	/^class G1FullKeepAliveClosure: public OopClosure {$/;"	c
G1GCAllocRegion	g1AllocRegion.hpp	/^  G1GCAllocRegion(const char* name, bool bot_updates, G1EvacStats* stats,$/;"	f	class:G1GCAllocRegion
G1GCAllocRegion	g1AllocRegion.hpp	/^class G1GCAllocRegion : public G1AllocRegion {$/;"	c
G1GCParPhaseTimesTracker	g1GCParPhaseTimesTracker.hpp	/^class G1GCParPhaseTimesTracker : public CHeapObj<mtGC> {$/;"	c
G1GCParPhaseTimesTracker	g1GCPhaseTimes.cpp	/^G1GCParPhaseTimesTracker::G1GCParPhaseTimesTracker(G1GCPhaseTimes* phase_times, G1GCPhaseTimes::GCParPhases phase, uint worker_id, bool must_record) :$/;"	f	class:G1GCParPhaseTimesTracker
G1GCPhaseTimes	g1GCPhaseTimes.cpp	/^G1GCPhaseTimes::G1GCPhaseTimes(STWGCTimer* gc_timer, uint max_gc_threads) :$/;"	f	class:G1GCPhaseTimes
G1GCPhaseTimes	g1GCPhaseTimes.hpp	/^class G1GCPhaseTimes : public CHeapObj<mtGC> {$/;"	c
G1GenerationCounters	g1MonitoringSupport.cpp	/^  G1GenerationCounters(G1MonitoringSupport* g1mm,$/;"	f	class:G1GenerationCounters
G1GenerationCounters	g1MonitoringSupport.cpp	/^class G1GenerationCounters : public GenerationCounters {$/;"	c	file:
G1HRPrinter	g1HRPrinter.hpp	/^class G1HRPrinter {$/;"	c
G1H_process_roots_tasks	g1RootProcessor.hpp	/^  enum G1H_process_roots_tasks {$/;"	g	class:G1RootProcessor
G1HeapRegionAttr	g1HeapRegionAttr.hpp	/^  G1HeapRegionAttr(region_type_t type = NotInCSet, bool needs_remset_update = false) :$/;"	f	struct:G1HeapRegionAttr
G1HeapRegionAttr	g1HeapRegionAttr.hpp	/^struct G1HeapRegionAttr {$/;"	s
G1HeapRegionAttrBiasedMappedArray	g1HeapRegionAttr.hpp	/^class G1HeapRegionAttrBiasedMappedArray : public G1BiasedMappedArray<G1HeapRegionAttr> {$/;"	c
G1HeapRegionEventSender	g1HeapRegionEventSender.hpp	/^class G1HeapRegionEventSender : public AllStatic {$/;"	c
G1HeapRegionSizeConstraintFunc	jvmFlagConstraintsG1.cpp	/^JVMFlag::Error G1HeapRegionSizeConstraintFunc(size_t value, bool verbose) {$/;"	f
G1HeapRegionTable	heapRegionManager.hpp	/^class G1HeapRegionTable : public G1BiasedMappedArray<HeapRegion*> {$/;"	c
G1HeapRegionTraceType	g1HeapRegionTraceType.hpp	/^class G1HeapRegionTraceType : AllStatic {$/;"	c
G1HeapRegionTypeConstant	g1Trace.cpp	/^class G1HeapRegionTypeConstant : public JfrSerializer {$/;"	c	file:
G1HeapRegionTypeEndSentinel	g1HeapRegionTraceType.hpp	/^    G1HeapRegionTypeEndSentinel$/;"	e	enum:G1HeapRegionTraceType::Type
G1HeapSizingPolicy	g1HeapSizingPolicy.cpp	/^G1HeapSizingPolicy::G1HeapSizingPolicy(const G1CollectedHeap* g1h, const G1Analytics* analytics) :$/;"	f	class:G1HeapSizingPolicy
G1HeapSizingPolicy	g1HeapSizingPolicy.hpp	/^class G1HeapSizingPolicy: public CHeapObj<mtGC> {$/;"	c
G1HeapTransition	g1HeapTransition.cpp	/^G1HeapTransition::G1HeapTransition(G1CollectedHeap* g1_heap) : _g1_heap(g1_heap), _before(g1_heap) { }$/;"	f	class:G1HeapTransition
G1HeapTransition	g1HeapTransition.hpp	/^class G1HeapTransition {$/;"	c
G1HeapVerifier	g1HeapVerifier.hpp	/^  G1HeapVerifier(G1CollectedHeap* heap) : _g1h(heap) {}$/;"	f	class:G1HeapVerifier
G1HeapVerifier	g1HeapVerifier.hpp	/^class G1HeapVerifier : public CHeapObj<mtGC> {$/;"	c
G1HeterogeneousHeapPolicy	g1HeterogeneousHeapPolicy.cpp	/^G1HeterogeneousHeapPolicy::G1HeterogeneousHeapPolicy(STWGCTimer* gc_timer) :$/;"	f	class:G1HeterogeneousHeapPolicy
G1HeterogeneousHeapPolicy	g1HeterogeneousHeapPolicy.hpp	/^class G1HeterogeneousHeapPolicy : public G1Policy {$/;"	c
G1HeterogeneousHeapYoungGenSizer	g1HeterogeneousHeapYoungGenSizer.cpp	/^G1HeterogeneousHeapYoungGenSizer::G1HeterogeneousHeapYoungGenSizer() : G1YoungGenSizer() {$/;"	f	class:G1HeterogeneousHeapYoungGenSizer
G1HeterogeneousHeapYoungGenSizer	g1HeterogeneousHeapYoungGenSizer.hpp	/^class G1HeterogeneousHeapYoungGenSizer : public G1YoungGenSizer {$/;"	c
G1HotCardCache	g1HotCardCache.cpp	/^G1HotCardCache::G1HotCardCache(G1CollectedHeap *g1h):$/;"	f	class:G1HotCardCache
G1HotCardCache	g1HotCardCache.hpp	/^class G1HotCardCache: public CHeapObj<mtGC> {$/;"	c
G1IHOPControl	g1IHOPControl.cpp	/^G1IHOPControl::G1IHOPControl(double initial_ihop_percent,$/;"	f	class:G1IHOPControl
G1IHOPControl	g1IHOPControl.hpp	/^class G1IHOPControl : public CHeapObj<mtGC> {$/;"	c
G1InitLogger	g1InitLogger.hpp	/^class G1InitLogger : public GCInitLogger {$/;"	c
G1IsAliveClosure	g1FullGCOopClosures.hpp	/^  G1IsAliveClosure(G1CMBitMap* bitmap) : _bitmap(bitmap) { }$/;"	f	class:G1IsAliveClosure
G1IsAliveClosure	g1FullGCOopClosures.hpp	/^class G1IsAliveClosure : public BoolObjectClosure {$/;"	c
G1KeepAliveClosure	g1CollectedHeap.cpp	/^  G1KeepAliveClosure(G1CollectedHeap* g1h) :_g1h(g1h) {}$/;"	f	class:G1KeepAliveClosure
G1KeepAliveClosure	g1CollectedHeap.cpp	/^class G1KeepAliveClosure: public OopClosure {$/;"	c	file:
G1MMUTracer	g1Trace.hpp	/^class G1MMUTracer : public AllStatic {$/;"	c
G1MMUTracker	g1MMUTracker.cpp	/^G1MMUTracker::G1MMUTracker(double time_slice, double max_gc_time) :$/;"	f	class:G1MMUTracker
G1MMUTracker	g1MMUTracker.hpp	/^class G1MMUTracker: public CHeapObj<mtGC> {$/;"	c
G1MMUTrackerQueue	g1MMUTracker.cpp	/^G1MMUTrackerQueue::G1MMUTrackerQueue(double time_slice, double max_gc_time) :$/;"	f	class:G1MMUTrackerQueue
G1MMUTrackerQueue	g1MMUTracker.hpp	/^class G1MMUTrackerQueue: public G1MMUTracker {$/;"	c
G1MMUTrackerQueueElem	g1MMUTracker.hpp	/^  G1MMUTrackerQueueElem() {$/;"	f	class:G1MMUTrackerQueueElem
G1MMUTrackerQueueElem	g1MMUTracker.hpp	/^  G1MMUTrackerQueueElem(double start_time, double end_time) {$/;"	f	class:G1MMUTrackerQueueElem
G1MMUTrackerQueueElem	g1MMUTracker.hpp	/^class G1MMUTrackerQueueElem {$/;"	c
G1MappingChangedListener	g1RegionToSpaceMapper.hpp	/^class G1MappingChangedListener {$/;"	c
G1Mark	g1OopClosures.hpp	/^enum G1Mark {$/;"	g
G1MarkAndPushClosure	g1FullGCOopClosures.hpp	/^  G1MarkAndPushClosure(uint worker, G1FullGCMarker* marker, ReferenceDiscoverer* ref) :$/;"	f	class:G1MarkAndPushClosure
G1MarkAndPushClosure	g1FullGCOopClosures.hpp	/^class G1MarkAndPushClosure : public OopIterateClosure {$/;"	c
G1MarkFromRoot	g1OopClosures.hpp	/^  G1MarkFromRoot,$/;"	e	enum:G1Mark
G1MarkNone	g1OopClosures.hpp	/^  G1MarkNone,$/;"	e	enum:G1Mark
G1MarkPromotedFromRoot	g1OopClosures.hpp	/^  G1MarkPromotedFromRoot$/;"	e	enum:G1Mark
G1MaxNewSizePercentConstraintFunc	jvmFlagConstraintsG1.cpp	/^JVMFlag::Error G1MaxNewSizePercentConstraintFunc(uintx value, bool verbose) {$/;"	f
G1MemoryPoolSuper	g1MemoryPool.cpp	/^G1MemoryPoolSuper::G1MemoryPoolSuper(G1CollectedHeap* g1h,$/;"	f	class:G1MemoryPoolSuper
G1MemoryPoolSuper	g1MemoryPool.hpp	/^class G1MemoryPoolSuper : public CollectedMemoryPool {$/;"	c
G1MergeCardSetClosure	g1RemSet.cpp	/^    G1MergeCardSetClosure(G1RemSetScanState* scan_state) :$/;"	f	class:G1MergeHeapRootsTask::G1MergeCardSetClosure
G1MergeCardSetClosure	g1RemSet.cpp	/^  class G1MergeCardSetClosure : public HeapRegionClosure {$/;"	c	class:G1MergeHeapRootsTask	file:
G1MergeHeapRootsTask	g1RemSet.cpp	/^  G1MergeHeapRootsTask(G1RemSetScanState* scan_state, uint num_workers, bool initial_evacuation) :$/;"	f	class:G1MergeHeapRootsTask
G1MergeHeapRootsTask	g1RemSet.cpp	/^class G1MergeHeapRootsTask : public AbstractGangTask {$/;"	c	file:
G1MergeLogBufferCardsClosure	g1RemSet.cpp	/^    G1MergeLogBufferCardsClosure(G1CollectedHeap* g1h, G1RemSetScanState* scan_state) :$/;"	f	class:G1MergeHeapRootsTask::G1MergeLogBufferCardsClosure
G1MergeLogBufferCardsClosure	g1RemSet.cpp	/^  class G1MergeLogBufferCardsClosure : public G1CardTableEntryClosure {$/;"	c	class:G1MergeHeapRootsTask	file:
G1MonitoringScope	g1MonitoringSupport.cpp	/^G1MonitoringScope::G1MonitoringScope(G1MonitoringSupport* g1mm, bool full_gc, bool all_memory_pools_affected) :$/;"	f	class:G1MonitoringScope
G1MonitoringScope	g1MonitoringSupport.hpp	/^class G1MonitoringScope : public StackObj {$/;"	c
G1MonitoringSupport	g1MonitoringSupport.cpp	/^G1MonitoringSupport::G1MonitoringSupport(G1CollectedHeap* g1h) :$/;"	f	class:G1MonitoringSupport
G1MonitoringSupport	g1MonitoringSupport.hpp	/^class G1MonitoringSupport : public CHeapObj<mtGC> {$/;"	c
G1Mux2Closure	heapRegion.cpp	/^  G1Mux2Closure(OopClosure *c1, OopClosure *c2) { _c1 = c1; _c2 = c2; }$/;"	f	class:G1Mux2Closure
G1Mux2Closure	heapRegion.cpp	/^class G1Mux2Closure : public BasicOopIterateClosure {$/;"	c	file:
G1NUMA	g1NUMA.cpp	/^G1NUMA::G1NUMA() :$/;"	f	class:G1NUMA
G1NUMA	g1NUMA.hpp	/^class G1NUMA: public CHeapObj<mtGC> {$/;"	c
G1NUMAStats	g1NUMAStats.cpp	/^G1NUMAStats::G1NUMAStats(const int* node_ids, uint num_node_ids) :$/;"	f	class:G1NUMAStats
G1NUMAStats	g1NUMAStats.hpp	/^class G1NUMAStats : public CHeapObj<mtGC> {$/;"	c
G1NewSizePercentConstraintFunc	jvmFlagConstraintsG1.cpp	/^JVMFlag::Error G1NewSizePercentConstraintFunc(uintx value, bool verbose) {$/;"	f
G1NewTracer	g1Trace.hpp	/^  G1NewTracer() : YoungGCTracer(G1New) {}$/;"	f	class:G1NewTracer
G1NewTracer	g1Trace.hpp	/^class G1NewTracer : public YoungGCTracer {$/;"	c
G1NmethodProcessor	g1CodeBlobClosure.cpp	/^  G1NmethodProcessor(G1CodeBlobClosure* cl) : _cl(cl) { }$/;"	f	class:G1NmethodProcessor
G1NmethodProcessor	g1CodeBlobClosure.cpp	/^class G1NmethodProcessor : public nmethod::OopsDoProcessor {$/;"	c	file:
G1NodeIndexCheckClosure	g1NUMA.cpp	/^G1NodeIndexCheckClosure::G1NodeIndexCheckClosure(const char* desc, G1NUMA* numa, LogStream* ls) :$/;"	f	class:G1NodeIndexCheckClosure
G1NodeIndexCheckClosure	g1NUMA.hpp	/^class G1NodeIndexCheckClosure : public HeapRegionClosure {$/;"	c
G1ObjectCountIsAliveClosure	g1ConcurrentMark.cpp	/^  G1ObjectCountIsAliveClosure(G1CollectedHeap* g1h) : _g1h(g1h) { }$/;"	f	class:G1ObjectCountIsAliveClosure
G1ObjectCountIsAliveClosure	g1ConcurrentMark.cpp	/^class G1ObjectCountIsAliveClosure: public BoolObjectClosure {$/;"	c	file:
G1OldGenAllocationTracker	g1OldGenAllocationTracker.cpp	/^G1OldGenAllocationTracker::G1OldGenAllocationTracker() :$/;"	f	class:G1OldGenAllocationTracker
G1OldGenAllocationTracker	g1OldGenAllocationTracker.hpp	/^class G1OldGenAllocationTracker : public CHeapObj<mtGC> {$/;"	c
G1OldGenPool	g1MemoryPool.cpp	/^G1OldGenPool::G1OldGenPool(G1CollectedHeap* g1h, size_t initial_size, size_t max_size) :$/;"	f	class:G1OldGenPool
G1OldGenPool	g1MemoryPool.hpp	/^class G1OldGenPool : public G1MemoryPoolSuper {$/;"	c
G1OldGenerationCounters	g1MonitoringSupport.cpp	/^  G1OldGenerationCounters(G1MonitoringSupport* g1mm, const char* name, size_t max_size)$/;"	f	class:G1OldGenerationCounters
G1OldGenerationCounters	g1MonitoringSupport.cpp	/^class G1OldGenerationCounters : public G1GenerationCounters {$/;"	c	file:
G1OldTracer	g1Trace.hpp	/^  G1OldTracer() : OldGCTracer(G1Old) {}$/;"	f	class:G1OldTracer
G1OldTracer	g1Trace.hpp	/^class G1OldTracer : public OldGCTracer {$/;"	c
G1OopStarChunkedList	g1OopStarChunkedList.hpp	/^  G1OopStarChunkedList() : _used_memory(0), _roots(NULL), _croots(NULL), _oops(NULL), _coops(NULL) {}$/;"	f	class:G1OopStarChunkedList
G1OopStarChunkedList	g1OopStarChunkedList.hpp	/^class G1OopStarChunkedList : public CHeapObj<mtGC> {$/;"	c
G1PLABAllocator	g1Allocator.cpp	/^G1PLABAllocator::G1PLABAllocator(G1Allocator* allocator) :$/;"	f	class:G1PLABAllocator
G1PLABAllocator	g1Allocator.hpp	/^class G1PLABAllocator : public CHeapObj<mtGC> {$/;"	c
G1PPRL_ADDR_BASE_FORMAT	g1ConcurrentMark.cpp	2863;"	d	file:
G1PPRL_ADDR_BASE_H_FORMAT	g1ConcurrentMark.cpp	2865;"	d	file:
G1PPRL_ADDR_BASE_H_FORMAT	g1ConcurrentMark.cpp	2867;"	d	file:
G1PPRL_BYTE_FORMAT	g1ConcurrentMark.cpp	2875;"	d	file:
G1PPRL_BYTE_H_FORMAT	g1ConcurrentMark.cpp	2876;"	d	file:
G1PPRL_DOUBLE_FORMAT	g1ConcurrentMark.cpp	2877;"	d	file:
G1PPRL_DOUBLE_H_FORMAT	g1ConcurrentMark.cpp	2878;"	d	file:
G1PPRL_LINE_PREFIX	g1ConcurrentMark.cpp	2861;"	d	file:
G1PPRL_STATE_FORMAT	g1ConcurrentMark.cpp	2873;"	d	file:
G1PPRL_STATE_H_FORMAT	g1ConcurrentMark.cpp	2874;"	d	file:
G1PPRL_SUM_ADDR_FORMAT	g1ConcurrentMark.cpp	2881;"	d	file:
G1PPRL_SUM_BYTE_FORMAT	g1ConcurrentMark.cpp	2882;"	d	file:
G1PPRL_SUM_MB_FORMAT	g1ConcurrentMark.cpp	2883;"	d	file:
G1PPRL_SUM_MB_PERC_FORMAT	g1ConcurrentMark.cpp	2884;"	d	file:
G1PPRL_TYPE_FORMAT	g1ConcurrentMark.cpp	2871;"	d	file:
G1PPRL_TYPE_H_FORMAT	g1ConcurrentMark.cpp	2872;"	d	file:
G1PageBasedVirtualSpace	g1PageBasedVirtualSpace.cpp	/^G1PageBasedVirtualSpace::G1PageBasedVirtualSpace(ReservedSpace rs, size_t used_size, size_t page_size) :$/;"	f	class:G1PageBasedVirtualSpace
G1PageBasedVirtualSpace	g1PageBasedVirtualSpace.hpp	/^class G1PageBasedVirtualSpace {$/;"	c
G1ParCopyClosure	g1OopClosures.hpp	/^  G1ParCopyClosure(G1CollectedHeap* g1h, G1ParScanThreadState* par_scan_state) :$/;"	f	class:G1ParCopyClosure
G1ParCopyClosure	g1OopClosures.hpp	/^class G1ParCopyClosure : public G1ParCopyHelper {$/;"	c
G1ParCopyHelper	g1OopClosures.cpp	/^G1ParCopyHelper::G1ParCopyHelper(G1CollectedHeap* g1h,  G1ParScanThreadState* par_scan_state) :$/;"	f	class:G1ParCopyHelper
G1ParCopyHelper	g1OopClosures.hpp	/^class G1ParCopyHelper : public OopClosure {$/;"	c
G1ParEvacuateFollowersClosure	g1CollectedHeap.hpp	/^  G1ParEvacuateFollowersClosure(G1CollectedHeap* g1h,$/;"	f	class:G1ParEvacuateFollowersClosure
G1ParEvacuateFollowersClosure	g1CollectedHeap.hpp	/^class G1ParEvacuateFollowersClosure : public VoidClosure {$/;"	c
G1ParRemoveSelfForwardPtrsTask	g1EvacFailure.cpp	/^G1ParRemoveSelfForwardPtrsTask::G1ParRemoveSelfForwardPtrsTask(G1RedirtyCardsQueueSet* rdcqs) :$/;"	f	class:G1ParRemoveSelfForwardPtrsTask
G1ParRemoveSelfForwardPtrsTask	g1EvacFailure.hpp	/^class G1ParRemoveSelfForwardPtrsTask: public AbstractGangTask {$/;"	c
G1ParScanThreadState	g1ParScanThreadState.cpp	/^G1ParScanThreadState::G1ParScanThreadState(G1CollectedHeap* g1h,$/;"	f	class:G1ParScanThreadState
G1ParScanThreadState	g1ParScanThreadState.hpp	/^class G1ParScanThreadState : public CHeapObj<mtGC> {$/;"	c
G1ParScanThreadStateSet	g1ParScanThreadState.cpp	/^G1ParScanThreadStateSet::G1ParScanThreadStateSet(G1CollectedHeap* g1h,$/;"	f	class:G1ParScanThreadStateSet
G1ParScanThreadStateSet	g1ParScanThreadState.hpp	/^class G1ParScanThreadStateSet : public StackObj {$/;"	c
G1ParVerifyTask	g1HeapVerifier.cpp	/^  G1ParVerifyTask(G1CollectedHeap* g1h, VerifyOption vo) :$/;"	f	class:G1ParVerifyTask
G1ParVerifyTask	g1HeapVerifier.cpp	/^class G1ParVerifyTask: public AbstractGangTask {$/;"	c	file:
G1ParallelCleaningTask	g1ParallelCleaning.hpp	/^class G1ParallelCleaningTask : public AbstractGangTask {$/;"	c
G1ParallelObjectIterator	g1CollectedHeap.cpp	/^  G1ParallelObjectIterator(uint thread_num) :$/;"	f	class:G1ParallelObjectIterator
G1ParallelObjectIterator	g1CollectedHeap.cpp	/^class G1ParallelObjectIterator : public ParallelObjectIterator {$/;"	c	file:
G1Policy	g1Policy.cpp	/^G1Policy::G1Policy(STWGCTimer* gc_timer) :$/;"	f	class:G1Policy
G1Policy	g1Policy.hpp	/^class G1Policy: public CHeapObj<mtGC> {$/;"	c
G1PostBarrierStub	c1/g1BarrierSetC1.hpp	/^  G1PostBarrierStub(LIR_Opr addr, LIR_Opr new_val): _addr(addr), _new_val(new_val) { }$/;"	f	class:G1PostBarrierStub
G1PostBarrierStub	c1/g1BarrierSetC1.hpp	/^class G1PostBarrierStub: public CodeStub {$/;"	c
G1PreBarrierStub	c1/g1BarrierSetC1.hpp	/^  G1PreBarrierStub(LIR_Opr addr, LIR_Opr pre_val, LIR_PatchCode patch_code, CodeEmitInfo* info) :$/;"	f	class:G1PreBarrierStub
G1PreBarrierStub	c1/g1BarrierSetC1.hpp	/^  G1PreBarrierStub(LIR_Opr pre_val) :$/;"	f	class:G1PreBarrierStub
G1PreBarrierStub	c1/g1BarrierSetC1.hpp	/^class G1PreBarrierStub: public CodeStub {$/;"	c
G1PrecleanYieldClosure	g1ConcurrentMark.cpp	/^  G1PrecleanYieldClosure(G1ConcurrentMark* cm) : _cm(cm) { }$/;"	f	class:G1PrecleanYieldClosure
G1PrecleanYieldClosure	g1ConcurrentMark.cpp	/^class G1PrecleanYieldClosure : public YieldClosure {$/;"	c	file:
G1Predictions	g1Predictions.hpp	/^  G1Predictions(double sigma) : _sigma(sigma) {$/;"	f	class:G1Predictions
G1Predictions	g1Predictions.hpp	/^class G1Predictions {$/;"	c
G1PrepareCompactLiveClosure	g1FullGCPrepareTask.cpp	/^G1FullGCPrepareTask::G1PrepareCompactLiveClosure::G1PrepareCompactLiveClosure(G1FullGCCompactionPoint* cp) :$/;"	f	class:G1FullGCPrepareTask::G1PrepareCompactLiveClosure
G1PrepareCompactLiveClosure	g1FullGCPrepareTask.hpp	/^  class G1PrepareCompactLiveClosure : public StackObj {$/;"	c	class:G1FullGCPrepareTask
G1PrepareEvacuationTask	g1CollectedHeap.cpp	/^  G1PrepareEvacuationTask(G1CollectedHeap* g1h) :$/;"	f	class:G1PrepareEvacuationTask
G1PrepareEvacuationTask	g1CollectedHeap.cpp	/^class G1PrepareEvacuationTask : public AbstractGangTask {$/;"	c	file:
G1PrepareRegionsClosure	g1CollectedHeap.cpp	/^    G1PrepareRegionsClosure(G1CollectedHeap* g1h, G1PrepareEvacuationTask* parent_task) :$/;"	f	class:G1PrepareEvacuationTask::G1PrepareRegionsClosure
G1PrepareRegionsClosure	g1CollectedHeap.cpp	/^  class G1PrepareRegionsClosure : public HeapRegionClosure {$/;"	c	class:G1PrepareEvacuationTask	file:
G1PretouchTask	g1PageBasedVirtualSpace.cpp	/^  G1PretouchTask(char* start_address, char* end_address, size_t page_size) :$/;"	f	class:G1PretouchTask
G1PretouchTask	g1PageBasedVirtualSpace.cpp	/^class G1PretouchTask : public AbstractGangTask {$/;"	c	file:
G1PrintCollectionSetClosure	g1CollectedHeap.cpp	/^  G1PrintCollectionSetClosure(G1HRPrinter* hr_printer) : HeapRegionClosure(), _hr_printer(hr_printer) { }$/;"	f	class:G1PrintCollectionSetClosure
G1PrintCollectionSetClosure	g1CollectedHeap.cpp	/^class G1PrintCollectionSetClosure : public HeapRegionClosure {$/;"	c	file:
G1PrintCollectionSetDetailClosure	g1CollectionSet.cpp	/^  G1PrintCollectionSetDetailClosure(outputStream* st) : HeapRegionClosure(), _st(st) { }$/;"	f	class:G1PrintCollectionSetDetailClosure
G1PrintCollectionSetDetailClosure	g1CollectionSet.cpp	/^class G1PrintCollectionSetDetailClosure : public HeapRegionClosure {$/;"	c	file:
G1PrintRegionLivenessInfoClosure	g1ConcurrentMark.cpp	/^G1PrintRegionLivenessInfoClosure::G1PrintRegionLivenessInfoClosure(const char* phase_name) :$/;"	f	class:G1PrintRegionLivenessInfoClosure
G1PrintRegionLivenessInfoClosure	g1ConcurrentMark.hpp	/^class G1PrintRegionLivenessInfoClosure : public HeapRegionClosure {$/;"	c
G1RP_PS_ClassLoaderDataGraph_oops_do	g1RootProcessor.hpp	/^    G1RP_PS_ClassLoaderDataGraph_oops_do,$/;"	e	enum:G1RootProcessor::G1H_process_roots_tasks
G1RP_PS_CodeCache_oops_do	g1RootProcessor.hpp	/^    G1RP_PS_CodeCache_oops_do,$/;"	e	enum:G1RootProcessor::G1H_process_roots_tasks
G1RP_PS_Management_oops_do	g1RootProcessor.hpp	/^    G1RP_PS_Management_oops_do,$/;"	e	enum:G1RootProcessor::G1H_process_roots_tasks
G1RP_PS_NumElements	g1RootProcessor.hpp	/^    G1RP_PS_NumElements$/;"	e	enum:G1RootProcessor::G1H_process_roots_tasks
G1RP_PS_ObjectSynchronizer_oops_do	g1RootProcessor.hpp	/^    G1RP_PS_ObjectSynchronizer_oops_do,$/;"	e	enum:G1RootProcessor::G1H_process_roots_tasks
G1RP_PS_Universe_oops_do	g1RootProcessor.hpp	/^    G1RP_PS_Universe_oops_do,$/;"	e	enum:G1RootProcessor::G1H_process_roots_tasks
G1RP_PS_jvmti_oops_do	g1RootProcessor.hpp	/^    G1RP_PS_jvmti_oops_do,$/;"	e	enum:G1RootProcessor::G1H_process_roots_tasks
G1RP_PS_refProcessor_oops_do	g1RootProcessor.hpp	/^    G1RP_PS_refProcessor_oops_do,$/;"	e	enum:G1RootProcessor::G1H_process_roots_tasks
G1RSetRegionEntriesConstraintFunc	jvmFlagConstraintsG1.cpp	/^JVMFlag::Error G1RSetRegionEntriesConstraintFunc(intx value, bool verbose) {$/;"	f
G1RSetSparseRegionEntriesConstraintFunc	jvmFlagConstraintsG1.cpp	/^JVMFlag::Error G1RSetSparseRegionEntriesConstraintFunc(intx value, bool verbose) {$/;"	f
G1RePrepareClosure	g1FullGCPrepareTask.hpp	/^    G1RePrepareClosure(G1FullGCCompactionPoint* hrcp,$/;"	f	class:G1FullGCPrepareTask::G1RePrepareClosure
G1RePrepareClosure	g1FullGCPrepareTask.hpp	/^  class G1RePrepareClosure : public StackObj {$/;"	c	class:G1FullGCPrepareTask
G1RebuildFreeListTask	heapRegionManager.cpp	/^  G1RebuildFreeListTask(HeapRegionManager* hrm, uint num_workers) :$/;"	f	class:G1RebuildFreeListTask
G1RebuildFreeListTask	heapRegionManager.cpp	/^class G1RebuildFreeListTask : public AbstractGangTask {$/;"	c	file:
G1RebuildRemSetClosure	g1OopClosures.hpp	/^  G1RebuildRemSetClosure(G1CollectedHeap* g1h, uint worker_id) : _g1h(g1h), _worker_id(worker_id) {$/;"	f	class:G1RebuildRemSetClosure
G1RebuildRemSetClosure	g1OopClosures.hpp	/^class G1RebuildRemSetClosure : public BasicOopIterateClosure {$/;"	c
G1RebuildRemSetHeapRegionClosure	g1RemSet.cpp	/^  G1RebuildRemSetHeapRegionClosure(G1CollectedHeap* g1h,$/;"	f	class:G1RebuildRemSetTask::G1RebuildRemSetHeapRegionClosure
G1RebuildRemSetHeapRegionClosure	g1RemSet.cpp	/^  class G1RebuildRemSetHeapRegionClosure : public HeapRegionClosure {$/;"	c	class:G1RebuildRemSetTask	file:
G1RebuildRemSetTask	g1RemSet.cpp	/^  G1RebuildRemSetTask(G1ConcurrentMark* cm,$/;"	f	class:G1RebuildRemSetTask
G1RebuildRemSetTask	g1RemSet.cpp	/^class G1RebuildRemSetTask: public AbstractGangTask {$/;"	c	file:
G1ReclaimEmptyRegionsClosure	g1ConcurrentMark.cpp	/^    G1ReclaimEmptyRegionsClosure(G1CollectedHeap* g1h,$/;"	f	class:G1ReclaimEmptyRegionsTask::G1ReclaimEmptyRegionsClosure
G1ReclaimEmptyRegionsClosure	g1ConcurrentMark.cpp	/^  class G1ReclaimEmptyRegionsClosure : public HeapRegionClosure {$/;"	c	class:G1ReclaimEmptyRegionsTask	file:
G1ReclaimEmptyRegionsTask	g1ConcurrentMark.cpp	/^  G1ReclaimEmptyRegionsTask(G1CollectedHeap* g1h, FreeRegionList* cleanup_list, uint n_workers) :$/;"	f	class:G1ReclaimEmptyRegionsTask
G1ReclaimEmptyRegionsTask	g1ConcurrentMark.cpp	/^class G1ReclaimEmptyRegionsTask : public AbstractGangTask {$/;"	c	file:
G1RedirtyCardsQueue	g1RedirtyCardsQueue.cpp	/^G1RedirtyCardsQueue::G1RedirtyCardsQueue(G1RedirtyCardsQueueSet* qset) :$/;"	f	class:G1RedirtyCardsQueue
G1RedirtyCardsQueue	g1RedirtyCardsQueue.hpp	/^class G1RedirtyCardsQueue : private G1RedirtyCardsQueueBase, public PtrQueue {$/;"	c
G1RedirtyCardsQueueBase	g1RedirtyCardsQueue.hpp	/^  G1RedirtyCardsQueueBase(G1RedirtyCardsQueueSet* shared_qset) :$/;"	f	class:G1RedirtyCardsQueueBase
G1RedirtyCardsQueueBase	g1RedirtyCardsQueue.hpp	/^class G1RedirtyCardsQueueBase {$/;"	c
G1RedirtyCardsQueueSet	g1RedirtyCardsQueue.hpp	/^class G1RedirtyCardsQueueSet : public PtrQueueSet {$/;"	c
G1RedirtyLoggedCardsTask	g1CollectedHeap.cpp	/^  G1RedirtyLoggedCardsTask(G1RedirtyCardsQueueSet* qset, G1CollectedHeap* g1h) :$/;"	f	class:G1RedirtyLoggedCardsTask
G1RedirtyLoggedCardsTask	g1CollectedHeap.cpp	/^class G1RedirtyLoggedCardsTask : public AbstractGangTask {$/;"	c	file:
G1RefProcTaskProxy	g1FullGCReferenceProcessorExecutor.cpp	/^G1FullGCReferenceProcessingExecutor::G1RefProcTaskProxy::G1RefProcTaskProxy(ProcessTask& proc_task,$/;"	f	class:G1FullGCReferenceProcessingExecutor::G1RefProcTaskProxy
G1RefProcTaskProxy	g1FullGCReferenceProcessorExecutor.hpp	/^  class G1RefProcTaskProxy : public AbstractGangTask {$/;"	c	class:G1FullGCReferenceProcessingExecutor
G1RefineBufferedCards	g1DirtyCardQueue.cpp	/^  G1RefineBufferedCards(BufferNode* node,$/;"	f	class:G1RefineBufferedCards
G1RefineBufferedCards	g1DirtyCardQueue.cpp	/^class G1RefineBufferedCards : public StackObj {$/;"	c	file:
G1RegionMappingChangedListener	g1CollectedHeap.hpp	/^class G1RegionMappingChangedListener : public G1MappingChangedListener {$/;"	c
G1RegionMarkStats	g1RegionMarkStatsCache.hpp	/^struct G1RegionMarkStats {$/;"	s
G1RegionMarkStatsCache	g1RegionMarkStatsCache.cpp	/^G1RegionMarkStatsCache::G1RegionMarkStatsCache(G1RegionMarkStats* target, uint num_cache_entries) :$/;"	f	class:G1RegionMarkStatsCache
G1RegionMarkStatsCache	g1RegionMarkStatsCache.hpp	/^class G1RegionMarkStatsCache {$/;"	c
G1RegionMarkStatsCacheEntry	g1RegionMarkStatsCache.hpp	/^  struct G1RegionMarkStatsCacheEntry {$/;"	s	class:G1RegionMarkStatsCache
G1RegionToHeteroSpaceMapper	g1RegionToSpaceMapper.cpp	/^G1RegionToHeteroSpaceMapper::G1RegionToHeteroSpaceMapper(ReservedSpace rs,$/;"	f	class:G1RegionToHeteroSpaceMapper
G1RegionToHeteroSpaceMapper	g1RegionToSpaceMapper.hpp	/^class G1RegionToHeteroSpaceMapper : public G1RegionToSpaceMapper {$/;"	c
G1RegionToSpaceMapper	g1RegionToSpaceMapper.cpp	/^G1RegionToSpaceMapper::G1RegionToSpaceMapper(ReservedSpace rs,$/;"	f	class:G1RegionToSpaceMapper
G1RegionToSpaceMapper	g1RegionToSpaceMapper.hpp	/^class G1RegionToSpaceMapper : public CHeapObj<mtGC> {$/;"	c
G1RegionsLargerThanCommitSizeMapper	g1RegionToSpaceMapper.cpp	/^  G1RegionsLargerThanCommitSizeMapper(ReservedSpace rs,$/;"	f	class:G1RegionsLargerThanCommitSizeMapper
G1RegionsLargerThanCommitSizeMapper	g1RegionToSpaceMapper.cpp	/^class G1RegionsLargerThanCommitSizeMapper : public G1RegionToSpaceMapper {$/;"	c	file:
G1RegionsOnNodes	g1RegionsOnNodes.cpp	/^G1RegionsOnNodes::G1RegionsOnNodes() : _count_per_node(NULL), _numa(G1NUMA::numa()) {$/;"	f	class:G1RegionsOnNodes
G1RegionsOnNodes	g1RegionsOnNodes.hpp	/^class G1RegionsOnNodes : public StackObj {$/;"	c
G1RegionsSmallerThanCommitSizeMapper	g1RegionToSpaceMapper.cpp	/^  G1RegionsSmallerThanCommitSizeMapper(ReservedSpace rs,$/;"	f	class:G1RegionsSmallerThanCommitSizeMapper
G1RegionsSmallerThanCommitSizeMapper	g1RegionToSpaceMapper.cpp	/^class G1RegionsSmallerThanCommitSizeMapper : public G1RegionToSpaceMapper {$/;"	c	file:
G1RemSet	g1RemSet.cpp	/^G1RemSet::G1RemSet(G1CollectedHeap* g1h,$/;"	f	class:G1RemSet
G1RemSet	g1RemSet.hpp	/^class G1RemSet: public CHeapObj<mtGC> {$/;"	c
G1RemSetScanState	g1RemSet.cpp	/^  G1RemSetScanState() :$/;"	f	class:G1RemSetScanState
G1RemSetScanState	g1RemSet.cpp	/^class G1RemSetScanState : public CHeapObj<mtGC> {$/;"	c	file:
G1RemSetSummary	g1RemSetSummary.cpp	/^G1RemSetSummary::G1RemSetSummary(bool should_update) :$/;"	f	class:G1RemSetSummary
G1RemSetSummary	g1RemSetSummary.hpp	/^class G1RemSetSummary {$/;"	c
G1RemSetTrackingPolicy	g1RemSetTrackingPolicy.hpp	/^class G1RemSetTrackingPolicy : public CHeapObj<mtGC> {$/;"	c
G1RemarkThreadsClosure	g1ConcurrentMark.cpp	/^  G1RemarkThreadsClosure(G1CollectedHeap* g1h, G1CMTask* task) :$/;"	f	class:G1RemarkThreadsClosure
G1RemarkThreadsClosure	g1ConcurrentMark.cpp	/^class G1RemarkThreadsClosure : public ThreadClosure {$/;"	c	file:
G1RemsetIterState	g1RemSet.cpp	/^  typedef bool G1RemsetIterState;$/;"	t	class:G1RemSetScanState	file:
G1ResetHumongousClosure	g1FullGCCompactTask.cpp	/^  G1ResetHumongousClosure(G1CMBitMap* bitmap) :$/;"	f	class:G1ResetHumongousClosure
G1ResetHumongousClosure	g1FullGCCompactTask.cpp	/^class G1ResetHumongousClosure : public HeapRegionClosure {$/;"	c	file:
G1RootClosures	g1RootClosures.hpp	/^class G1RootClosures : public CHeapObj<mtGC> {$/;"	c
G1RootProcessor	g1RootProcessor.cpp	/^G1RootProcessor::G1RootProcessor(G1CollectedHeap* g1h, uint n_workers) :$/;"	f	class:G1RootProcessor
G1RootProcessor	g1RootProcessor.hpp	/^class G1RootProcessor : public StackObj {$/;"	c
G1RootRegionScanClosure	g1OopClosures.hpp	/^  G1RootRegionScanClosure(G1CollectedHeap* g1h, G1ConcurrentMark* cm, uint worker_id) :$/;"	f	class:G1RootRegionScanClosure
G1RootRegionScanClosure	g1OopClosures.hpp	/^class G1RootRegionScanClosure : public MetadataVisitingOopIterateClosure {$/;"	c
G1SATBMarkQueueFilterFn	g1SATBMarkQueueSet.cpp	/^  G1SATBMarkQueueFilterFn() : _g1h(G1CollectedHeap::heap()) {}$/;"	f	class:G1SATBMarkQueueFilterFn
G1SATBMarkQueueFilterFn	g1SATBMarkQueueSet.cpp	/^class G1SATBMarkQueueFilterFn {$/;"	c	file:
G1SATBMarkQueueSet	g1SATBMarkQueueSet.cpp	/^G1SATBMarkQueueSet::G1SATBMarkQueueSet(BufferNode::Allocator* allocator) :$/;"	f	class:G1SATBMarkQueueSet
G1SATBMarkQueueSet	g1SATBMarkQueueSet.hpp	/^class G1SATBMarkQueueSet : public SATBMarkQueueSet {$/;"	c
G1STWDrainQueueClosure	g1CollectedHeap.cpp	/^  G1STWDrainQueueClosure(G1CollectedHeap* g1h, G1ParScanThreadState* pss) :$/;"	f	class:G1STWDrainQueueClosure
G1STWDrainQueueClosure	g1CollectedHeap.cpp	/^class G1STWDrainQueueClosure: public VoidClosure {$/;"	c	file:
G1STWIsAliveClosure	g1CollectedHeap.hpp	/^  G1STWIsAliveClosure(G1CollectedHeap* g1h) : _g1h(g1h) {}$/;"	f	class:G1STWIsAliveClosure
G1STWIsAliveClosure	g1CollectedHeap.hpp	/^class G1STWIsAliveClosure : public BoolObjectClosure {$/;"	c
G1STWRefProcTaskExecutor	g1CollectedHeap.cpp	/^  G1STWRefProcTaskExecutor(G1CollectedHeap* g1h,$/;"	f	class:G1STWRefProcTaskExecutor
G1STWRefProcTaskExecutor	g1CollectedHeap.cpp	/^class G1STWRefProcTaskExecutor: public AbstractRefProcTaskExecutor {$/;"	c	file:
G1STWRefProcTaskProxy	g1CollectedHeap.cpp	/^  G1STWRefProcTaskProxy(ProcessTask& proc_task,$/;"	f	class:G1STWRefProcTaskProxy
G1STWRefProcTaskProxy	g1CollectedHeap.cpp	/^class G1STWRefProcTaskProxy: public AbstractGangTask {$/;"	c	file:
G1STWSubjectToDiscoveryClosure	g1CollectedHeap.hpp	/^  G1STWSubjectToDiscoveryClosure(G1CollectedHeap* g1h) : _g1h(g1h) {}$/;"	f	class:G1STWSubjectToDiscoveryClosure
G1STWSubjectToDiscoveryClosure	g1CollectedHeap.hpp	/^class G1STWSubjectToDiscoveryClosure : public BoolObjectClosure {$/;"	c
G1ScanCardClosure	g1OopClosures.hpp	/^  G1ScanCardClosure(G1CollectedHeap* g1h,$/;"	f	class:G1ScanCardClosure
G1ScanCardClosure	g1OopClosures.hpp	/^class G1ScanCardClosure : public G1ScanClosureBase {$/;"	c
G1ScanClosureBase	g1OopClosures.cpp	/^G1ScanClosureBase::G1ScanClosureBase(G1CollectedHeap* g1h, G1ParScanThreadState* par_scan_state) :$/;"	f	class:G1ScanClosureBase
G1ScanClosureBase	g1OopClosures.hpp	/^class G1ScanClosureBase : public BasicOopIterateClosure {$/;"	c
G1ScanCollectionSetRegionClosure	g1RemSet.cpp	/^  G1ScanCollectionSetRegionClosure(G1RemSetScanState* scan_state,$/;"	f	class:G1ScanCollectionSetRegionClosure
G1ScanCollectionSetRegionClosure	g1RemSet.cpp	/^class G1ScanCollectionSetRegionClosure : public HeapRegionClosure {$/;"	c	file:
G1ScanEvacuatedObjClosure	g1OopClosures.hpp	/^  G1ScanEvacuatedObjClosure(G1CollectedHeap* g1h, G1ParScanThreadState* par_scan_state) :$/;"	f	class:G1ScanEvacuatedObjClosure
G1ScanEvacuatedObjClosure	g1OopClosures.hpp	/^class G1ScanEvacuatedObjClosure : public G1ScanClosureBase {$/;"	c
G1ScanHRForRegionClosure	g1RemSet.cpp	/^  G1ScanHRForRegionClosure(G1RemSetScanState* scan_state,$/;"	f	class:G1ScanHRForRegionClosure
G1ScanHRForRegionClosure	g1RemSet.cpp	/^class G1ScanHRForRegionClosure : public HeapRegionClosure {$/;"	c	file:
G1ScanInYoungSetter	g1OopClosures.hpp	/^  G1ScanInYoungSetter(G1ScanEvacuatedObjClosure* closure, bool new_value) : _closure(closure) {$/;"	f	class:G1ScanInYoungSetter
G1ScanInYoungSetter	g1OopClosures.hpp	/^class G1ScanInYoungSetter : public StackObj {$/;"	c
G1ScanRSForOptionalClosure	g1OopClosures.hpp	/^  G1ScanRSForOptionalClosure(G1CollectedHeap* g1h, G1ScanCardClosure* cl) : _g1h(g1h), _scan_cl(cl) { }$/;"	f	class:G1ScanRSForOptionalClosure
G1ScanRSForOptionalClosure	g1OopClosures.hpp	/^class G1ScanRSForOptionalClosure : public OopClosure {$/;"	c
G1ScannerTasksQueue	g1CollectedHeap.hpp	/^typedef OverflowTaskQueue<ScannerTask, mtGC>           G1ScannerTasksQueue;$/;"	t
G1ScannerTasksQueueSet	g1CollectedHeap.hpp	/^typedef GenericTaskQueueSet<G1ScannerTasksQueue, mtGC> G1ScannerTasksQueueSet;$/;"	t
G1ServiceThread	g1ServiceThread.cpp	/^G1ServiceThread::G1ServiceThread() :$/;"	f	class:G1ServiceThread
G1ServiceThread	g1ServiceThread.hpp	/^class G1ServiceThread: public ConcurrentGCThread {$/;"	c
G1SharedClosures	g1SharedClosures.hpp	/^  G1SharedClosures(G1CollectedHeap* g1h, G1ParScanThreadState* pss, bool process_only_dirty) :$/;"	f	class:G1SharedClosures
G1SharedClosures	g1SharedClosures.hpp	/^class G1SharedClosures {$/;"	c
G1SharedDirtyCardQueue	g1SharedDirtyCardQueue.cpp	/^G1SharedDirtyCardQueue::G1SharedDirtyCardQueue(G1DirtyCardQueueSet* qset) :$/;"	f	class:G1SharedDirtyCardQueue
G1SharedDirtyCardQueue	g1SharedDirtyCardQueue.hpp	/^class G1SharedDirtyCardQueue {$/;"	c
G1StaticIHOPControl	g1IHOPControl.cpp	/^G1StaticIHOPControl::G1StaticIHOPControl(double ihop_percent,$/;"	f	class:G1StaticIHOPControl
G1StaticIHOPControl	g1IHOPControl.hpp	/^class G1StaticIHOPControl : public G1IHOPControl {$/;"	c
G1StringDedup	g1StringDedup.hpp	/^class G1StringDedup : public StringDedup {$/;"	c
G1StringDedupCleaningTask	g1CollectedHeap.cpp	/^  G1StringDedupCleaningTask(BoolObjectClosure* is_alive,$/;"	f	class:G1StringDedupCleaningTask
G1StringDedupCleaningTask	g1CollectedHeap.cpp	/^class G1StringDedupCleaningTask : public AbstractGangTask {$/;"	c	file:
G1StringDedupQueue	g1StringDedupQueue.cpp	/^G1StringDedupQueue::G1StringDedupQueue() :$/;"	f	class:G1StringDedupQueue
G1StringDedupQueue	g1StringDedupQueue.hpp	/^class G1StringDedupQueue : public StringDedupQueue {$/;"	c
G1StringDedupStat	g1StringDedupStat.cpp	/^G1StringDedupStat::G1StringDedupStat() : StringDedupStat(),$/;"	f	class:G1StringDedupStat
G1StringDedupStat	g1StringDedupStat.hpp	/^class G1StringDedupStat : public StringDedupStat {$/;"	c
G1StringDedupWorkerQueue	g1StringDedupQueue.hpp	/^  typedef Stack<oop, mtGC> G1StringDedupWorkerQueue;$/;"	t	class:G1StringDedupQueue
G1SurvRateGroup	g1SurvRateGroup.cpp	/^G1SurvRateGroup::G1SurvRateGroup() :$/;"	f	class:G1SurvRateGroup
G1SurvRateGroup	g1SurvRateGroup.hpp	/^class G1SurvRateGroup : public CHeapObj<mtGC> {$/;"	c
G1SurvivorPool	g1MemoryPool.cpp	/^G1SurvivorPool::G1SurvivorPool(G1CollectedHeap* g1h, size_t initial_size) :$/;"	f	class:G1SurvivorPool
G1SurvivorPool	g1MemoryPool.hpp	/^class G1SurvivorPool : public G1MemoryPoolSuper {$/;"	c
G1SurvivorRegions	g1SurvivorRegions.cpp	/^G1SurvivorRegions::G1SurvivorRegions() :$/;"	f	class:G1SurvivorRegions
G1SurvivorRegions	g1SurvivorRegions.hpp	/^class G1SurvivorRegions {$/;"	c
G1TaskQueueEntry	g1ConcurrentMark.hpp	/^  G1TaskQueueEntry() : _holder(NULL) { }$/;"	f	class:G1TaskQueueEntry
G1TaskQueueEntry	g1ConcurrentMark.hpp	/^  G1TaskQueueEntry(HeapWord* addr) : _holder((void*)((uintptr_t)addr | ArraySliceBit)) { }$/;"	f	class:G1TaskQueueEntry
G1TaskQueueEntry	g1ConcurrentMark.hpp	/^  G1TaskQueueEntry(oop obj) : _holder(obj) {$/;"	f	class:G1TaskQueueEntry
G1TaskQueueEntry	g1ConcurrentMark.hpp	/^class G1TaskQueueEntry {$/;"	c
G1ThreadLocalData	g1ThreadLocalData.hpp	/^  G1ThreadLocalData() :$/;"	f	class:G1ThreadLocalData
G1ThreadLocalData	g1ThreadLocalData.hpp	/^class G1ThreadLocalData {$/;"	c
G1UpdateRemSetTrackingAfterRebuild	g1ConcurrentMark.cpp	/^  G1UpdateRemSetTrackingAfterRebuild(G1CollectedHeap* g1h) : _g1h(g1h) { }$/;"	f	class:G1UpdateRemSetTrackingAfterRebuild
G1UpdateRemSetTrackingAfterRebuild	g1ConcurrentMark.cpp	/^class G1UpdateRemSetTrackingAfterRebuild : public HeapRegionClosure {$/;"	c	file:
G1UpdateRemSetTrackingBeforeRebuild	g1ConcurrentMark.cpp	/^    G1UpdateRemSetTrackingBeforeRebuild(G1CollectedHeap* g1h, G1ConcurrentMark* cm, G1PrintRegionLivenessInfoClosure* cl) :$/;"	f	class:G1UpdateRemSetTrackingBeforeRebuildTask::G1UpdateRemSetTrackingBeforeRebuild
G1UpdateRemSetTrackingBeforeRebuild	g1ConcurrentMark.cpp	/^  class G1UpdateRemSetTrackingBeforeRebuild : public HeapRegionClosure {$/;"	c	class:G1UpdateRemSetTrackingBeforeRebuildTask	file:
G1UpdateRemSetTrackingBeforeRebuildTask	g1ConcurrentMark.cpp	/^  G1UpdateRemSetTrackingBeforeRebuildTask(G1CollectedHeap* g1h, G1ConcurrentMark* cm, uint num_workers) :$/;"	f	class:G1UpdateRemSetTrackingBeforeRebuildTask
G1UpdateRemSetTrackingBeforeRebuildTask	g1ConcurrentMark.cpp	/^class G1UpdateRemSetTrackingBeforeRebuildTask : public AbstractGangTask {$/;"	c	file:
G1VerificationClosure	heapRegion.cpp	/^  G1VerificationClosure(G1CollectedHeap* g1h, VerifyOption vo) :$/;"	f	class:G1VerificationClosure
G1VerificationClosure	heapRegion.cpp	/^class G1VerificationClosure : public BasicOopIterateClosure {$/;"	c	file:
G1VerifyAll	g1HeapVerifier.hpp	/^    G1VerifyAll             = -1$/;"	e	enum:G1HeapVerifier::G1VerifyType
G1VerifyBitmapClosure	g1HeapVerifier.cpp	/^  G1VerifyBitmapClosure(const char* caller, G1HeapVerifier* verifier) :$/;"	f	class:G1VerifyBitmapClosure
G1VerifyBitmapClosure	g1HeapVerifier.cpp	/^class G1VerifyBitmapClosure : public HeapRegionClosure {$/;"	c	file:
G1VerifyCardTableCleanup	g1HeapVerifier.cpp	/^  G1VerifyCardTableCleanup(G1HeapVerifier* verifier)$/;"	f	class:G1VerifyCardTableCleanup
G1VerifyCardTableCleanup	g1HeapVerifier.cpp	/^class G1VerifyCardTableCleanup: public HeapRegionClosure {$/;"	c	file:
G1VerifyCleanup	g1HeapVerifier.hpp	/^    G1VerifyCleanup         = 16, \/\/ -XX:VerifyGCType=cleanup$/;"	e	enum:G1HeapVerifier::G1VerifyType
G1VerifyCodeRootBlobClosure	g1HeapVerifier.cpp	/^  G1VerifyCodeRootBlobClosure(G1VerifyCodeRootOopClosure* oop_cl):$/;"	f	class:G1VerifyCodeRootBlobClosure
G1VerifyCodeRootBlobClosure	g1HeapVerifier.cpp	/^class G1VerifyCodeRootBlobClosure: public CodeBlobClosure {$/;"	c	file:
G1VerifyCodeRootOopClosure	g1HeapVerifier.cpp	/^  G1VerifyCodeRootOopClosure(G1CollectedHeap* g1h, OopClosure* root_cl, VerifyOption vo):$/;"	f	class:G1VerifyCodeRootOopClosure
G1VerifyCodeRootOopClosure	g1HeapVerifier.cpp	/^class G1VerifyCodeRootOopClosure: public OopClosure {$/;"	c	file:
G1VerifyConcurrentStart	g1HeapVerifier.hpp	/^    G1VerifyConcurrentStart =  2, \/\/ -XX:VerifyGCType=concurrent-start$/;"	e	enum:G1HeapVerifier::G1VerifyType
G1VerifyDirtyYoungListClosure	g1HeapVerifier.cpp	/^  G1VerifyDirtyYoungListClosure(G1HeapVerifier* verifier) : HeapRegionClosure(), _verifier(verifier) { }$/;"	f	class:G1VerifyDirtyYoungListClosure
G1VerifyDirtyYoungListClosure	g1HeapVerifier.cpp	/^class G1VerifyDirtyYoungListClosure : public HeapRegionClosure {$/;"	c	file:
G1VerifyFull	g1HeapVerifier.hpp	/^    G1VerifyFull            = 32, \/\/ -XX:VerifyGCType=full$/;"	e	enum:G1HeapVerifier::G1VerifyType
G1VerifyMixed	g1HeapVerifier.hpp	/^    G1VerifyMixed           =  4, \/\/ -XX:VerifyGCType=mixed$/;"	e	enum:G1HeapVerifier::G1VerifyType
G1VerifyOopClosure	g1FullGCOopClosures.cpp	/^G1VerifyOopClosure::G1VerifyOopClosure(VerifyOption option) :$/;"	f	class:G1VerifyOopClosure
G1VerifyOopClosure	g1FullGCOopClosures.hpp	/^class G1VerifyOopClosure: public BasicOopIterateClosure {$/;"	c
G1VerifyRemark	g1HeapVerifier.hpp	/^    G1VerifyRemark          =  8, \/\/ -XX:VerifyGCType=remark$/;"	e	enum:G1HeapVerifier::G1VerifyType
G1VerifyType	g1HeapVerifier.hpp	/^  enum G1VerifyType {$/;"	g	class:G1HeapVerifier
G1VerifyYoungAgesClosure	g1CollectionSet.cpp	/^  G1VerifyYoungAgesClosure() : HeapRegionClosure(), _valid(true) { }$/;"	f	class:G1VerifyYoungAgesClosure
G1VerifyYoungAgesClosure	g1CollectionSet.cpp	/^class G1VerifyYoungAgesClosure : public HeapRegionClosure {$/;"	c	file:
G1VerifyYoungCSetIndicesClosure	g1CollectionSet.cpp	/^  G1VerifyYoungCSetIndicesClosure(size_t young_length) : HeapRegionClosure(), _young_length(young_length) {$/;"	f	class:G1VerifyYoungCSetIndicesClosure
G1VerifyYoungCSetIndicesClosure	g1CollectionSet.cpp	/^class G1VerifyYoungCSetIndicesClosure : public HeapRegionClosure {$/;"	c	file:
G1VerifyYoungNormal	g1HeapVerifier.hpp	/^    G1VerifyYoungNormal     =  1, \/\/ -XX:VerifyGCType=young-normal$/;"	e	enum:G1HeapVerifier::G1VerifyType
G1YCType	g1YCTypes.hpp	/^enum G1YCType {$/;"	g
G1YCTypeConstant	g1Trace.cpp	/^class G1YCTypeConstant : public JfrSerializer {$/;"	c	file:
G1YCTypeEndSentinel	g1YCTypes.hpp	/^  G1YCTypeEndSentinel$/;"	e	enum:G1YCType
G1YCTypeHelper	g1YCTypes.hpp	/^class G1YCTypeHelper {$/;"	c
G1YoungGCInfo	g1Trace.hpp	/^  G1YoungGCInfo() : _type(G1YCTypeEndSentinel) {}$/;"	f	class:G1YoungGCInfo
G1YoungGCInfo	g1Trace.hpp	/^class G1YoungGCInfo {$/;"	c
G1YoungGenSizer	g1YoungGenSizer.cpp	/^G1YoungGenSizer::G1YoungGenSizer() : _sizer_kind(SizerDefaults),$/;"	f	class:G1YoungGenSizer
G1YoungGenSizer	g1YoungGenSizer.hpp	/^class G1YoungGenSizer : public CHeapObj<mtGC> {$/;"	c
G1YoungGenerationCounters	g1MonitoringSupport.cpp	/^  G1YoungGenerationCounters(G1MonitoringSupport* g1mm, const char* name, size_t max_size)$/;"	f	class:G1YoungGenerationCounters
G1YoungGenerationCounters	g1MonitoringSupport.cpp	/^class G1YoungGenerationCounters : public G1GenerationCounters {$/;"	c	file:
G1YoungLengthPredictor	g1Policy.cpp	/^  G1YoungLengthPredictor(double base_time_ms,$/;"	f	class:G1YoungLengthPredictor
G1YoungLengthPredictor	g1Policy.cpp	/^class G1YoungLengthPredictor {$/;"	c	file:
G1YoungRemSetSamplingClosure	g1ServiceThread.cpp	/^  G1YoungRemSetSamplingClosure(SuspendibleThreadSetJoiner* sts) :$/;"	f	class:G1YoungRemSetSamplingClosure
G1YoungRemSetSamplingClosure	g1ServiceThread.cpp	/^class G1YoungRemSetSamplingClosure : public HeapRegionClosure {$/;"	c	file:
G1_NO_HRM_INDEX	heapRegion.hpp	54;"	d
GCMainParPhasesLast	g1GCPhaseTimes.hpp	/^  static const int GCMainParPhasesLast = GCWorkerEnd;$/;"	m	class:G1GCPhaseTimes
GCMergeHCCWorkItems	g1GCPhaseTimes.hpp	/^  enum GCMergeHCCWorkItems {$/;"	g	class:G1GCPhaseTimes
GCMergeLBWorkItems	g1GCPhaseTimes.hpp	/^  enum GCMergeLBWorkItems {$/;"	g	class:G1GCPhaseTimes
GCMergePSSWorkItems	g1GCPhaseTimes.hpp	/^  enum GCMergePSSWorkItems {$/;"	g	class:G1GCPhaseTimes
GCMergeRSWorkTimes	g1GCPhaseTimes.hpp	/^  enum GCMergeRSWorkTimes {$/;"	g	class:G1GCPhaseTimes
GCParPhases	g1GCPhaseTimes.hpp	/^  enum GCParPhases {$/;"	g	class:G1GCPhaseTimes
GCParPhasesSentinel	g1GCPhaseTimes.hpp	/^    GCParPhasesSentinel$/;"	e	enum:G1GCPhaseTimes::GCParPhases
GCPauseIntervalMillisConstraintFuncG1	jvmFlagConstraintsG1.cpp	/^JVMFlag::Error GCPauseIntervalMillisConstraintFuncG1(uintx value, bool verbose) {$/;"	f
GCScanHRWorkItems	g1GCPhaseTimes.hpp	/^  enum GCScanHRWorkItems {$/;"	g	class:G1GCPhaseTimes
GCWorkerEnd	g1GCPhaseTimes.hpp	/^    GCWorkerEnd,$/;"	e	enum:G1GCPhaseTimes::GCParPhases
GCWorkerStart	g1GCPhaseTimes.hpp	/^    GCWorkerStart,$/;"	e	enum:G1GCPhaseTimes::GCParPhases
GCWorkerTotal	g1GCPhaseTimes.hpp	/^    GCWorkerTotal,$/;"	e	enum:G1GCPhaseTimes::GCParPhases
GC_G1_FLAGS	g1_globals.hpp	34;"	d
GetName	g1BarrierSet.hpp	/^struct BarrierSet::GetName<G1BarrierSet> {$/;"	s	class:BarrierSet
GetType	g1BarrierSet.hpp	/^struct BarrierSet::GetType<BarrierSet::G1BarrierSet> {$/;"	s	class:BarrierSet
GrainBytes	heapRegion.cpp	/^size_t HeapRegion::GrainBytes        = 0;$/;"	m	class:HeapRegion	file:
GrainBytes	heapRegion.hpp	/^  static size_t GrainBytes;$/;"	m	class:HeapRegion
GrainWords	heapRegion.cpp	/^size_t HeapRegion::GrainWords        = 0;$/;"	m	class:HeapRegion	file:
GrainWords	heapRegion.hpp	/^  static size_t GrainWords;$/;"	m	class:HeapRegion
HMALLOC_MSG_IMPL	g1SendMsg.cpp	1;"	d	file:
HMALLOC_MSG_SENDER	g1SendMsg.hpp	2;"	d
HRRSStatsIter	g1RemSetSummary.cpp	/^  HRRSStatsIter() : _young("Young"), _humongous("Humongous"),$/;"	f	class:HRRSStatsIter
HRRSStatsIter	g1RemSetSummary.cpp	/^class HRRSStatsIter: public HeapRegionClosure {$/;"	c	file:
HR_FORMAT	heapRegion.hpp	47;"	d
HR_FORMAT_PARAMS	heapRegion.hpp	48;"	d
HeadTail	g1DirtyCardQueue.hpp	/^    HeadTail() : _head(NULL), _tail(NULL) {}$/;"	f	struct:G1DirtyCardQueueSet::HeadTail
HeadTail	g1DirtyCardQueue.hpp	/^    HeadTail(BufferNode* head, BufferNode* tail) : _head(head), _tail(tail) {}$/;"	f	struct:G1DirtyCardQueueSet::HeadTail
HeadTail	g1DirtyCardQueue.hpp	/^  struct HeadTail {$/;"	s	class:G1DirtyCardQueueSet
HeapRegion	heapRegion.cpp	/^HeapRegion::HeapRegion(uint hrm_index,$/;"	f	class:HeapRegion
HeapRegion	heapRegion.hpp	/^class HeapRegion : public CHeapObj<mtGC> {$/;"	c
HeapRegionBounds	heapRegionBounds.hpp	/^class HeapRegionBounds : public AllStatic {$/;"	c
HeapRegionClaimer	heapRegionManager.cpp	/^HeapRegionClaimer::HeapRegionClaimer(uint n_workers) :$/;"	f	class:HeapRegionClaimer
HeapRegionClaimer	heapRegionManager.hpp	/^class HeapRegionClaimer : public StackObj {$/;"	c
HeapRegionClosure	heapRegion.hpp	/^  HeapRegionClosure(): _is_complete(true) {}$/;"	f	class:HeapRegionClosure
HeapRegionClosure	heapRegion.hpp	/^class HeapRegionClosure : public StackObj {$/;"	c
HeapRegionGatheringOopClosure	g1CodeBlobClosure.hpp	/^    HeapRegionGatheringOopClosure(OopClosure* oc) : _g1h(G1CollectedHeap::heap()), _work(oc), _nm(NULL) {}$/;"	f	class:G1CodeBlobClosure::HeapRegionGatheringOopClosure
HeapRegionGatheringOopClosure	g1CodeBlobClosure.hpp	/^  class HeapRegionGatheringOopClosure : public OopClosure {$/;"	c	class:G1CodeBlobClosure
HeapRegionManager	heapRegionManager.cpp	/^HeapRegionManager::HeapRegionManager() :$/;"	f	class:HeapRegionManager
HeapRegionManager	heapRegionManager.hpp	/^class HeapRegionManager: public CHeapObj<mtGC> {$/;"	c
HeapRegionRange	heapRegionManager.cpp	/^HeapRegionRange::HeapRegionRange(uint start, uint end) : _start(start), _end(end) {$/;"	f	class:HeapRegionRange
HeapRegionRange	heapRegionManager.hpp	/^class HeapRegionRange : public StackObj {$/;"	c
HeapRegionRemSet	heapRegionRemSet.cpp	/^HeapRegionRemSet::HeapRegionRemSet(G1BlockOffsetTable* bot,$/;"	f	class:HeapRegionRemSet
HeapRegionRemSet	heapRegionRemSet.hpp	/^class HeapRegionRemSet : public CHeapObj<mtGC> {$/;"	c
HeapRegionSet	heapRegionSet.hpp	/^  HeapRegionSet(const char* name, HeapRegionSetChecker* checker):$/;"	f	class:HeapRegionSet
HeapRegionSet	heapRegionSet.hpp	/^class HeapRegionSet : public HeapRegionSetBase {$/;"	c
HeapRegionSetBase	heapRegionSet.cpp	/^HeapRegionSetBase::HeapRegionSetBase(const char* name, HeapRegionSetChecker* checker)$/;"	f	class:HeapRegionSetBase
HeapRegionSetBase	heapRegionSet.hpp	/^class HeapRegionSetBase {$/;"	c
HeapRegionSetChecker	heapRegionSet.hpp	/^class HeapRegionSetChecker : public CHeapObj<mtGC> {$/;"	c
HeapRegionTracer	heapRegionTracer.hpp	/^class HeapRegionTracer : AllStatic {$/;"	c
HeapRegionType	heapRegionType.hpp	/^  HeapRegionType() : _tag(FreeTag) { hrt_assert_is_valid(_tag); }$/;"	f	class:HeapRegionType
HeapRegionType	heapRegionType.hpp	/^  HeapRegionType(Tag t) : _tag(t) { hrt_assert_is_valid(_tag); }$/;"	f	class:HeapRegionType
HeapRegionType	heapRegionType.hpp	/^class HeapRegionType {$/;"	c
HeterogeneousHeapRegionManager	heterogeneousHeapRegionManager.hpp	/^  HeterogeneousHeapRegionManager(uint num_regions) : _max_regions(num_regions), _max_dram_regions(0),$/;"	f	class:HeterogeneousHeapRegionManager
HeterogeneousHeapRegionManager	heterogeneousHeapRegionManager.hpp	/^class HeterogeneousHeapRegionManager : public HeapRegionManager {$/;"	c
Humongous	g1HeapRegionAttr.hpp	/^  static const region_type_t Humongous    =  -2;    \/\/ The region is a humongous candidate not in the current collection set.$/;"	m	struct:G1HeapRegionAttr
Humongous	heapRegionType.cpp	/^const HeapRegionType HeapRegionType::Humongous = HeapRegionType(StartsHumongousTag);$/;"	m	class:HeapRegionType	file:
Humongous	heapRegionType.hpp	/^  static const HeapRegionType Humongous;$/;"	m	class:HeapRegionType
HumongousMask	heapRegionType.hpp	/^    HumongousMask         = 4,$/;"	e	enum:HeapRegionType::__anon1
HumongousReclaimCandidates	g1CollectedHeap.hpp	/^  class HumongousReclaimCandidates : public G1BiasedMappedArray<bool> {$/;"	c	class:G1CollectedHeap
HumongousRegionSetChecker	g1CollectedHeap.cpp	/^class HumongousRegionSetChecker : public HeapRegionSetChecker {$/;"	c	file:
Idle	g1ConcurrentMarkThread.hpp	/^    Idle,$/;"	e	enum:G1ConcurrentMarkThread::State
InProgress	g1ConcurrentMarkThread.hpp	/^    InProgress$/;"	e	enum:G1ConcurrentMarkThread::State
Inactive	g1CollectionSet.hpp	/^    Inactive            \/\/ We are not actively building the collection set$/;"	e	enum:G1CollectionSet::CSetBuildType
IncCollectionSetRegionStat	g1CollectionSet.hpp	/^  struct IncCollectionSetRegionStat {$/;"	s	class:G1CollectionSet
InitialCapacity	sparsePRT.hpp	/^  static const size_t InitialCapacity = 8;$/;"	m	class:SparsePRT
InvalidAgeIndex	g1SurvRateGroup.hpp	/^  static const int InvalidAgeIndex = -1;$/;"	m	class:G1SurvRateGroup
InvalidCSetIndex	heapRegion.hpp	/^  static const uint InvalidCSetIndex = UINT_MAX;$/;"	m	class:HeapRegion
InvalidCard	g1FromCardCache.hpp	/^  static const uintptr_t InvalidCard = 0;$/;"	m	class:G1FromCardCache
IterateObjectClosureRegionClosure	g1CollectedHeap.cpp	/^  IterateObjectClosureRegionClosure(ObjectClosure* cl) : _cl(cl) {}$/;"	f	class:IterateObjectClosureRegionClosure
IterateObjectClosureRegionClosure	g1CollectedHeap.cpp	/^class IterateObjectClosureRegionClosure: public HeapRegionClosure {$/;"	c	file:
JFREventForRegion	g1CollectedHeap.cpp	/^      JFREventForRegion(HeapRegion* region, uint worker_id) : _event() {$/;"	f	class:G1FreeCollectionSetTask::FreeCSetClosure::JFREventForRegion
JFREventForRegion	g1CollectedHeap.cpp	/^    class JFREventForRegion {$/;"	c	class:G1FreeCollectionSetTask::FreeCSetClosure	file:
JVMCICleaningTask	g1ParallelCleaning.cpp	/^JVMCICleaningTask::JVMCICleaningTask() :$/;"	f	class:JVMCICleaningTask
JVMCICleaningTask	g1ParallelCleaning.hpp	/^class JVMCICleaningTask : public StackObj {$/;"	c
LOG_COLLECT_CONCURRENTLY	g1CollectedHeap.cpp	2116;"	d	file:
LOG_COLLECT_CONCURRENTLY_COMPLETE	g1CollectedHeap.cpp	2129;"	d	file:
LOG_ZONES	g1ConcurrentRefine.cpp	183;"	d	file:
LargeSize	g1CodeCacheRemSet.hpp	/^  const static size_t LargeSize = 512;$/;"	m	class:G1CodeRootSet
LastYoungGC	g1Policy.hpp	/^    LastYoungGC,$/;"	e	enum:G1Policy::PauseKind
LiveObjIterator	g1RemSet.cpp	/^      LiveObjIterator(const G1CMBitMap* const bitmap, const HeapWord* tams, const MemRegion mr, HeapWord* first_oop_into_mr) :$/;"	f	class:G1RebuildRemSetTask::G1RebuildRemSetHeapRegionClosure::LiveObjIterator
LiveObjIterator	g1RemSet.cpp	/^    class LiveObjIterator : public StackObj {$/;"	c	class:G1RebuildRemSetTask::G1RebuildRemSetHeapRegionClosure	file:
LocalObjProcessAtCopyToSurv	g1NUMAStats.hpp	/^    LocalObjProcessAtCopyToSurv,$/;"	e	enum:G1NUMAStats::NodeDataItems
LocalQSet	g1RedirtyCardsQueue.cpp	/^G1RedirtyCardsQueueBase::LocalQSet::LocalQSet(G1RedirtyCardsQueueSet* shared_qset) :$/;"	f	class:G1RedirtyCardsQueueBase::LocalQSet
LocalQSet	g1RedirtyCardsQueue.hpp	/^  class LocalQSet : public PtrQueueSet {$/;"	c	class:G1RedirtyCardsQueueBase
LocalQSet	g1RedirtyCardsQueue.hpp	/^  typedef G1RedirtyCardsQueueBase::LocalQSet LocalQSet;$/;"	t	class:G1RedirtyCardsQueueSet
LogCardsPerRegion	heapRegion.cpp	/^int    HeapRegion::LogCardsPerRegion = 0;$/;"	m	class:HeapRegion	file:
LogCardsPerRegion	heapRegion.hpp	/^  static int    LogCardsPerRegion;$/;"	m	class:HeapRegion
LogOfHRGrainBytes	heapRegion.cpp	/^int    HeapRegion::LogOfHRGrainBytes = 0;$/;"	m	class:HeapRegion	file:
LogOfHRGrainBytes	heapRegion.hpp	/^  static int    LogOfHRGrainBytes;$/;"	m	class:HeapRegion
LogOfHRGrainWords	heapRegion.cpp	/^int    HeapRegion::LogOfHRGrainWords = 0;$/;"	m	class:HeapRegion	file:
LogOfHRGrainWords	heapRegion.hpp	/^  static int    LogOfHRGrainWords;$/;"	m	class:HeapRegion
MAX_REGION_SIZE	heapRegionBounds.hpp	/^  static const size_t MAX_REGION_SIZE = 32 * 1024 * 1024;$/;"	m	class:HeapRegionBounds
MIN_REGION_SIZE	heapRegionBounds.hpp	/^  static const size_t MIN_REGION_SIZE = 1024 * 1024;$/;"	m	class:HeapRegionBounds
MIN_TIMER_GRANULARITY	g1Policy.cpp	637;"	d	file:
MarkingOopClosure	g1CodeBlobClosure.cpp	/^G1CodeBlobClosure::MarkingOopClosure::MarkingOopClosure(uint worker_id) :$/;"	f	class:G1CodeBlobClosure::MarkingOopClosure
MarkingOopClosure	g1CodeBlobClosure.hpp	/^  class MarkingOopClosure : public OopClosure {$/;"	c	class:G1CodeBlobClosure
MasterFreeRegionListChecker	heapRegionManager.cpp	/^class MasterFreeRegionListChecker : public HeapRegionSetChecker {$/;"	c	file:
MaxCardsUnlimited	g1DirtyCardQueue.hpp	/^  static const size_t MaxCardsUnlimited = SIZE_MAX;$/;"	m	class:G1DirtyCardQueueSet
MaxGCPauseMillisConstraintFuncG1	jvmFlagConstraintsG1.cpp	/^JVMFlag::Error MaxGCPauseMillisConstraintFuncG1(uintx value, bool verbose) {$/;"	f
MaxMemoryForYoung	g1Arguments.cpp	/^size_t G1Arguments::MaxMemoryForYoung;$/;"	m	class:G1Arguments	file:
MaxMemoryForYoung	g1Arguments.hpp	/^  static size_t MaxMemoryForYoung;$/;"	m	class:G1Arguments
MaxRamFractionForYoung	g1Arguments.cpp	/^static const double MaxRamFractionForYoung = 0.8;$/;"	v	file:
MaxSizeForHeapAlignmentG1	jvmFlagConstraintsG1.cpp	/^size_t MaxSizeForHeapAlignmentG1() {$/;"	f
MergeER	g1GCPhaseTimes.hpp	/^    MergeER = StrongOopStorageSetRoots + OopStorageSet::strong_count,$/;"	e	enum:G1GCPhaseTimes::GCParPhases
MergeHCC	g1GCPhaseTimes.hpp	/^    MergeHCC,$/;"	e	enum:G1GCPhaseTimes::GCParPhases
MergeHCCDirtyCards	g1GCPhaseTimes.hpp	/^    MergeHCCDirtyCards,$/;"	e	enum:G1GCPhaseTimes::GCMergeHCCWorkItems
MergeHCCSkippedCards	g1GCPhaseTimes.hpp	/^    MergeHCCSkippedCards$/;"	e	enum:G1GCPhaseTimes::GCMergeHCCWorkItems
MergeLB	g1GCPhaseTimes.hpp	/^    MergeLB,$/;"	e	enum:G1GCPhaseTimes::GCParPhases
MergeLBDirtyCards	g1GCPhaseTimes.hpp	/^    MergeLBDirtyCards,$/;"	e	enum:G1GCPhaseTimes::GCMergeLBWorkItems
MergeLBSkippedCards	g1GCPhaseTimes.hpp	/^    MergeLBSkippedCards$/;"	e	enum:G1GCPhaseTimes::GCMergeLBWorkItems
MergePSS	g1GCPhaseTimes.hpp	/^    MergePSS,$/;"	e	enum:G1GCPhaseTimes::GCParPhases
MergePSSCopiedBytes	g1GCPhaseTimes.hpp	/^    MergePSSCopiedBytes,$/;"	e	enum:G1GCPhaseTimes::GCMergePSSWorkItems
MergePSSLABUndoWasteBytes	g1GCPhaseTimes.hpp	/^    MergePSSLABUndoWasteBytes$/;"	e	enum:G1GCPhaseTimes::GCMergePSSWorkItems
MergePSSLABWasteBytes	g1GCPhaseTimes.hpp	/^    MergePSSLABWasteBytes,$/;"	e	enum:G1GCPhaseTimes::GCMergePSSWorkItems
MergeRS	g1GCPhaseTimes.hpp	/^    MergeRS,$/;"	e	enum:G1GCPhaseTimes::GCParPhases
MergeRSDirtyCards	g1GCPhaseTimes.hpp	/^    MergeRSDirtyCards$/;"	e	enum:G1GCPhaseTimes::GCMergeRSWorkTimes
MergeRSMergedCoarse	g1GCPhaseTimes.hpp	/^    MergeRSMergedCoarse,$/;"	e	enum:G1GCPhaseTimes::GCMergeRSWorkTimes
MergeRSMergedFine	g1GCPhaseTimes.hpp	/^    MergeRSMergedFine,$/;"	e	enum:G1GCPhaseTimes::GCMergeRSWorkTimes
MergeRSMergedSparse	g1GCPhaseTimes.hpp	/^    MergeRSMergedSparse,$/;"	e	enum:G1GCPhaseTimes::GCMergeRSWorkTimes
MinOverThresholdForGrowth	g1HeapSizingPolicy.hpp	/^  const static uint MinOverThresholdForGrowth = 4;$/;"	m	class:G1HeapSizingPolicy
Mixed	g1YCTypes.hpp	/^  Mixed,$/;"	e	enum:G1YCType
MixedGC	g1Policy.hpp	/^    MixedGC,$/;"	e	enum:G1Policy::PauseKind
ModRef	g1BarrierSet.hpp	/^    typedef ModRefBarrierSet::AccessBarrier<decorators, BarrierSetT> ModRef;$/;"	t	class:G1BarrierSet::AccessBarrier
MutatorAllocRegion	g1AllocRegion.hpp	/^  MutatorAllocRegion(uint node_index)$/;"	f	class:MutatorAllocRegion
MutatorAllocRegion	g1AllocRegion.hpp	/^class MutatorAllocRegion : public G1AllocRegion {$/;"	c
NOT_DEBUG_RETURN	g1BlockOffsetTable.hpp	/^  void check_index(size_t index, const char* msg) const NOT_DEBUG_RETURN;$/;"	m	class:G1BlockOffsetTable
NOT_DEBUG_RETURN	g1BlockOffsetTable.hpp	/^  void set_object_can_span(bool can_span) NOT_DEBUG_RETURN;$/;"	m	class:G1BlockOffsetTablePart
NOT_DEBUG_RETURN	g1CollectionSet.hpp	/^  void verify_young_cset_indices() const NOT_DEBUG_RETURN;$/;"	m	class:G1CollectionSet
NOT_DEBUG_RETURN	g1ConcurrentMarkBitMap.hpp	/^  virtual void check_mark(HeapWord* addr) NOT_DEBUG_RETURN;$/;"	m	class:G1CMBitMap
NOT_DEBUG_RETURN	g1DirtyCardQueue.hpp	/^  void verify_num_cards() const NOT_DEBUG_RETURN;$/;"	m	class:G1DirtyCardQueueSet
NOT_DEBUG_RETURN	g1ParScanThreadState.hpp	/^  void verify_task(PartialArrayScanTask task) const NOT_DEBUG_RETURN;$/;"	m	class:G1ParScanThreadState
NOT_DEBUG_RETURN	g1ParScanThreadState.hpp	/^  void verify_task(ScannerTask task) const NOT_DEBUG_RETURN;$/;"	m	class:G1ParScanThreadState
NOT_DEBUG_RETURN	g1ParScanThreadState.hpp	/^  void verify_task(narrowOop* task) const NOT_DEBUG_RETURN;$/;"	m	class:G1ParScanThreadState
NOT_DEBUG_RETURN	g1ParScanThreadState.hpp	/^  void verify_task(oop* task) const NOT_DEBUG_RETURN;$/;"	m	class:G1ParScanThreadState
NOT_DEBUG_RETURN	g1RedirtyCardsQueue.hpp	/^  void verify_empty() const NOT_DEBUG_RETURN;$/;"	m	class:G1RedirtyCardsQueueSet
NOT_DEBUG_RETURN	heapRegionManager.hpp	/^  void assert_contiguous_range(uint start, uint num_regions) NOT_DEBUG_RETURN;$/;"	m	class:HeapRegionManager
NewRegionAlloc	g1NUMAStats.hpp	/^    NewRegionAlloc,$/;"	e	enum:G1NUMAStats::NodeDataItems
NewSizeConstraintFuncG1	jvmFlagConstraintsG1.cpp	/^JVMFlag::Error NewSizeConstraintFuncG1(size_t value, bool verbose) {$/;"	f
NoArchive	g1Allocator.hpp	/^  static const uint8_t NoArchive = 0;$/;"	m	class:G1ArchiveRegionMap
NoYoungRegionsClosure	g1CollectedHeap.cpp	/^  NoYoungRegionsClosure() : _success(true) { }$/;"	f	class:NoYoungRegionsClosure
NoYoungRegionsClosure	g1CollectedHeap.cpp	/^class NoYoungRegionsClosure: public HeapRegionClosure {$/;"	c	file:
NodeDataArray	g1NUMAStats.cpp	/^G1NUMAStats::NodeDataArray::NodeDataArray(uint num_nodes) {$/;"	f	class:G1NUMAStats::NodeDataArray
NodeDataArray	g1NUMAStats.hpp	/^  class NodeDataArray : public CHeapObj<mtGC> {$/;"	c	class:G1NUMAStats
NodeDataItems	g1NUMAStats.hpp	/^  enum NodeDataItems {$/;"	g	class:G1NUMAStats
NodeDataItemsSentinel	g1NUMAStats.hpp	/^    NodeDataItemsSentinel$/;"	e	enum:G1NUMAStats::NodeDataItems
NodeInfo	heapRegionSet.cpp	/^FreeRegionList::NodeInfo::NodeInfo() : _numa(G1NUMA::numa()), _length_of_node(NULL),$/;"	f	class:FreeRegionList::NodeInfo
NodeInfo	heapRegionSet.hpp	/^  class NodeInfo : public CHeapObj<mtGC> {$/;"	c	class:FreeRegionList
NonYoungFreeCSet	g1GCPhaseTimes.hpp	/^    NonYoungFreeCSet,$/;"	e	enum:G1GCPhaseTimes::GCParPhases
Normal	g1YCTypes.hpp	/^  Normal,$/;"	e	enum:G1YCType
NotInCSet	g1HeapRegionAttr.hpp	/^  static const region_type_t NotInCSet    =  -1;    \/\/ The region is not in the collection set.$/;"	m	struct:G1HeapRegionAttr
NoteStartOfMarkHRClosure	g1ConcurrentMark.cpp	/^class NoteStartOfMarkHRClosure : public HeapRegionClosure {$/;"	c	file:
NullEntry	sparsePRT.hpp	/^  static const int NullEntry = -1;$/;"	m	class:RSHashTable
Num	g1HeapRegionAttr.hpp	/^  static const region_type_t Num          =   2;$/;"	m	struct:G1HeapRegionAttr
NumPrevPausesForHeuristics	g1Analytics.hpp	/^  const static int NumPrevPausesForHeuristics = 10;$/;"	m	class:G1Analytics
ObjArrayTaskQueue	g1FullGCMarker.hpp	/^typedef OverflowTaskQueue<ObjArrayTask, mtGC>        ObjArrayTaskQueue;$/;"	t
ObjArrayTaskQueueSet	g1FullGCMarker.hpp	/^typedef GenericTaskQueueSet<ObjArrayTaskQueue, mtGC> ObjArrayTaskQueueSet;$/;"	t
ObjCopy	g1GCPhaseTimes.hpp	/^    ObjCopy,$/;"	e	enum:G1GCPhaseTimes::GCParPhases
ObjectSynchronizerRoots	g1GCPhaseTimes.hpp	/^    ObjectSynchronizerRoots,$/;"	e	enum:G1GCPhaseTimes::GCParPhases
Old	g1HeapRegionAttr.hpp	/^  static const region_type_t Old          =   1;    \/\/ The region is in the collection set and an old region.$/;"	m	struct:G1HeapRegionAttr
Old	g1HeapRegionTraceType.hpp	/^    Old,$/;"	e	enum:G1HeapRegionTraceType::Type
Old	heapRegionType.cpp	/^const HeapRegionType HeapRegionType::Old       = HeapRegionType(OldTag);$/;"	m	class:HeapRegionType	file:
Old	heapRegionType.hpp	/^  static const HeapRegionType Old;$/;"	m	class:HeapRegionType
OldGCAllocRegion	g1AllocRegion.hpp	/^  OldGCAllocRegion(G1EvacStats* stats)$/;"	f	class:OldGCAllocRegion
OldGCAllocRegion	g1AllocRegion.hpp	/^class OldGCAllocRegion : public G1GCAllocRegion {$/;"	c
OldMask	heapRegionType.hpp	/^    OldMask               = 16,$/;"	e	enum:HeapRegionType::__anon1
OldRegionSetChecker	g1CollectedHeap.cpp	/^class OldRegionSetChecker : public HeapRegionSetChecker {$/;"	c	file:
OldTag	heapRegionType.hpp	/^    OldTag                = OldMask,$/;"	e	enum:HeapRegionType::__anon1
OopQueue	g1FullGCMarker.hpp	/^typedef OverflowTaskQueue<oop, mtGC>                 OopQueue;$/;"	t
OopQueueSet	g1FullGCMarker.hpp	/^typedef GenericTaskQueueSet<OopQueue, mtGC>          OopQueueSet;$/;"	t
OpenArchive	g1Allocator.hpp	/^  static const uint8_t OpenArchive = 1;$/;"	m	class:G1ArchiveRegionMap
OpenArchive	g1HeapRegionTraceType.hpp	/^    OpenArchive,$/;"	e	enum:G1HeapRegionTraceType::Type
OpenArchiveTag	heapRegionType.hpp	/^    OpenArchiveTag        = ArchiveMask | PinnedMask,$/;"	e	enum:HeapRegionType::__anon1
OptCodeRoots	g1GCPhaseTimes.hpp	/^    OptCodeRoots,$/;"	e	enum:G1GCPhaseTimes::GCParPhases
OptMergeRS	g1GCPhaseTimes.hpp	/^    OptMergeRS,$/;"	e	enum:G1GCPhaseTimes::GCParPhases
OptObjCopy	g1GCPhaseTimes.hpp	/^    OptObjCopy,$/;"	e	enum:G1GCPhaseTimes::GCParPhases
OptScanHR	g1GCPhaseTimes.hpp	/^    OptScanHR,$/;"	e	enum:G1GCPhaseTimes::GCParPhases
OptTermination	g1GCPhaseTimes.hpp	/^    OptTermination,$/;"	e	enum:G1GCPhaseTimes::GCParPhases
Optional	g1HeapRegionAttr.hpp	/^  static const region_type_t Optional     =  -3;    \/\/ The region is optional not in the current collection set.$/;"	m	struct:G1HeapRegionAttr
Other	g1GCPhaseTimes.hpp	/^    Other,$/;"	e	enum:G1GCPhaseTimes::GCParPhases
OtherRegionsTable	heapRegionRemSet.cpp	/^OtherRegionsTable::OtherRegionsTable(Mutex* m) :$/;"	f	class:OtherRegionsTable
OtherRegionsTable	heapRegionRemSet.hpp	/^class OtherRegionsTable {$/;"	c
PRODUCT_RETURN	g1AllocRegion.hpp	/^             HeapWord* result = NULL) PRODUCT_RETURN;$/;"	m	class:G1AllocRegion
PRODUCT_RETURN	g1BiasedArray.hpp	/^  void verify_biased_index(idx_t biased_index) const PRODUCT_RETURN;$/;"	m	class:G1BiasedMappedArrayBase
PRODUCT_RETURN	g1BiasedArray.hpp	/^  void verify_biased_index_inclusive_end(idx_t biased_index) const PRODUCT_RETURN;$/;"	m	class:G1BiasedMappedArrayBase
PRODUCT_RETURN	g1BiasedArray.hpp	/^  void verify_index(idx_t index) const PRODUCT_RETURN;$/;"	m	class:G1BiasedMappedArrayBase
PRODUCT_RETURN	g1BlockOffsetTable.hpp	/^  void print_on(outputStream* out) PRODUCT_RETURN;$/;"	m	class:G1BlockOffsetTablePart
PRODUCT_RETURN	g1CardTable.hpp	/^  void verify_g1_young_region(MemRegion mr) PRODUCT_RETURN;$/;"	m	class:G1CardTable
PRODUCT_RETURN	g1CollectedHeap.hpp	/^  void allocate_dummy_regions() PRODUCT_RETURN;$/;"	m	class:G1CollectedHeap
PRODUCT_RETURN	g1CollectedHeap.hpp	/^  void print_all_rsets() PRODUCT_RETURN;$/;"	m	class:G1CollectedHeap
PRODUCT_RETURN	g1CollectedHeap.hpp	/^  void print_cset_rsets() PRODUCT_RETURN;$/;"	m	class:G1CollectedHeap
PRODUCT_RETURN	g1CollectedHeap.hpp	/^  void verify_region_attr_remset_update() PRODUCT_RETURN;$/;"	m	class:G1CollectedHeap
PRODUCT_RETURN	g1CollectionSetCandidates.hpp	/^  void verify() const PRODUCT_RETURN;$/;"	m	class:G1CollectionSetCandidates
PRODUCT_RETURN	g1ConcurrentMark.hpp	/^  template<typename Fn> void iterate(Fn fn) const PRODUCT_RETURN;$/;"	m	class:G1CMMarkStack
PRODUCT_RETURN	g1ConcurrentMark.hpp	/^  void verify_no_collection_set_oops() PRODUCT_RETURN;$/;"	m	class:G1ConcurrentMark
PRODUCT_RETURN	g1FromCardCache.hpp	/^  static void print(outputStream* out = tty) PRODUCT_RETURN;$/;"	m	class:G1FromCardCache
PRODUCT_RETURN	g1HeapVerifier.hpp	/^  void check_bitmaps(const char* caller) PRODUCT_RETURN;$/;"	m	class:G1HeapVerifier
PRODUCT_RETURN	g1HeapVerifier.hpp	/^  void check_bitmaps(const char* caller, HeapRegion* hr) PRODUCT_RETURN;$/;"	m	class:G1HeapVerifier
PRODUCT_RETURN	g1HeapVerifier.hpp	/^  void verify_card_table_cleanup() PRODUCT_RETURN;$/;"	m	class:G1HeapVerifier
PRODUCT_RETURN	g1HeapVerifier.hpp	/^  void verify_dirty_region(HeapRegion* hr) PRODUCT_RETURN;$/;"	m	class:G1HeapVerifier
PRODUCT_RETURN	g1HeapVerifier.hpp	/^  void verify_dirty_young_regions() PRODUCT_RETURN;$/;"	m	class:G1HeapVerifier
PRODUCT_RETURN	g1HeapVerifier.hpp	/^  void verify_not_dirty_region(HeapRegion* hr) PRODUCT_RETURN;$/;"	m	class:G1HeapVerifier
PRODUCT_RETURN	g1PageBasedVirtualSpace.hpp	/^  void check_for_contiguity() PRODUCT_RETURN;$/;"	m	class:G1PageBasedVirtualSpace
PRODUCT_RETURN	g1PageBasedVirtualSpace.hpp	/^  void print_on(outputStream* out) PRODUCT_RETURN;$/;"	m	class:G1PageBasedVirtualSpace
PRODUCT_RETURN	heapRegion.hpp	/^  void mangle_unused_area() PRODUCT_RETURN;$/;"	m	class:HeapRegion
PRODUCT_RETURN	heapRegionManager.hpp	/^  void verify_optional() PRODUCT_RETURN;$/;"	m	class:HeapRegionManager
PRODUCT_RETURN	heapRegionSet.hpp	/^  void verify_region(HeapRegion* hr) PRODUCT_RETURN;$/;"	m	class:HeapRegionSetBase
ParFreeCSet	g1GCPhaseTimes.hpp	/^    ParFreeCSet,$/;"	e	enum:G1GCPhaseTimes::GCParPhases
PauseKind	g1Policy.hpp	/^  enum PauseKind {$/;"	g	class:G1Policy
PausedBuffers	g1DirtyCardQueue.cpp	/^G1DirtyCardQueueSet::PausedBuffers::PausedBuffers() : _plist(NULL) {}$/;"	f	class:G1DirtyCardQueueSet::PausedBuffers
PausedBuffers	g1DirtyCardQueue.hpp	/^  class PausedBuffers {$/;"	c	class:G1DirtyCardQueueSet
PausedList	g1DirtyCardQueue.cpp	/^G1DirtyCardQueueSet::PausedBuffers::PausedList::PausedList() :$/;"	f	class:G1DirtyCardQueueSet::PausedBuffers::PausedList
PausedList	g1DirtyCardQueue.hpp	/^    class PausedList : public CHeapObj<mtGC> {$/;"	c	class:G1DirtyCardQueueSet::PausedBuffers
PerRegionTable	heapRegionRemSet.hpp	/^  PerRegionTable(HeapRegion* hr) :$/;"	f	class:PerRegionTable
PerRegionTable	heapRegionRemSet.hpp	/^class PerRegionTable: public CHeapObj<mtGC> {$/;"	c
PinnedMask	heapRegionType.hpp	/^    PinnedMask            = 8,$/;"	e	enum:HeapRegionType::__anon1
PointsIntoHRDetectionClosure	g1CodeCacheRemSet.cpp	/^    PointsIntoHRDetectionClosure(HeapRegion* hr) : _hr(hr), _points_into(false) {}$/;"	f	class:CleanCallback::PointsIntoHRDetectionClosure
PointsIntoHRDetectionClosure	g1CodeCacheRemSet.cpp	/^  class PointsIntoHRDetectionClosure : public OopClosure {$/;"	c	class:CleanCallback	file:
PostCompactionPrinterClosure	g1CollectedHeap.cpp	/^  PostCompactionPrinterClosure(G1HRPrinter* hr_printer)$/;"	f	class:PostCompactionPrinterClosure
PostCompactionPrinterClosure	g1CollectedHeap.cpp	/^class PostCompactionPrinterClosure: public HeapRegionClosure {$/;"	c	file:
PrintRSetsClosure	g1CollectedHeap.cpp	/^  PrintRSetsClosure(const char* msg) : _msg(msg), _occupied_sum(0) {$/;"	f	class:PrintRSetsClosure
PrintRSetsClosure	g1CollectedHeap.cpp	/^class PrintRSetsClosure : public HeapRegionClosure {$/;"	c	file:
PrintRegionClosure	g1CollectedHeap.cpp	/^  PrintRegionClosure(outputStream* st) : _st(st) {}$/;"	f	class:PrintRegionClosure
PrintRegionClosure	g1CollectedHeap.cpp	/^class PrintRegionClosure: public HeapRegionClosure {$/;"	c	file:
PrivateConstants	g1ConcurrentMark.hpp	/^  enum PrivateConstants {$/;"	g	class:G1CMTask
PrivateConstants	g1MMUTracker.hpp	/^  enum PrivateConstants {$/;"	g	class:G1MMUTrackerQueue
ProcessCardsThresholdNever	g1DirtyCardQueue.hpp	/^  static const size_t ProcessCardsThresholdNever = SIZE_MAX;$/;"	m	class:G1DirtyCardQueueSet
ProcessTask	g1CollectedHeap.cpp	/^  typedef AbstractRefProcTaskExecutor::ProcessTask ProcessTask;$/;"	t	class:G1STWRefProcTaskProxy	file:
ProcessTask	g1ConcurrentMark.cpp	/^  typedef AbstractRefProcTaskExecutor::ProcessTask ProcessTask;$/;"	t	class:G1CMRefProcTaskProxy	file:
ProcessTask	g1FullGCReferenceProcessorExecutor.hpp	/^    typedef AbstractRefProcTaskExecutor::ProcessTask ProcessTask;$/;"	t	class:G1FullGCReferenceProcessingExecutor::G1RefProcTaskProxy
Queue	g1DirtyCardQueue.hpp	/^    Queue() : _head(NULL), _tail(NULL) {}$/;"	f	class:G1DirtyCardQueueSet::Queue
Queue	g1DirtyCardQueue.hpp	/^  class Queue {$/;"	c	class:G1DirtyCardQueueSet
QueueLength	g1MMUTracker.hpp	/^    QueueLength = 64$/;"	e	enum:G1MMUTrackerQueue::PrivateConstants
RATE_TOTAL_FORMAT	g1NUMAStats.cpp	165;"	d	file:
RSHashTable	sparsePRT.cpp	/^RSHashTable::RSHashTable() :$/;"	f	class:RSHashTable
RSHashTable	sparsePRT.cpp	/^RSHashTable::RSHashTable(size_t capacity) :$/;"	f	class:RSHashTable
RSHashTable	sparsePRT.hpp	/^class RSHashTable : public CHeapObj<mtGC> {$/;"	c
RSHashTableBucketIter	sparsePRT.hpp	/^  RSHashTableBucketIter(RSHashTable* rsht) :$/;"	f	class:RSHashTableBucketIter
RSHashTableBucketIter	sparsePRT.hpp	/^class RSHashTableBucketIter {$/;"	c
Raw	g1BarrierSet.hpp	/^    typedef BarrierSet::AccessBarrier<decorators, BarrierSetT> Raw;$/;"	t	class:G1BarrierSet::AccessBarrier
RebuildFreeList	g1GCPhaseTimes.hpp	/^    RebuildFreeList,$/;"	e	enum:G1GCPhaseTimes::GCParPhases
RebuildRegionSetsClosure	g1CollectedHeap.cpp	/^  RebuildRegionSetsClosure(bool free_list_only,$/;"	f	class:RebuildRegionSetsClosure
RebuildRegionSetsClosure	g1CollectedHeap.cpp	/^class RebuildRegionSetsClosure : public HeapRegionClosure {$/;"	c	file:
RebuildStrongCodeRootClosure	g1CollectedHeap.cpp	/^  RebuildStrongCodeRootClosure(G1CollectedHeap* g1h) :$/;"	f	class:RebuildStrongCodeRootClosure
RebuildStrongCodeRootClosure	g1CollectedHeap.cpp	/^class RebuildStrongCodeRootClosure: public CodeBlobClosure {$/;"	c	file:
RedirtyCards	g1GCPhaseTimes.hpp	/^    RedirtyCards,$/;"	e	enum:G1GCPhaseTimes::GCParPhases
RedirtyLoggedCardTableEntryClosure	g1CollectedHeap.cpp	/^  RedirtyLoggedCardTableEntryClosure(G1CollectedHeap* g1h) : G1CardTableEntryClosure(),$/;"	f	class:RedirtyLoggedCardTableEntryClosure
RedirtyLoggedCardTableEntryClosure	g1CollectedHeap.cpp	/^class RedirtyLoggedCardTableEntryClosure : public G1CardTableEntryClosure {$/;"	c	file:
RegionIdx_t	g1CollectedHeap.hpp	/^typedef int RegionIdx_t;   \/\/ needs to hold [ 0..max_regions() )$/;"	t
RegionMarkStatsCacheSize	g1ConcurrentMark.hpp	/^  static const uint RegionMarkStatsCacheSize = 1024;$/;"	m	class:G1CMTask
RegionTypeCounter	g1RemSetSummary.cpp	/^  RegionTypeCounter(const char* name) : _name(name), _rs_mem_size(0), _cards_occupied(0),$/;"	f	class:RegionTypeCounter
RegionTypeCounter	g1RemSetSummary.cpp	/^class RegionTypeCounter {$/;"	c	file:
RegionsPerThread	g1ConcurrentMark.cpp	/^  static const uint RegionsPerThread = 384;$/;"	m	class:G1UpdateRemSetTrackingBeforeRebuildTask	file:
RegisterNMethodOopClosure	g1CollectedHeap.cpp	/^  RegisterNMethodOopClosure(G1CollectedHeap* g1h, nmethod* nm) :$/;"	f	class:RegisterNMethodOopClosure
RegisterNMethodOopClosure	g1CollectedHeap.cpp	/^class RegisterNMethodOopClosure: public OopClosure {$/;"	c	file:
RemSetState	heapRegionRemSet.hpp	/^  enum RemSetState {$/;"	g	class:HeapRegionRemSet
Remark	g1Policy.hpp	/^    Remark$/;"	e	enum:G1Policy::PauseKind
RemoveSelfForwardPtrHRClosure	g1EvacFailure.cpp	/^  RemoveSelfForwardPtrHRClosure(G1RedirtyCardsQueueSet* rdcqs, uint worker_id) :$/;"	f	class:RemoveSelfForwardPtrHRClosure
RemoveSelfForwardPtrHRClosure	g1EvacFailure.cpp	/^class RemoveSelfForwardPtrHRClosure: public HeapRegionClosure {$/;"	c	file:
RemoveSelfForwardPtrObjClosure	g1EvacFailure.cpp	/^  RemoveSelfForwardPtrObjClosure(HeapRegion* hr,$/;"	f	class:RemoveSelfForwardPtrObjClosure
RemoveSelfForwardPtrObjClosure	g1EvacFailure.cpp	/^class RemoveSelfForwardPtrObjClosure: public ObjectClosure {$/;"	c	file:
SEND_MSG_H	g1SendMsg.hpp	7;"	d
SHARE_GC_G1_C1_G1BARRIERSETC1_HPP	c1/g1BarrierSetC1.hpp	26;"	d
SHARE_GC_G1_C2_G1BARRIERSETC2_HPP	c2/g1BarrierSetC2.hpp	26;"	d
SHARE_GC_G1_G1ALLOCATOR_HPP	g1Allocator.hpp	26;"	d
SHARE_GC_G1_G1ALLOCATOR_INLINE_HPP	g1Allocator.inline.hpp	26;"	d
SHARE_GC_G1_G1ALLOCREGION_HPP	g1AllocRegion.hpp	26;"	d
SHARE_GC_G1_G1ALLOCREGION_INLINE_HPP	g1AllocRegion.inline.hpp	26;"	d
SHARE_GC_G1_G1ANALYTICS_HPP	g1Analytics.hpp	26;"	d
SHARE_GC_G1_G1ARGUMENTS_HPP	g1Arguments.hpp	27;"	d
SHARE_GC_G1_G1BARRIERSETASSEMBLER_HPP	g1BarrierSetAssembler.hpp	26;"	d
SHARE_GC_G1_G1BARRIERSETRUNTIME_HPP	g1BarrierSetRuntime.hpp	26;"	d
SHARE_GC_G1_G1BARRIERSET_HPP	g1BarrierSet.hpp	26;"	d
SHARE_GC_G1_G1BARRIERSET_INLINE_HPP	g1BarrierSet.inline.hpp	26;"	d
SHARE_GC_G1_G1BIASEDARRAY_HPP	g1BiasedArray.hpp	26;"	d
SHARE_GC_G1_G1BLOCKOFFSETTABLE_HPP	g1BlockOffsetTable.hpp	26;"	d
SHARE_GC_G1_G1BLOCKOFFSETTABLE_INLINE_HPP	g1BlockOffsetTable.inline.hpp	26;"	d
SHARE_GC_G1_G1BUFFERNODELIST_HPP	g1BufferNodeList.hpp	26;"	d
SHARE_GC_G1_G1CARDCOUNTS_HPP	g1CardCounts.hpp	26;"	d
SHARE_GC_G1_G1CARDTABLEENTRYCLOSURE_HPP	g1CardTableEntryClosure.hpp	26;"	d
SHARE_GC_G1_G1CARDTABLE_HPP	g1CardTable.hpp	26;"	d
SHARE_GC_G1_G1CARDTABLE_INLINE_HPP	g1CardTable.inline.hpp	26;"	d
SHARE_GC_G1_G1CODEBLOBCLOSURE_HPP	g1CodeBlobClosure.hpp	26;"	d
SHARE_GC_G1_G1CODECACHEREMSET_HPP	g1CodeCacheRemSet.hpp	26;"	d
SHARE_GC_G1_G1CODEROOTSETTABLE_HPP	g1CodeRootSetTable.hpp	25;"	d
SHARE_GC_G1_G1COLLECTEDHEAP_HPP	g1CollectedHeap.hpp	26;"	d
SHARE_GC_G1_G1COLLECTEDHEAP_INLINE_HPP	g1CollectedHeap.inline.hpp	26;"	d
SHARE_GC_G1_G1COLLECTIONSETCANDIDATES_HPP	g1CollectionSetCandidates.hpp	26;"	d
SHARE_GC_G1_G1COLLECTIONSETCHOOSER_HPP	g1CollectionSetChooser.hpp	26;"	d
SHARE_GC_G1_G1COLLECTIONSET_HPP	g1CollectionSet.hpp	26;"	d
SHARE_GC_G1_G1COLLECTORSTATE_HPP	g1CollectorState.hpp	26;"	d
SHARE_GC_G1_G1CONCURRENTMARKBITMAP_HPP	g1ConcurrentMarkBitMap.hpp	26;"	d
SHARE_GC_G1_G1CONCURRENTMARKBITMAP_INLINE_HPP	g1ConcurrentMarkBitMap.inline.hpp	26;"	d
SHARE_GC_G1_G1CONCURRENTMARKOBJARRAYPROCESSOR_HPP	g1ConcurrentMarkObjArrayProcessor.hpp	26;"	d
SHARE_GC_G1_G1CONCURRENTMARKOBJARRAYPROCESSOR_INLINE_HPP	g1ConcurrentMarkObjArrayProcessor.inline.hpp	26;"	d
SHARE_GC_G1_G1CONCURRENTMARKTHREAD_HPP	g1ConcurrentMarkThread.hpp	26;"	d
SHARE_GC_G1_G1CONCURRENTMARKTHREAD_INLINE_HPP	g1ConcurrentMarkThread.inline.hpp	26;"	d
SHARE_GC_G1_G1CONCURRENTMARK_HPP	g1ConcurrentMark.hpp	26;"	d
SHARE_GC_G1_G1CONCURRENTMARK_INLINE_HPP	g1ConcurrentMark.inline.hpp	26;"	d
SHARE_GC_G1_G1CONCURRENTREFINESTATS_HPP	g1ConcurrentRefineStats.hpp	26;"	d
SHARE_GC_G1_G1CONCURRENTREFINETHREAD_HPP	g1ConcurrentRefineThread.hpp	26;"	d
SHARE_GC_G1_G1CONCURRENTREFINE_HPP	g1ConcurrentRefine.hpp	26;"	d
SHARE_GC_G1_G1CONCURRENTSTARTTOMIXEDTIMETRACKER_HPP	g1ConcurrentStartToMixedTimeTracker.hpp	26;"	d
SHARE_GC_G1_G1DIRTYCARDQUEUE_HPP	g1DirtyCardQueue.hpp	26;"	d
SHARE_GC_G1_G1EDENREGIONS_HPP	g1EdenRegions.hpp	26;"	d
SHARE_GC_G1_G1EVACFAILURE_HPP	g1EvacFailure.hpp	26;"	d
SHARE_GC_G1_G1EVACSTATS_HPP	g1EvacStats.hpp	26;"	d
SHARE_GC_G1_G1EVACSTATS_INLINE_HPP	g1EvacStats.inline.hpp	26;"	d
SHARE_GC_G1_G1EVACUATIONINFO_HPP	g1EvacuationInfo.hpp	26;"	d
SHARE_GC_G1_G1FREEIDSET_HPP	g1FreeIdSet.hpp	26;"	d
SHARE_GC_G1_G1FROMCARDCACHE_HPP	g1FromCardCache.hpp	26;"	d
SHARE_GC_G1_G1FULLCOLLECTOR_HPP	g1FullCollector.hpp	26;"	d
SHARE_GC_G1_G1FULLGCADJUSTTASK_HPP	g1FullGCAdjustTask.hpp	26;"	d
SHARE_GC_G1_G1FULLGCCOMPACTIONPOINT_HPP	g1FullGCCompactionPoint.hpp	26;"	d
SHARE_GC_G1_G1FULLGCCOMPACTTASK_HPP	g1FullGCCompactTask.hpp	26;"	d
SHARE_GC_G1_G1FULLGCMARKER_HPP	g1FullGCMarker.hpp	26;"	d
SHARE_GC_G1_G1FULLGCMARKER_INLINE_HPP	g1FullGCMarker.inline.hpp	26;"	d
SHARE_GC_G1_G1FULLGCMARKTASK_HPP	g1FullGCMarkTask.hpp	26;"	d
SHARE_GC_G1_G1FULLGCOOPCLOSURES_HPP	g1FullGCOopClosures.hpp	26;"	d
SHARE_GC_G1_G1FULLGCOOPCLOSURES_INLINE_HPP	g1FullGCOopClosures.inline.hpp	26;"	d
SHARE_GC_G1_G1FULLGCPREPARETASK_HPP	g1FullGCPrepareTask.hpp	26;"	d
SHARE_GC_G1_G1FULLGCREFERENCEPROCESSOREXECUTOR_HPP	g1FullGCReferenceProcessorExecutor.hpp	26;"	d
SHARE_GC_G1_G1FULLGCSCOPE_HPP	g1FullGCScope.hpp	26;"	d
SHARE_GC_G1_G1FULLGCTASK_HPP	g1FullGCTask.hpp	26;"	d
SHARE_GC_G1_G1GCPARPHASETIMESTRACKER_HPP	g1GCParPhaseTimesTracker.hpp	26;"	d
SHARE_GC_G1_G1GCPHASETIMES_HPP	g1GCPhaseTimes.hpp	26;"	d
SHARE_GC_G1_G1HEAPREGIONATTR_HPP	g1HeapRegionAttr.hpp	26;"	d
SHARE_GC_G1_G1HEAPREGIONEVENTSENDER_HPP	g1HeapRegionEventSender.hpp	26;"	d
SHARE_GC_G1_G1HEAPREGIONTRACETYPE_HPP	g1HeapRegionTraceType.hpp	26;"	d
SHARE_GC_G1_G1HEAPSIZINGPOLICY_HPP	g1HeapSizingPolicy.hpp	26;"	d
SHARE_GC_G1_G1HEAPTRANSITION_HPP	g1HeapTransition.hpp	26;"	d
SHARE_GC_G1_G1HEAPVERIFIER_HPP	g1HeapVerifier.hpp	26;"	d
SHARE_GC_G1_G1HETEROGENEOUSHEAPPOLICY_HPP	g1HeterogeneousHeapPolicy.hpp	26;"	d
SHARE_GC_G1_G1HETEROGENEOUSHEAPYOUNGGENSIZER_HPP	g1HeterogeneousHeapYoungGenSizer.hpp	26;"	d
SHARE_GC_G1_G1HOTCARDCACHE_HPP	g1HotCardCache.hpp	26;"	d
SHARE_GC_G1_G1HRPRINTER_HPP	g1HRPrinter.hpp	26;"	d
SHARE_GC_G1_G1IHOPCONTROL_HPP	g1IHOPControl.hpp	26;"	d
SHARE_GC_G1_G1INITLOGGER_HPP	g1InitLogger.hpp	26;"	d
SHARE_GC_G1_G1MEMORYPOOL_HPP	g1MemoryPool.hpp	26;"	d
SHARE_GC_G1_G1MMUTRACKER_HPP	g1MMUTracker.hpp	26;"	d
SHARE_GC_G1_G1MONITORINGSUPPORT_HPP	g1MonitoringSupport.hpp	26;"	d
SHARE_GC_G1_G1OOPCLOSURES_HPP	g1OopClosures.hpp	26;"	d
SHARE_GC_G1_G1OOPCLOSURES_INLINE_HPP	g1OopClosures.inline.hpp	26;"	d
SHARE_GC_G1_G1OOPSTARCHUNKEDLIST_HPP	g1OopStarChunkedList.hpp	26;"	d
SHARE_GC_G1_G1OOPSTARCHUNKEDLIST_INLINE_HPP	g1OopStarChunkedList.inline.hpp	26;"	d
SHARE_GC_G1_G1PAGEBASEDVIRTUALSPACE_HPP	g1PageBasedVirtualSpace.hpp	26;"	d
SHARE_GC_G1_G1PARALLELCLEANING_HPP	g1ParallelCleaning.hpp	26;"	d
SHARE_GC_G1_G1PARSCANTHREADSTATE_HPP	g1ParScanThreadState.hpp	26;"	d
SHARE_GC_G1_G1PARSCANTHREADSTATE_INLINE_HPP	g1ParScanThreadState.inline.hpp	26;"	d
SHARE_GC_G1_G1POLICY_HPP	g1Policy.hpp	26;"	d
SHARE_GC_G1_G1PREDICTIONS_HPP	g1Predictions.hpp	26;"	d
SHARE_GC_G1_G1REDIRTYCARDSQUEUE_HPP	g1RedirtyCardsQueue.hpp	26;"	d
SHARE_GC_G1_G1REGIONMARKSTATSCACHE_HPP	g1RegionMarkStatsCache.hpp	26;"	d
SHARE_GC_G1_G1REGIONMARKSTATSCACHE_INLINE_HPP	g1RegionMarkStatsCache.inline.hpp	26;"	d
SHARE_GC_G1_G1REGIONTOSPACEMAPPER_HPP	g1RegionToSpaceMapper.hpp	26;"	d
SHARE_GC_G1_G1REMSETSUMMARY_HPP	g1RemSetSummary.hpp	26;"	d
SHARE_GC_G1_G1REMSETTRACKINGPOLICY_HPP	g1RemSetTrackingPolicy.hpp	26;"	d
SHARE_GC_G1_G1REMSET_HPP	g1RemSet.hpp	26;"	d
SHARE_GC_G1_G1ROOTCLOSURES_HPP	g1RootClosures.hpp	26;"	d
SHARE_GC_G1_G1ROOTPROCESSOR_HPP	g1RootProcessor.hpp	26;"	d
SHARE_GC_G1_G1SATBMARKQUEUESET_HPP	g1SATBMarkQueueSet.hpp	26;"	d
SHARE_GC_G1_G1SERVICETHREAD_HPP	g1ServiceThread.hpp	26;"	d
SHARE_GC_G1_G1SHAREDDIRTYCARDQUEUE_HPP	g1SharedDirtyCardQueue.hpp	26;"	d
SHARE_GC_G1_G1STRINGDEDUPQUEUE_HPP	g1StringDedupQueue.hpp	26;"	d
SHARE_GC_G1_G1STRINGDEDUPSTAT_HPP	g1StringDedupStat.hpp	26;"	d
SHARE_GC_G1_G1STRINGDEDUP_HPP	g1StringDedup.hpp	26;"	d
SHARE_GC_G1_G1SURVIVORREGIONS_HPP	g1SurvivorRegions.hpp	26;"	d
SHARE_GC_G1_G1SURVRATEGROUP_HPP	g1SurvRateGroup.hpp	26;"	d
SHARE_GC_G1_G1THREADLOCALDATA_HPP	g1ThreadLocalData.hpp	25;"	d
SHARE_GC_G1_G1TRACE_HPP	g1Trace.hpp	26;"	d
SHARE_GC_G1_G1VMOPERATIONS_HPP	g1VMOperations.hpp	26;"	d
SHARE_GC_G1_G1YCTYPES_HPP	g1YCTypes.hpp	26;"	d
SHARE_GC_G1_G1YOUNGGENSIZER_HPP	g1YoungGenSizer.hpp	26;"	d
SHARE_GC_G1_G1_GLOBALS_HPP	g1_globals.hpp	26;"	d
SHARE_GC_G1_HEAPREGIONBOUNDS_HPP	heapRegionBounds.hpp	26;"	d
SHARE_GC_G1_HEAPREGIONBOUNDS_INLINE_HPP	heapRegionBounds.inline.hpp	26;"	d
SHARE_GC_G1_HEAPREGIONMANAGER_HPP	heapRegionManager.hpp	26;"	d
SHARE_GC_G1_HEAPREGIONMANAGER_INLINE_HPP	heapRegionManager.inline.hpp	26;"	d
SHARE_GC_G1_HEAPREGIONREMSET_HPP	heapRegionRemSet.hpp	26;"	d
SHARE_GC_G1_HEAPREGIONSET_HPP	heapRegionSet.hpp	26;"	d
SHARE_GC_G1_HEAPREGIONSET_INLINE_HPP	heapRegionSet.inline.hpp	26;"	d
SHARE_GC_G1_HEAPREGIONTRACER_HPP	heapRegionTracer.hpp	26;"	d
SHARE_GC_G1_HEAPREGIONTYPE_HPP	heapRegionType.hpp	26;"	d
SHARE_GC_G1_HEAPREGION_HPP	heapRegion.hpp	26;"	d
SHARE_GC_G1_HEAPREGION_INLINE_HPP	heapRegion.inline.hpp	26;"	d
SHARE_GC_G1_HETEROGENEOUSHEAPREGIONMANAGER_HPP	heterogeneousHeapRegionManager.hpp	26;"	d
SHARE_GC_G1_JVMFLAGCONSTRAINTSG1_HPP	jvmFlagConstraintsG1.hpp	26;"	d
SHARE_GC_G1_SPARSEPRT_HPP	sparsePRT.hpp	26;"	d
SHARE_GC_G1_SPARSEPRT_INLINE_HPP	sparsePRT.inline.hpp	26;"	d
SHARE_GC_G1_VMSTRUCTS_G1_HPP	vmStructs_g1.hpp	26;"	d
SHARE_VM_GC_G1_G1OLDGENALLOCATIONTRACKER_HPP	g1OldGenAllocationTracker.hpp	26;"	d
SHARE_VM_GC_G1_G1REGIONS_HPP	g1RegionsOnNodes.hpp	26;"	d
SHARE_VM_GC_G1_HEAPREGIONREMSET_INLINE_HPP	heapRegionRemSet.inline.hpp	26;"	d
SHARE_VM_GC_G1_NODE_TIMES_HPP	g1NUMAStats.hpp	26;"	d
SHARE_VM_GC_G1_NUMA_HPP	g1NUMA.hpp	26;"	d
SKIP_RETIRED_FULL_REGIONS	g1HRPrinter.hpp	31;"	d
SMALL_MARGIN	g1MMUTracker.cpp	33;"	d	file:
ScanHR	g1GCPhaseTimes.hpp	/^    ScanHR,$/;"	e	enum:G1GCPhaseTimes::GCParPhases
ScanHRClaimedChunks	g1GCPhaseTimes.hpp	/^    ScanHRClaimedChunks,$/;"	e	enum:G1GCPhaseTimes::GCScanHRWorkItems
ScanHRScannedBlocks	g1GCPhaseTimes.hpp	/^    ScanHRScannedBlocks,$/;"	e	enum:G1GCPhaseTimes::GCScanHRWorkItems
ScanHRScannedCards	g1GCPhaseTimes.hpp	/^    ScanHRScannedCards,$/;"	e	enum:G1GCPhaseTimes::GCScanHRWorkItems
ScanHRScannedOptRefs	g1GCPhaseTimes.hpp	/^    ScanHRScannedOptRefs,$/;"	e	enum:G1GCPhaseTimes::GCScanHRWorkItems
ScanHRUsedMemory	g1GCPhaseTimes.hpp	/^    ScanHRUsedMemory$/;"	e	enum:G1GCPhaseTimes::GCScanHRWorkItems
ScanningInYoungValues	g1OopClosures.hpp	/^  enum ScanningInYoungValues {$/;"	g	class:G1ScanEvacuatedObjClosure
SizerDefaults	g1YoungGenSizer.hpp	/^    SizerDefaults,$/;"	e	enum:G1YoungGenSizer::SizerKind
SizerKind	g1YoungGenSizer.hpp	/^  enum SizerKind {$/;"	g	class:G1YoungGenSizer
SizerMaxAndNewSize	g1YoungGenSizer.hpp	/^    SizerMaxAndNewSize,$/;"	e	enum:G1YoungGenSizer::SizerKind
SizerMaxNewSizeOnly	g1YoungGenSizer.hpp	/^    SizerMaxNewSizeOnly,$/;"	e	enum:G1YoungGenSizer::SizerKind
SizerNewRatio	g1YoungGenSizer.hpp	/^    SizerNewRatio$/;"	e	enum:G1YoungGenSizer::SizerKind
SizerNewSizeOnly	g1YoungGenSizer.hpp	/^    SizerNewSizeOnly,$/;"	e	enum:G1YoungGenSizer::SizerKind
SmallSize	g1CodeCacheRemSet.hpp	/^  const static size_t SmallSize = 32;$/;"	m	class:G1CodeRootSet
SparsePRT	sparsePRT.cpp	/^SparsePRT::SparsePRT() :$/;"	f	class:SparsePRT
SparsePRT	sparsePRT.hpp	/^class SparsePRT {$/;"	c
SparsePRTBucketIter	sparsePRT.hpp	/^  SparsePRTBucketIter(const SparsePRT* sprt) :$/;"	f	class:SparsePRTBucketIter
SparsePRTBucketIter	sparsePRT.hpp	/^class SparsePRTBucketIter: public RSHashTableBucketIter {$/;"	c
SparsePRTEntry	sparsePRT.hpp	/^class SparsePRTEntry: public CHeapObj<mtGC> {$/;"	c
Started	g1ConcurrentMarkThread.hpp	/^    Started,$/;"	e	enum:G1ConcurrentMarkThread::State
StartsHumongous	g1HeapRegionTraceType.hpp	/^    StartsHumongous,$/;"	e	enum:G1HeapRegionTraceType::Type
StartsHumongousTag	heapRegionType.hpp	/^    StartsHumongousTag    = HumongousMask | PinnedMask,$/;"	e	enum:HeapRegionType::__anon1
Stat	g1NUMAStats.hpp	/^  struct Stat {$/;"	s	class:G1NUMAStats
State	g1ConcurrentMarkThread.hpp	/^  enum State {$/;"	g	class:G1ConcurrentMarkThread
StringDedupQueueFixup	g1GCPhaseTimes.hpp	/^    StringDedupQueueFixup,$/;"	e	enum:G1GCPhaseTimes::GCParPhases
StringDedupTableFixup	g1GCPhaseTimes.hpp	/^    StringDedupTableFixup,$/;"	e	enum:G1GCPhaseTimes::GCParPhases
StrongOopStorageSetRoots	g1GCPhaseTimes.hpp	/^    StrongOopStorageSetRoots,$/;"	e	enum:G1GCPhaseTimes::GCParPhases
StrongRootsClosures	g1RootProcessor.cpp	/^  StrongRootsClosures(OopClosure* roots, CLDClosure* clds, CodeBlobClosure* blobs) :$/;"	f	class:StrongRootsClosures
StrongRootsClosures	g1RootProcessor.cpp	/^class StrongRootsClosures : public G1RootClosures {$/;"	c	file:
SumUsedClosure	g1CollectedHeap.cpp	/^  SumUsedClosure() : _used(0) {}$/;"	f	class:SumUsedClosure
SumUsedClosure	g1CollectedHeap.cpp	/^class SumUsedClosure: public HeapRegionClosure {$/;"	c	file:
SurvTag	heapRegionType.hpp	/^    SurvTag               = YoungMask + 1,$/;"	e	enum:HeapRegionType::__anon1
Survivor	g1HeapRegionTraceType.hpp	/^    Survivor,$/;"	e	enum:G1HeapRegionTraceType::Type
Survivor	heapRegionType.cpp	/^const HeapRegionType HeapRegionType::Survivor  = HeapRegionType(SurvTag);$/;"	m	class:HeapRegionType	file:
Survivor	heapRegionType.hpp	/^  static const HeapRegionType Survivor;$/;"	m	class:HeapRegionType
SurvivorGCAllocRegion	g1AllocRegion.hpp	/^  SurvivorGCAllocRegion(G1EvacStats* stats, uint node_index)$/;"	f	class:SurvivorGCAllocRegion
SurvivorGCAllocRegion	g1AllocRegion.hpp	/^class SurvivorGCAllocRegion : public G1GCAllocRegion {$/;"	c
TARGET_REGION_NUMBER	heapRegionBounds.hpp	/^  static const size_t TARGET_REGION_NUMBER = 2048;$/;"	m	class:HeapRegionBounds
TIME_FORMAT	g1GCPhaseTimes.cpp	353;"	d	file:
TableOccupancyFactor	sparsePRT.cpp	/^float RSHashTable::TableOccupancyFactor = 0.5f;$/;"	m	class:RSHashTable	file:
TableOccupancyFactor	sparsePRT.hpp	/^  static float TableOccupancyFactor;$/;"	m	class:RSHashTable
Tag	heapRegionType.hpp	/^  } Tag;$/;"	t	class:HeapRegionType	typeref:enum:HeapRegionType::__anon1
TaskQueueEntryChunk	g1ConcurrentMark.hpp	/^  struct TaskQueueEntryChunk {$/;"	s	class:G1CMMarkStack
TearDownRegionSetsClosure	g1CollectedHeap.cpp	/^  TearDownRegionSetsClosure(HeapRegionSet* old_set) : _old_set(old_set) { }$/;"	f	class:TearDownRegionSetsClosure
TearDownRegionSetsClosure	g1CollectedHeap.cpp	/^class TearDownRegionSetsClosure : public HeapRegionClosure {$/;"	c	file:
Termination	g1GCPhaseTimes.hpp	/^    Termination,$/;"	e	enum:G1GCPhaseTimes::GCParPhases
ThreadRoots	g1GCPhaseTimes.hpp	/^    ThreadRoots,$/;"	e	enum:G1GCPhaseTimes::GCParPhases
Threshold	g1CodeCacheRemSet.hpp	/^  const static size_t Threshold = 24;$/;"	m	class:G1CodeRootSet
Thresholds	g1ConcurrentRefine.cpp	/^typedef Pair<size_t, size_t> Thresholds;$/;"	t	file:
TimerForRegion	g1CollectedHeap.cpp	/^      TimerForRegion(Tickspan& time) : _time(time), _start_time(Ticks::now()) { }$/;"	f	class:G1FreeCollectionSetTask::FreeCSetClosure::TimerForRegion
TimerForRegion	g1CollectedHeap.cpp	/^    class TimerForRegion {$/;"	c	class:G1FreeCollectionSetTask::FreeCSetClosure	file:
ToScanMask	g1RemSet.cpp	/^  static const size_t ToScanMask = G1CardTable::g1_card_already_scanned;$/;"	m	class:G1CardTableScanner	file:
True	g1OopClosures.hpp	/^    True,$/;"	e	enum:G1ScanEvacuatedObjClosure::ScanningInYoungValues
TruncatedSeqLength	g1Analytics.hpp	/^  const static int TruncatedSeqLength = 10;$/;"	m	class:G1Analytics
Type	g1HeapRegionTraceType.hpp	/^  enum Type {$/;"	g	class:G1HeapRegionTraceType
Unclaimed	heapRegionManager.hpp	/^  static const uint Unclaimed = 0;$/;"	m	class:HeapRegionClaimer
Uninitialized	g1OopClosures.hpp	/^    Uninitialized$/;"	e	enum:G1ScanEvacuatedObjClosure::ScanningInYoungValues
UnknownNodeIndex	g1NUMA.hpp	/^  static const uint UnknownNodeIndex = UINT_MAX;$/;"	m	class:G1NUMA
UnregisterNMethodOopClosure	g1CollectedHeap.cpp	/^  UnregisterNMethodOopClosure(G1CollectedHeap* g1h, nmethod* nm) :$/;"	f	class:UnregisterNMethodOopClosure
UnregisterNMethodOopClosure	g1CollectedHeap.cpp	/^class UnregisterNMethodOopClosure: public OopClosure {$/;"	c	file:
Untracked	heapRegionRemSet.hpp	/^    Untracked,$/;"	e	enum:HeapRegionRemSet::RemSetState
UpdateLogBuffersDeferred	g1EvacFailure.cpp	/^  UpdateLogBuffersDeferred(G1RedirtyCardsQueue* rdcq) :$/;"	f	class:UpdateLogBuffersDeferred
UpdateLogBuffersDeferred	g1EvacFailure.cpp	/^class UpdateLogBuffersDeferred : public BasicOopIterateClosure {$/;"	c	file:
Updating	heapRegionRemSet.hpp	/^    Updating,$/;"	e	enum:HeapRegionRemSet::RemSetState
VM_G1CollectForAllocation	g1VMOperations.cpp	/^VM_G1CollectForAllocation::VM_G1CollectForAllocation(size_t         word_size,$/;"	f	class:VM_G1CollectForAllocation
VM_G1CollectForAllocation	g1VMOperations.hpp	/^class VM_G1CollectForAllocation : public VM_CollectForAllocation {$/;"	c
VM_G1CollectFull	g1VMOperations.hpp	/^  VM_G1CollectFull(uint gc_count_before,$/;"	f	class:VM_G1CollectFull
VM_G1CollectFull	g1VMOperations.hpp	/^class VM_G1CollectFull : public VM_GC_Operation {$/;"	c
VM_G1Concurrent	g1VMOperations.hpp	/^  VM_G1Concurrent(VoidClosure* cl, const char* message) :$/;"	f	class:VM_G1Concurrent
VM_G1Concurrent	g1VMOperations.hpp	/^class VM_G1Concurrent : public VM_Operation {$/;"	c
VM_G1SendHeapRegionInfoEvents	g1HeapRegionEventSender.cpp	/^class VM_G1SendHeapRegionInfoEvents : public VM_Operation {$/;"	c	file:
VM_G1TryInitiateConcMark	g1VMOperations.cpp	/^VM_G1TryInitiateConcMark::VM_G1TryInitiateConcMark(uint gc_count_before,$/;"	f	class:VM_G1TryInitiateConcMark
VM_G1TryInitiateConcMark	g1VMOperations.hpp	/^class VM_G1TryInitiateConcMark : public VM_GC_Operation {$/;"	c
VM_INT_CONSTANTS_G1GC	vmStructs_g1.hpp	78;"	d
VM_STRUCTS_G1GC	vmStructs_g1.hpp	33;"	d
VM_TYPES_G1GC	vmStructs_g1.hpp	92;"	d
VerifyArchiveOopClosure	g1HeapVerifier.cpp	/^  VerifyArchiveOopClosure(HeapRegion *hr)$/;"	f	class:VerifyArchiveOopClosure
VerifyArchiveOopClosure	g1HeapVerifier.cpp	/^class VerifyArchiveOopClosure: public BasicOopIterateClosure {$/;"	c	file:
VerifyArchivePointerRegionClosure	g1HeapVerifier.cpp	/^class VerifyArchivePointerRegionClosure: public HeapRegionClosure {$/;"	c	file:
VerifyCLDClosure	g1HeapVerifier.cpp	/^  VerifyCLDClosure(G1CollectedHeap* g1h, OopClosure* cl) : _young_ref_counter_closure(g1h), _oop_closure(cl) {}$/;"	f	class:VerifyCLDClosure
VerifyCLDClosure	g1HeapVerifier.cpp	/^class VerifyCLDClosure: public CLDClosure {$/;"	c	file:
VerifyLiveClosure	heapRegion.cpp	/^  VerifyLiveClosure(G1CollectedHeap* g1h, VerifyOption vo) : G1VerificationClosure(g1h, vo) {}$/;"	f	class:VerifyLiveClosure
VerifyLiveClosure	heapRegion.cpp	/^class VerifyLiveClosure : public G1VerificationClosure {$/;"	c	file:
VerifyLivenessOopClosure	g1HeapVerifier.cpp	/^  VerifyLivenessOopClosure(G1CollectedHeap* g1h, VerifyOption vo):$/;"	f	class:VerifyLivenessOopClosure
VerifyLivenessOopClosure	g1HeapVerifier.cpp	/^class VerifyLivenessOopClosure: public BasicOopIterateClosure {$/;"	c	file:
VerifyNoCSetOops	g1ConcurrentMark.cpp	/^  VerifyNoCSetOops(const char* phase, int info = -1) :$/;"	f	class:VerifyNoCSetOops
VerifyNoCSetOops	g1ConcurrentMark.cpp	/^class VerifyNoCSetOops {$/;"	c	file:
VerifyObjectInArchiveRegionClosure	g1HeapVerifier.cpp	/^  VerifyObjectInArchiveRegionClosure(HeapRegion *hr, bool verbose)$/;"	f	class:VerifyObjectInArchiveRegionClosure
VerifyObjectInArchiveRegionClosure	g1HeapVerifier.cpp	/^class VerifyObjectInArchiveRegionClosure: public ObjectClosure {$/;"	c	file:
VerifyObjsInRegionClosure	g1HeapVerifier.cpp	/^  VerifyObjsInRegionClosure(HeapRegion *hr, VerifyOption vo)$/;"	f	class:VerifyObjsInRegionClosure
VerifyObjsInRegionClosure	g1HeapVerifier.cpp	/^class VerifyObjsInRegionClosure: public ObjectClosure {$/;"	c	file:
VerifyReadyForArchivingRegionClosure	g1HeapVerifier.cpp	/^  VerifyReadyForArchivingRegionClosure() : HeapRegionClosure() {$/;"	f	class:VerifyReadyForArchivingRegionClosure
VerifyReadyForArchivingRegionClosure	g1HeapVerifier.cpp	/^class VerifyReadyForArchivingRegionClosure : public HeapRegionClosure {$/;"	c	file:
VerifyRegionClosure	g1HeapVerifier.cpp	/^  VerifyRegionClosure(bool par, VerifyOption vo)$/;"	f	class:VerifyRegionClosure
VerifyRegionClosure	g1HeapVerifier.cpp	/^class VerifyRegionClosure: public HeapRegionClosure {$/;"	c	file:
VerifyRegionListsClosure	g1HeapVerifier.cpp	/^  VerifyRegionListsClosure(HeapRegionSet* old_set,$/;"	f	class:VerifyRegionListsClosure
VerifyRegionListsClosure	g1HeapVerifier.cpp	/^class VerifyRegionListsClosure : public HeapRegionClosure {$/;"	c	file:
VerifyRegionRemSetClosure	g1CollectedHeap.cpp	/^class VerifyRegionRemSetClosure : public HeapRegionClosure {$/;"	c	file:
VerifyRemSetClosure	heapRegion.cpp	/^  VerifyRemSetClosure(G1CollectedHeap* g1h, VerifyOption vo) : G1VerificationClosure(g1h, vo) {}$/;"	f	class:VerifyRemSetClosure
VerifyRemSetClosure	heapRegion.cpp	/^class VerifyRemSetClosure : public G1VerificationClosure {$/;"	c	file:
VerifyRootsClosure	g1HeapVerifier.cpp	/^  VerifyRootsClosure(VerifyOption vo) :$/;"	f	class:VerifyRootsClosure
VerifyRootsClosure	g1HeapVerifier.cpp	/^class VerifyRootsClosure: public OopClosure {$/;"	c	file:
VerifyStrongCodeRootCodeBlobClosure	heapRegion.cpp	/^  VerifyStrongCodeRootCodeBlobClosure(const HeapRegion* hr) :$/;"	f	class:VerifyStrongCodeRootCodeBlobClosure
VerifyStrongCodeRootCodeBlobClosure	heapRegion.cpp	/^class VerifyStrongCodeRootCodeBlobClosure: public CodeBlobClosure {$/;"	c	file:
VerifyStrongCodeRootOopClosure	heapRegion.cpp	/^  VerifyStrongCodeRootOopClosure(const HeapRegion* hr):$/;"	f	class:VerifyStrongCodeRootOopClosure
VerifyStrongCodeRootOopClosure	heapRegion.cpp	/^class VerifyStrongCodeRootOopClosure: public OopClosure {$/;"	c	file:
WordAllClean	g1CardTable.hpp	/^  static const size_t WordAllClean = SIZE_MAX;$/;"	m	class:G1CardTable
WordAllDirty	g1CardTable.hpp	/^  static const size_t WordAllDirty = 0;$/;"	m	class:G1CardTable
WordAlreadyScanned	g1CardTable.hpp	/^  static const size_t WordAlreadyScanned = (SIZE_MAX \/ 255) * g1_card_already_scanned;$/;"	m	class:G1CardTable
Young	g1HeapRegionAttr.hpp	/^  static const region_type_t Young        =   0;    \/\/ The region is in the collection set and a young region.$/;"	m	struct:G1HeapRegionAttr
YoungFreeCSet	g1GCPhaseTimes.hpp	/^    YoungFreeCSet,$/;"	e	enum:G1GCPhaseTimes::GCParPhases
YoungMask	heapRegionType.hpp	/^    YoungMask             = 2,$/;"	e	enum:HeapRegionType::__anon1
YoungOnlyGC	g1Policy.hpp	/^    YoungOnlyGC,$/;"	e	enum:G1Policy::PauseKind
YoungRefCounterClosure	g1HeapVerifier.cpp	/^  YoungRefCounterClosure(G1CollectedHeap* g1h) : _g1h(g1h), _count(0) {}$/;"	f	class:YoungRefCounterClosure
YoungRefCounterClosure	g1HeapVerifier.cpp	/^class YoungRefCounterClosure : public OopClosure {$/;"	c	file:
YoungTargetLengths	g1Policy.hpp	/^  typedef Pair<uint, uint, StackObj> YoungTargetLengths;$/;"	t	class:G1Policy
__	c1/g1BarrierSetC1.cpp	36;"	d	file:
__	c1/g1BarrierSetC1.cpp	38;"	d	file:
__	c2/g1BarrierSetC2.cpp	594;"	d	file:
__	c2/g1BarrierSetC2.cpp	69;"	d	file:
_accum_surv_rate_pred	g1SurvRateGroup.hpp	/^  double* _accum_surv_rate_pred;$/;"	m	class:G1SurvRateGroup
_accum_task_vtime	g1ConcurrentMark.hpp	/^  double*   _accum_task_vtime;   \/\/ Accumulated task vtime$/;"	m	class:G1ConcurrentMark
_active	g1ConcurrentStartToMixedTimeTracker.hpp	/^  bool _active;$/;"	m	class:G1ConcurrentStartToMixedTimeTracker
_active	g1FullGCScope.hpp	/^  IsGCActiveMark          _active;$/;"	m	class:G1FullGCScope
_active_workers	g1CollectedHeap.cpp	/^  uint              _active_workers;$/;"	m	class:G1FreeCollectionSetTask	file:
_active_workers	g1ConcurrentMark.cpp	/^  uint              _active_workers;$/;"	m	class:G1CMRefProcTaskExecutor	file:
_addr	c1/g1BarrierSetC1.hpp	/^  LIR_Opr _addr;$/;"	m	class:G1PostBarrierStub
_addr	c1/g1BarrierSetC1.hpp	/^  LIR_Opr _addr;$/;"	m	class:G1PreBarrierStub
_adjust	g1FullGCAdjustTask.hpp	/^  G1AdjustClosure          _adjust;$/;"	m	class:G1FullGCAdjustTask
_adjust_closure	g1FullGCAdjustTask.cpp	/^  G1AdjustClosure* _adjust_closure;$/;"	m	class:G1AdjustLiveClosure	file:
_after_used_bytes	g1CollectedHeap.cpp	/^    size_t _after_used_bytes;    \/\/ Usage in regions failing evacuation$/;"	m	class:G1FreeCollectionSetTask::FreeCSetStats	file:
_age_index	heapRegion.hpp	/^  int  _age_index;$/;"	m	class:HeapRegion
_age_table	g1ParScanThreadState.hpp	/^  AgeTable _age_table;$/;"	m	class:G1ParScanThreadState
_all	g1RemSetSummary.cpp	/^  RegionTypeCounter _all;$/;"	m	class:HRRSStatsIter	file:
_all_dirty_regions	g1RemSet.cpp	/^  G1DirtyRegions* _all_dirty_regions;$/;"	m	class:G1RemSetScanState	file:
_alloc_buffers	g1Allocator.hpp	/^  PLAB** _alloc_buffers[G1HeapRegionAttr::Num];$/;"	m	class:G1PLABAllocator
_alloc_rate_ms_seq	g1Analytics.hpp	/^  TruncatedSeq* _alloc_rate_ms_seq;$/;"	m	class:G1Analytics
_alloc_region	g1AllocRegion.hpp	/^  HeapRegion* volatile _alloc_region;$/;"	m	class:G1AllocRegion
_alloc_regions_used_before	g1EvacuationInfo.hpp	/^  size_t _alloc_regions_used_before;$/;"	m	class:G1EvacuationInfo
_allocated_bytes_since_last_gc	g1OldGenAllocationTracker.hpp	/^  size_t _allocated_bytes_since_last_gc;$/;"	m	class:G1OldGenAllocationTracker
_allocated_heapregions_length	heapRegionManager.hpp	/^  uint _allocated_heapregions_length;$/;"	m	class:HeapRegionManager
_allocated_humongous_bytes_since_last_gc	g1OldGenAllocationTracker.hpp	/^  size_t _allocated_humongous_bytes_since_last_gc;$/;"	m	class:G1OldGenAllocationTracker
_allocated_regions	g1Allocator.hpp	/^  GrowableArray<HeapRegion*> _allocated_regions;$/;"	m	class:G1ArchiveAllocator
_allocation_rate_s	g1IHOPControl.hpp	/^  TruncatedSeq _allocation_rate_s;$/;"	m	class:G1AdaptiveIHOPControl
_allocation_region	g1Allocator.hpp	/^  HeapRegion* _allocation_region;$/;"	m	class:G1ArchiveAllocator
_allocation_regions	g1EvacuationInfo.hpp	/^  uint _allocation_regions;$/;"	m	class:G1EvacuationInfo
_allocator	g1Allocator.hpp	/^  G1Allocator* _allocator;$/;"	m	class:G1PLABAllocator
_allocator	g1CollectedHeap.hpp	/^  G1Allocator* _allocator;$/;"	m	class:G1CollectedHeap
_always_subject_to_discovery	g1FullCollector.hpp	/^  G1FullGCSubjectToDiscoveryClosure _always_subject_to_discovery;$/;"	m	class:G1FullCollector
_amount	g1RemSetSummary.cpp	/^  size_t _amount;$/;"	m	class:RegionTypeCounter	file:
_analytics	g1HeapSizingPolicy.hpp	/^  const G1Analytics* _analytics;$/;"	m	class:G1HeapSizingPolicy
_analytics	g1Policy.hpp	/^  G1Analytics* _analytics;$/;"	m	class:G1Policy
_archive	g1RemSetSummary.cpp	/^  RegionTypeCounter _archive;$/;"	m	class:HRRSStatsIter	file:
_archive_allocator	g1CollectedHeap.hpp	/^  G1ArchiveAllocator* _archive_allocator;$/;"	m	class:G1CollectedHeap
_archive_check_enabled	g1Allocator.cpp	/^bool G1ArchiveAllocator::_archive_check_enabled = false;$/;"	m	class:G1ArchiveAllocator	file:
_archive_check_enabled	g1Allocator.hpp	/^  static bool _archive_check_enabled;$/;"	m	class:G1ArchiveAllocator
_archive_count	g1HeapVerifier.cpp	/^  uint _archive_count;$/;"	m	class:VerifyRegionListsClosure	file:
_archive_length	g1HeapTransition.hpp	/^    size_t _archive_length;$/;"	m	struct:G1HeapTransition::Data
_archive_region_count	g1HeapTransition.cpp	/^  size_t _archive_region_count;$/;"	m	struct:DetailedUsage	file:
_archive_region_map	g1Allocator.cpp	/^G1ArchiveRegionMap G1ArchiveAllocator::_archive_region_map;$/;"	m	class:G1ArchiveAllocator	file:
_archive_region_map	g1Allocator.hpp	/^  static G1ArchiveRegionMap  _archive_region_map;$/;"	m	class:G1ArchiveAllocator
_archive_set	g1CollectedHeap.hpp	/^  HeapRegionSet _archive_set;$/;"	m	class:G1CollectedHeap
_archive_set	g1HeapVerifier.cpp	/^  HeapRegionSet*   _archive_set;$/;"	m	class:VerifyRegionListsClosure	file:
_archive_used	g1HeapTransition.cpp	/^  size_t _archive_used;$/;"	m	struct:DetailedUsage	file:
_array	g1CollectionSetChooser.cpp	/^    G1BuildCandidateArray* _array;$/;"	m	class:G1BuildCandidateRegionsTask::G1BuildCandidateRegionsClosure	file:
_array	g1MMUTracker.hpp	/^  G1MMUTrackerQueueElem _array[QueueLength];$/;"	m	class:G1MMUTrackerQueue
_array_queue_set	g1FullCollector.hpp	/^  ObjArrayTaskQueueSet      _array_queue_set;$/;"	m	class:G1FullCollector
_available_map	heapRegionManager.hpp	/^  CHeapBitMap _available_map;$/;"	m	class:HeapRegionManager
_base	g1BiasedArray.hpp	/^  address _base;          \/\/ the real base address$/;"	m	class:G1BiasedMappedArrayBase
_base	g1ConcurrentMark.hpp	/^  TaskQueueEntryChunk* _base;    \/\/ Bottom address of allocated memory area.$/;"	m	class:G1CMMarkStack
_base_addr	g1RemSet.cpp	/^  CardValue* const _base_addr;$/;"	m	class:G1CardTableScanner	file:
_base_free_regions	g1Policy.cpp	/^  const double _base_free_regions;$/;"	m	class:G1YoungLengthPredictor	file:
_base_time_ms	g1Policy.cpp	/^  const double _base_time_ms;$/;"	m	class:G1YoungLengthPredictor	file:
_before	g1HeapTransition.hpp	/^  Data _before;$/;"	m	class:G1HeapTransition
_before_used_bytes	g1CollectedHeap.cpp	/^    size_t _before_used_bytes;   \/\/ Usage in regions successfully evacutate$/;"	m	class:G1FreeCollectionSetTask::FreeCSetStats	file:
_bias	g1BiasedArray.hpp	/^  size_t _bias;           \/\/ the bias, i.e. the offset biased_base is located to the right in elements$/;"	m	class:G1BiasedMappedArrayBase
_biased_base	g1BiasedArray.hpp	/^  address _biased_base;   \/\/ base address biased by "bias" elements$/;"	m	class:G1BiasedMappedArrayBase
_bitmap	g1ConcurrentMark.cpp	/^    G1CMBitMap* _bitmap;$/;"	m	class:G1ClearBitMapTask::G1ClearBitmapHRClosure	file:
_bitmap	g1FullGCAdjustTask.cpp	/^  G1CMBitMap* _bitmap;$/;"	m	class:G1AdjustRegionClosure	file:
_bitmap	g1FullGCCompactTask.cpp	/^  G1CMBitMap* _bitmap;$/;"	m	class:G1ResetHumongousClosure	file:
_bitmap	g1FullGCCompactTask.hpp	/^    G1CMBitMap* _bitmap;$/;"	m	class:G1FullGCCompactTask::G1CompactRegionClosure
_bitmap	g1FullGCMarker.hpp	/^  G1CMBitMap*        _bitmap;$/;"	m	class:G1FullGCMarker
_bitmap	g1FullGCOopClosures.hpp	/^  G1CMBitMap* _bitmap;$/;"	m	class:G1IsAliveClosure
_bitmap	g1FullGCPrepareTask.hpp	/^    G1CMBitMap* _bitmap;$/;"	m	class:G1FullGCPrepareTask::G1CalculatePointersClosure
_bitmap	g1RemSet.cpp	/^      const G1CMBitMap* const _bitmap;$/;"	m	class:G1RebuildRemSetTask::G1RebuildRemSetHeapRegionClosure::LiveObjIterator	file:
_bl_ind	sparsePRT.hpp	/^  int  _bl_ind;         \/\/ [-1, 0.._rsht->_capacity)$/;"	m	class:RSHashTableBucketIter
_blobs	g1CodeCacheRemSet.cpp	/^  CodeBlobToOopClosure _blobs;$/;"	m	class:CleanCallback	file:
_blobs	g1RootProcessor.cpp	/^  CodeBlobClosure* _blobs;$/;"	m	class:StrongRootsClosures	file:
_blocks_scanned	g1RemSet.cpp	/^  size_t _blocks_scanned;$/;"	m	class:G1ScanHRForRegionClosure	file:
_bm	g1ConcurrentMarkBitMap.hpp	/^  G1CMBitMap* _bm;$/;"	m	class:G1CMBitMapMappingChangedListener
_bm	heapRegionRemSet.hpp	/^  CHeapBitMap     _bm;$/;"	m	class:PerRegionTable
_bot	g1BlockOffsetTable.hpp	/^  G1BlockOffsetTable* _bot;$/;"	m	class:G1BlockOffsetTablePart
_bot	g1CollectedHeap.hpp	/^  G1BlockOffsetTable* _bot;$/;"	m	class:G1CollectedHeap
_bot	g1RemSet.cpp	/^  G1BlockOffsetTable* _bot;$/;"	m	class:G1ScanHRForRegionClosure	file:
_bot	heapRegionRemSet.hpp	/^  G1BlockOffsetTable* _bot;$/;"	m	class:HeapRegionRemSet
_bot_mapper	heapRegionManager.hpp	/^  G1RegionToSpaceMapper* _bot_mapper;$/;"	m	class:HeapRegionManager
_bot_part	heapRegion.hpp	/^  G1BlockOffsetTablePart _bot_part;$/;"	m	class:HeapRegion
_bot_updates	g1AllocRegion.hpp	/^  const bool _bot_updates;$/;"	m	class:G1AllocRegion
_bottom	g1Allocator.hpp	/^  HeapWord* _bottom;$/;"	m	class:G1ArchiveAllocator
_bottom	heapRegion.hpp	/^  HeapWord* const _bottom;$/;"	m	class:HeapRegion
_buckets	sparsePRT.hpp	/^  int* _buckets;$/;"	m	class:RSHashTable
_buffer	g1RemSet.cpp	/^    uint* _buffer;$/;"	m	class:G1RemSetScanState::G1DirtyRegions	file:
_buffer	g1SharedDirtyCardQueue.hpp	/^  void** _buffer;$/;"	m	class:G1SharedDirtyCardQueue
_buffers	g1RedirtyCardsQueue.hpp	/^    G1BufferNodeList _buffers;$/;"	m	class:G1RedirtyCardsQueueBase::LocalQSet
_bytes_allocated_in_old_since_last_gc	g1CollectedHeap.cpp	/^    size_t _bytes_allocated_in_old_since_last_gc; \/\/ Size of young regions turned into old$/;"	m	class:G1FreeCollectionSetTask::FreeCSetStats	file:
_bytes_used	g1EvacuationInfo.hpp	/^  size_t _bytes_used;$/;"	m	class:G1EvacuationInfo
_bytes_used_before	g1CollectionSet.hpp	/^  size_t _bytes_used_before;$/;"	m	class:G1CollectionSet
_bytes_used_during_gc	g1CollectedHeap.hpp	/^  size_t _bytes_used_during_gc;$/;"	m	class:G1CollectedHeap
_c1	heapRegion.cpp	/^  OopClosure* _c1;$/;"	m	class:G1Mux2Closure	file:
_c2	heapRegion.cpp	/^  OopClosure* _c2;$/;"	m	class:G1Mux2Closure	file:
_cache	g1FromCardCache.cpp	/^uintptr_t** G1FromCardCache::_cache = NULL;$/;"	m	class:G1FromCardCache	file:
_cache	g1FromCardCache.hpp	/^  static uintptr_t** _cache;$/;"	m	class:G1FromCardCache
_cache	g1RegionMarkStatsCache.hpp	/^  G1RegionMarkStatsCacheEntry* _cache;$/;"	m	class:G1RegionMarkStatsCache
_cache_hits	g1RegionMarkStatsCache.hpp	/^  size_t _cache_hits;$/;"	m	class:G1RegionMarkStatsCache
_cache_misses	g1RegionMarkStatsCache.hpp	/^  size_t _cache_misses;$/;"	m	class:G1RegionMarkStatsCache
_cache_wrapped_around	g1HotCardCache.hpp	/^  volatile bool _cache_wrapped_around;$/;"	m	class:G1HotCardCache
_caller	g1HeapVerifier.cpp	/^  const char* _caller;$/;"	m	class:G1VerifyBitmapClosure	file:
_calls	g1ConcurrentMark.hpp	/^  uint                        _calls;$/;"	m	class:G1CMTask
_cancel	g1StringDedupQueue.hpp	/^  bool                       _cancel;$/;"	m	class:G1StringDedupQueue
_candidates	g1CollectionSet.hpp	/^  G1CollectionSetCandidates* _candidates;$/;"	m	class:G1CollectionSet
_capacity	sparsePRT.hpp	/^  size_t _capacity;$/;"	m	class:RSHashTable
_capacity_mask	sparsePRT.hpp	/^  size_t _capacity_mask;$/;"	m	class:RSHashTable
_card_counts	g1CardCounts.cpp	/^  G1CardCounts* _card_counts;$/;"	m	class:G1CardCountsClearClosure	file:
_card_counts	g1CardCounts.hpp	/^  uint8_t* _card_counts;$/;"	m	class:G1CardCounts
_card_counts	g1HotCardCache.hpp	/^  G1CardCounts      _card_counts;$/;"	m	class:G1HotCardCache
_card_counts_mapper	heapRegionManager.hpp	/^  G1RegionToSpaceMapper* _card_counts_mapper;$/;"	m	class:HeapRegionManager
_card_table	g1CardTable.hpp	/^  G1CardTable* _card_table;$/;"	m	class:G1CardTableChangedListener
_card_table	g1CollectedHeap.hpp	/^  G1CardTable* _card_table;$/;"	m	class:G1CollectedHeap
_card_table_scan_state	g1RemSet.cpp	/^  uint volatile* _card_table_scan_state;$/;"	m	class:G1RemSetScanState	file:
_cards	sparsePRT.hpp	/^  card_elem_t _cards[card_array_alignment];$/;"	m	class:SparsePRTEntry
_cards_dirty	g1RemSet.cpp	/^    size_t _cards_dirty;$/;"	m	class:G1MergeHeapRootsTask::G1MergeCardSetClosure	file:
_cards_dirty	g1RemSet.cpp	/^    size_t _cards_dirty;$/;"	m	class:G1MergeHeapRootsTask::G1MergeLogBufferCardsClosure	file:
_cards_occupied	g1RemSetSummary.cpp	/^  size_t _cards_occupied;$/;"	m	class:RegionTypeCounter	file:
_cards_scanned	g1RemSet.cpp	/^  size_t _cards_scanned;$/;"	m	class:G1ScanHRForRegionClosure	file:
_cards_skipped	g1RemSet.cpp	/^    size_t _cards_skipped;$/;"	m	class:G1MergeHeapRootsTask::G1MergeLogBufferCardsClosure	file:
_cardtable_mapper	heapRegionManager.hpp	/^  G1RegionToSpaceMapper* _cardtable_mapper;$/;"	m	class:HeapRegionManager
_cc	g1FullGCOopClosures.hpp	/^  int _cc;$/;"	m	class:G1VerifyOopClosure
_checker	heapRegionSet.hpp	/^  HeapRegionSetChecker* _checker;$/;"	m	class:HeapRegionSetBase
_chunk_capacity	g1ConcurrentMark.hpp	/^  size_t _chunk_capacity;        \/\/ Current maximum number of TaskQueueEntryChunk elements.$/;"	m	class:G1CMMarkStack
_chunk_length	g1RemSet.cpp	/^    uint _chunk_length;$/;"	m	class:G1RemSetScanState::G1ClearCardTableTask	file:
_chunk_list	g1ConcurrentMark.hpp	/^  TaskQueueEntryChunk* volatile _chunk_list; \/\/ List of chunks currently containing data.$/;"	m	class:G1CMMarkStack
_chunk_size	g1CollectionSetChooser.cpp	/^    uint const _chunk_size;$/;"	m	class:G1BuildCandidateRegionsTask::G1BuildCandidateArray	file:
_chunks_claimed	g1RemSet.cpp	/^  size_t _chunks_claimed;$/;"	m	class:G1ScanHRForRegionClosure	file:
_chunks_in_chunk_list	g1ConcurrentMark.hpp	/^  volatile size_t _chunks_in_chunk_list;$/;"	m	class:G1CMMarkStack
_cl	g1CodeBlobClosure.cpp	/^  G1CodeBlobClosure* _cl;$/;"	m	class:G1NmethodProcessor	file:
_cl	g1CollectedHeap.cpp	/^  ObjectClosure* _cl;$/;"	m	class:IterateObjectClosureRegionClosure	file:
_cl	g1ConcurrentMark.cpp	/^    G1PrintRegionLivenessInfoClosure* _cl;$/;"	m	class:G1UpdateRemSetTrackingBeforeRebuildTask::G1UpdateRemSetTrackingBeforeRebuild	file:
_cl	g1ConcurrentMark.cpp	/^  G1ClearBitmapHRClosure _cl;$/;"	m	class:G1ClearBitMapTask	file:
_cl	g1ConcurrentMark.cpp	/^  G1PrintRegionLivenessInfoClosure _cl;$/;"	m	class:G1UpdateRemSetTrackingBeforeRebuildTask	file:
_cl	g1RemSet.cpp	/^    G1MergeCardSetClosure _cl;$/;"	m	class:G1MergeHeapRootsTask::G1FlushHumongousCandidateRemSets	file:
_cl	g1VMOperations.hpp	/^  VoidClosure* _cl;$/;"	m	class:VM_G1Concurrent
_claim_token	g1ConcurrentMark.cpp	/^  uintx _claim_token;$/;"	m	class:G1RemarkThreadsClosure	file:
_claimed_root_regions	g1ConcurrentMark.hpp	/^  volatile size_t _claimed_root_regions; \/\/ Number of root regions currently claimed.$/;"	m	class:G1CMRootMemRegions
_claimer	g1CollectedHeap.cpp	/^  HeapRegionClaimer _claimer;$/;"	m	class:G1FreeCollectionSetTask	file:
_claimer	g1CollectedHeap.cpp	/^  HeapRegionClaimer _claimer;$/;"	m	class:G1ParallelObjectIterator	file:
_claimer	g1CollectedHeap.cpp	/^  HeapRegionClaimer _claimer;$/;"	m	class:G1PrepareEvacuationTask	file:
_claimer	g1FullGCCompactTask.hpp	/^  HeapRegionClaimer _claimer;$/;"	m	class:G1FullGCCompactTask
_claims	heapRegionManager.hpp	/^  volatile uint* _claims;$/;"	m	class:HeapRegionClaimer
_cld_closure	g1FullGCMarker.hpp	/^  CLDToOopClosure      _cld_closure;$/;"	m	class:G1FullGCMarker
_clds	g1RootProcessor.cpp	/^  CLDClosure* _clds;$/;"	m	class:AllRootsClosures	file:
_clds	g1RootProcessor.cpp	/^  CLDClosure* _clds;$/;"	m	class:StrongRootsClosures	file:
_clds	g1SharedClosures.hpp	/^  G1CLDScanClosure                _clds;$/;"	m	class:G1SharedClosures
_cleaning_claimed	g1ParallelCleaning.hpp	/^  volatile int       _cleaning_claimed;$/;"	m	class:JVMCICleaningTask
_cleanup_list	g1ConcurrentMark.cpp	/^  FreeRegionList* _cleanup_list;$/;"	m	class:G1ReclaimEmptyRegionsTask	file:
_cleanup_times	g1ConcurrentMark.hpp	/^  NumberSeq _cleanup_times;$/;"	m	class:G1ConcurrentMark
_clearing_next_bitmap	g1CollectorState.hpp	/^  bool _clearing_next_bitmap;$/;"	m	class:G1CollectorState
_closure	g1OopClosures.hpp	/^  G1ParCopyHelper* _closure;$/;"	m	class:G1CLDScanClosure
_closure	g1OopClosures.hpp	/^  G1ScanEvacuatedObjClosure* _closure;$/;"	m	class:G1ScanInYoungSetter
_closures	g1ParScanThreadState.hpp	/^  G1EvacuationRootClosures* _closures;$/;"	m	class:G1ParScanThreadState
_closures	g1RootClosures.cpp	/^  G1SharedClosures<G1MarkNone> _closures;$/;"	m	class:G1EvacuationClosures	file:
_cm	g1CodeBlobClosure.hpp	/^    G1ConcurrentMark* _cm;$/;"	m	class:G1CodeBlobClosure::MarkingOopClosure
_cm	g1CollectedHeap.hpp	/^  G1ConcurrentMark* _cm;$/;"	m	class:G1CollectedHeap
_cm	g1ConcurrentMark.cpp	/^    G1ConcurrentMark* _cm;$/;"	m	class:G1ClearBitMapTask::G1ClearBitmapHRClosure	file:
_cm	g1ConcurrentMark.cpp	/^    G1ConcurrentMark* _cm;$/;"	m	class:G1UpdateRemSetTrackingBeforeRebuildTask::G1UpdateRemSetTrackingBeforeRebuild	file:
_cm	g1ConcurrentMark.cpp	/^  G1ConcurrentMark*     _cm;$/;"	m	class:G1CMConcurrentMarkingTask	file:
_cm	g1ConcurrentMark.cpp	/^  G1ConcurrentMark* _cm;$/;"	m	class:G1CMDrainMarkingStackClosure	file:
_cm	g1ConcurrentMark.cpp	/^  G1ConcurrentMark* _cm;$/;"	m	class:G1CMKeepAliveAndDrainClosure	file:
_cm	g1ConcurrentMark.cpp	/^  G1ConcurrentMark* _cm;$/;"	m	class:G1CMRefProcTaskExecutor	file:
_cm	g1ConcurrentMark.cpp	/^  G1ConcurrentMark* _cm;$/;"	m	class:G1CMRefProcTaskProxy	file:
_cm	g1ConcurrentMark.cpp	/^  G1ConcurrentMark* _cm;$/;"	m	class:G1CMRemarkTask	file:
_cm	g1ConcurrentMark.cpp	/^  G1ConcurrentMark* _cm;$/;"	m	class:G1CMRootRegionScanTask	file:
_cm	g1ConcurrentMark.cpp	/^  G1ConcurrentMark* _cm;$/;"	m	class:G1PrecleanYieldClosure	file:
_cm	g1ConcurrentMark.cpp	/^  G1ConcurrentMark* _cm;$/;"	m	class:G1UpdateRemSetTrackingBeforeRebuildTask	file:
_cm	g1ConcurrentMark.hpp	/^  G1ConcurrentMark*           _cm;$/;"	m	class:G1CMTask
_cm	g1ConcurrentMarkBitMap.hpp	/^  G1ConcurrentMark* const _cm;$/;"	m	class:G1CMBitMapClosure
_cm	g1ConcurrentMarkThread.cpp	/^  G1ConcurrentMark* _cm;$/;"	m	class:CMCleanup	file:
_cm	g1ConcurrentMarkThread.cpp	/^  G1ConcurrentMark* _cm;$/;"	m	class:CMRemark	file:
_cm	g1ConcurrentMarkThread.cpp	/^  G1ConcurrentMark* _cm;$/;"	m	class:G1ConcPhaseTimer	file:
_cm	g1ConcurrentMarkThread.hpp	/^  G1ConcurrentMark* _cm;$/;"	m	class:G1ConcurrentMarkThread
_cm	g1EvacFailure.cpp	/^  G1ConcurrentMark* _cm;$/;"	m	class:RemoveSelfForwardPtrObjClosure	file:
_cm	g1OopClosures.hpp	/^  G1ConcurrentMark* _cm;$/;"	m	class:G1ParCopyHelper
_cm	g1OopClosures.hpp	/^  G1ConcurrentMark* _cm;$/;"	m	class:G1RootRegionScanClosure
_cm	g1RemSet.cpp	/^    G1ConcurrentMark* _cm;$/;"	m	class:G1RebuildRemSetTask::G1RebuildRemSetHeapRegionClosure	file:
_cm	g1RemSet.cpp	/^  G1ConcurrentMark* _cm;$/;"	m	class:G1RebuildRemSetTask	file:
_cm_cl	g1ConcurrentMark.cpp	/^  G1CMOopClosure _cm_cl;$/;"	m	class:G1RemarkThreadsClosure	file:
_cm_oop_closure	g1ConcurrentMark.hpp	/^  G1CMOopClosure*             _cm_oop_closure;$/;"	m	class:G1CMTask
_cm_satb_cl	g1ConcurrentMark.cpp	/^  G1CMSATBBufferClosure _cm_satb_cl;$/;"	m	class:G1RemarkThreadsClosure	file:
_cm_thread	g1CollectedHeap.hpp	/^  G1ConcurrentMarkThread* _cm_thread;$/;"	m	class:G1CollectedHeap
_cm_thread	g1ConcurrentMark.hpp	/^  G1ConcurrentMarkThread* _cm_thread;     \/\/ The thread doing the work$/;"	m	class:G1ConcurrentMark
_coarse_map	heapRegionRemSet.hpp	/^  CHeapBitMap   _coarse_map;$/;"	m	class:OtherRegionsTable
_code_cache_task	g1ParallelCleaning.hpp	/^  CodeCacheUnloadingTask  _code_cache_task;$/;"	m	class:G1ParallelCleaningTask
_code_cl	g1ConcurrentMark.cpp	/^  MarkingCodeBlobClosure _code_cl;$/;"	m	class:G1RemarkThreadsClosure	file:
_code_root_elems	g1RemSetSummary.cpp	/^  size_t _code_root_elems;$/;"	m	class:RegionTypeCounter	file:
_code_root_mem_size	g1RemSetSummary.cpp	/^  size_t _code_root_mem_size;$/;"	m	class:RegionTypeCounter	file:
_code_roots	heapRegionRemSet.hpp	/^  G1CodeRootSet _code_roots;$/;"	m	class:HeapRegionRemSet
_code_roots_phase	g1RemSet.cpp	/^  G1GCPhaseTimes::GCParPhases _code_roots_phase;$/;"	m	class:G1ScanCollectionSetRegionClosure	file:
_codeblobs	g1SharedClosures.hpp	/^  G1CodeBlobClosure               _codeblobs;$/;"	m	class:G1SharedClosures
_collecting	g1RedirtyCardsQueue.cpp	/^  DEBUG_ONLY(COMMA _collecting(true))$/;"	f
_collection_pause_end	g1CollectedHeap.hpp	/^  Ticks _collection_pause_end;$/;"	m	class:G1CollectedHeap
_collection_set	g1CollectedHeap.hpp	/^  G1CollectionSet _collection_set;$/;"	m	class:G1CollectedHeap
_collection_set	g1Policy.hpp	/^  G1CollectionSet* _collection_set;$/;"	m	class:G1Policy
_collection_set_cur_length	g1CollectionSet.hpp	/^  volatile size_t _collection_set_cur_length;$/;"	m	class:G1CollectionSet
_collection_set_iter_state	g1RemSet.cpp	/^  G1RemsetIterState volatile* _collection_set_iter_state;$/;"	m	class:G1RemSetScanState	file:
_collection_set_max_length	g1CollectionSet.hpp	/^  size_t _collection_set_max_length;$/;"	m	class:G1CollectionSet
_collection_set_regions	g1CollectionSet.hpp	/^  uint* _collection_set_regions;$/;"	m	class:G1CollectionSet
_collectionset_regions	g1EvacuationInfo.hpp	/^  uint _collectionset_regions;$/;"	m	class:G1EvacuationInfo
_collectionset_used_after	g1EvacuationInfo.hpp	/^  size_t _collectionset_used_after;$/;"	m	class:G1EvacuationInfo
_collectionset_used_before	g1EvacuationInfo.hpp	/^  size_t _collectionset_used_before;$/;"	m	class:G1EvacuationInfo
_collector	g1FullGCReferenceProcessorExecutor.hpp	/^    G1FullCollector*              _collector;$/;"	m	class:G1FullGCReferenceProcessingExecutor::G1RefProcTaskProxy
_collector	g1FullGCReferenceProcessorExecutor.hpp	/^  G1FullCollector*    _collector;$/;"	m	class:G1FullGCReferenceProcessingExecutor
_collector	g1FullGCTask.hpp	/^  G1FullCollector* _collector;$/;"	m	class:G1FullGCTask
_collector_state	g1CollectedHeap.hpp	/^  G1CollectorState _collector_state;$/;"	m	class:G1CollectedHeap
_collision_list_next	heapRegionRemSet.hpp	/^  PerRegionTable * _collision_list_next;$/;"	m	class:PerRegionTable
_commit_factor	g1RegionToSpaceMapper.hpp	/^  size_t _commit_factor;$/;"	m	class:G1RegionToHeteroSpaceMapper
_committed	g1PageBasedVirtualSpace.hpp	/^  CHeapBitMap _committed;$/;"	m	class:G1PageBasedVirtualSpace
_compaction_points	g1FullCollector.hpp	/^  G1FullGCCompactionPoint** _compaction_points;$/;"	m	class:G1FullCollector
_compaction_region_iterator	g1FullGCCompactionPoint.hpp	/^  GrowableArrayIterator<HeapRegion*> _compaction_region_iterator;$/;"	m	class:G1FullGCCompactionPoint
_compaction_regions	g1FullGCCompactionPoint.hpp	/^  GrowableArray<HeapRegion*>* _compaction_regions;$/;"	m	class:G1FullGCCompactionPoint
_compaction_top	g1FullGCCompactionPoint.hpp	/^  HeapWord*   _compaction_top;$/;"	m	class:G1FullGCCompactionPoint
_compaction_top	heapRegion.hpp	/^  HeapWord* _compaction_top;$/;"	m	class:HeapRegion
_completed	g1DirtyCardQueue.hpp	/^  Queue _completed;           \/\/ Has inner padding, including trailer.$/;"	m	class:G1DirtyCardQueueSet
_conc_collection_counters	g1MonitoringSupport.hpp	/^  CollectorCounters*   _conc_collection_counters;$/;"	m	class:G1MonitoringSupport
_concurrent	g1ConcurrentMark.hpp	/^  volatile bool           _concurrent;$/;"	m	class:G1ConcurrentMark
_concurrent_mark_cleanup_times_ms	g1Analytics.hpp	/^  TruncatedSeq* _concurrent_mark_cleanup_times_ms;$/;"	m	class:G1Analytics
_concurrent_mark_remark_times_ms	g1Analytics.hpp	/^  TruncatedSeq* _concurrent_mark_remark_times_ms;$/;"	m	class:G1Analytics
_concurrent_refine_rate_ms_seq	g1Analytics.hpp	/^  TruncatedSeq* _concurrent_refine_rate_ms_seq;$/;"	m	class:G1Analytics
_concurrent_start_end_time	g1ConcurrentStartToMixedTimeTracker.hpp	/^  double _concurrent_start_end_time;$/;"	m	class:G1ConcurrentStartToMixedTimeTracker
_concurrent_start_to_mixed	g1Policy.hpp	/^  G1ConcurrentStartToMixedTimeTracker _concurrent_start_to_mixed;$/;"	m	class:G1Policy
_concurrent_workers	g1ConcurrentMark.hpp	/^  WorkGang* _concurrent_workers;$/;"	m	class:G1ConcurrentMark
_constant_other_time_ms_seq	g1Analytics.hpp	/^  TruncatedSeq* _constant_other_time_ms_seq;$/;"	m	class:G1Analytics
_containing_obj	g1FullGCOopClosures.hpp	/^  oop              _containing_obj;$/;"	m	class:G1VerifyOopClosure
_containing_obj	heapRegion.cpp	/^  oop _containing_obj;$/;"	m	class:G1VerificationClosure	file:
_containing_set	heapRegion.hpp	/^  HeapRegionSetBase* _containing_set;$/;"	m	class:HeapRegion
_contains	g1RemSet.cpp	/^    bool* _contains;$/;"	m	class:G1RemSetScanState::G1DirtyRegions	file:
_coops	g1OopStarChunkedList.hpp	/^  ChunkedList<narrowOop*, mtGC>* _coops;$/;"	m	class:G1OopStarChunkedList
_copy_cost_per_byte_ms_seq	g1Analytics.hpp	/^  TruncatedSeq* _copy_cost_per_byte_ms_seq;$/;"	m	class:G1Analytics
_cost_per_byte_ms_during_cm_seq	g1Analytics.hpp	/^  TruncatedSeq* _cost_per_byte_ms_during_cm_seq;$/;"	m	class:G1Analytics
_count	g1AllocRegion.hpp	/^  uint _count;$/;"	m	class:G1AllocRegion
_count	g1HeapVerifier.cpp	/^  int              _count;$/;"	m	class:YoungRefCounterClosure	file:
_count	g1OopClosures.hpp	/^  int              _count;$/;"	m	class:G1CLDScanClosure
_count_per_node	g1RegionsOnNodes.hpp	/^  volatile uint* _count_per_node;$/;"	m	class:G1RegionsOnNodes
_counts	g1CardCounts.hpp	/^  G1CardCounts* _counts;$/;"	m	class:G1CardCountsMappingChangedListener
_cp	g1FullGCPrepareTask.hpp	/^    G1FullGCCompactionPoint* _cp;$/;"	m	class:G1FullGCPrepareTask::G1CalculatePointersClosure
_cp	g1FullGCPrepareTask.hpp	/^    G1FullGCCompactionPoint* _cp;$/;"	m	class:G1FullGCPrepareTask::G1PrepareCompactLiveClosure
_cp	g1FullGCPrepareTask.hpp	/^    G1FullGCCompactionPoint* _cp;$/;"	m	class:G1FullGCPrepareTask::G1RePrepareClosure
_cpu_time	g1FullGCScope.hpp	/^  GCTraceCPUTime          _cpu_time;$/;"	m	class:G1FullGCScope
_cr	g1CollectedHeap.hpp	/^  G1ConcurrentRefine* _cr;$/;"	m	class:G1CollectedHeap
_cr	g1ConcurrentRefine.hpp	/^  G1ConcurrentRefine* _cr;$/;"	m	class:G1ConcurrentRefineThreadControl
_cr	g1ConcurrentRefineThread.hpp	/^  G1ConcurrentRefine* _cr;$/;"	m	class:G1ConcurrentRefineThread
_croots	g1OopStarChunkedList.hpp	/^  ChunkedList<narrowOop*, mtGC>* _croots;$/;"	m	class:G1OopStarChunkedList
_ct	g1CardCounts.hpp	/^  G1CardTable*     _ct;$/;"	m	class:G1CardCounts
_ct	g1EvacFailure.cpp	/^  G1CardTable*    _ct;$/;"	m	class:UpdateLogBuffersDeferred	file:
_ct	g1ParScanThreadState.hpp	/^  G1CardTable* _ct;$/;"	m	class:G1ParScanThreadState
_ct	g1RemSet.cpp	/^    G1CardTable* _ct;$/;"	m	class:G1MergeHeapRootsTask::G1MergeCardSetClosure	file:
_ct	g1RemSet.cpp	/^    G1CardTable* _ct;$/;"	m	class:G1MergeHeapRootsTask::G1MergeLogBufferCardsClosure	file:
_ct	g1RemSet.cpp	/^  G1CardTable* _ct;$/;"	m	class:G1ScanHRForRegionClosure	file:
_ct	g1RemSet.hpp	/^  G1CardTable*           _ct;$/;"	m	class:G1RemSet
_ct	heapRegion.cpp	/^  G1CardTable *_ct;$/;"	m	class:G1VerificationClosure	file:
_ct_bot	g1CardCounts.hpp	/^  const CardValue* _ct_bot;$/;"	m	class:G1CardCounts
_cur_addr	g1PageBasedVirtualSpace.cpp	/^  char* volatile _cur_addr;$/;"	m	class:G1PretouchTask	file:
_cur_addr	g1RemSet.cpp	/^  CardValue* _cur_addr;$/;"	m	class:G1CardTableScanner	file:
_cur_chunk_end	g1CollectionSetChooser.cpp	/^    uint _cur_chunk_end;$/;"	m	class:G1BuildCandidateRegionsTask::G1BuildCandidateRegionsClosure	file:
_cur_chunk_idx	g1CollectionSetChooser.cpp	/^    uint _cur_chunk_idx;$/;"	m	class:G1BuildCandidateRegionsTask::G1BuildCandidateRegionsClosure	file:
_cur_claim	g1RemSet.cpp	/^  uint _cur_claim;$/;"	m	class:G1CardTableChunkClaimer	file:
_cur_claim_idx	g1CollectionSetChooser.cpp	/^    uint volatile _cur_claim_idx;$/;"	m	class:G1BuildCandidateRegionsTask::G1BuildCandidateArray	file:
_cur_clear_ct_time_ms	g1GCPhaseTimes.hpp	/^  double _cur_clear_ct_time_ms;$/;"	m	class:G1GCPhaseTimes
_cur_collection_code_root_fixup_time_ms	g1GCPhaseTimes.hpp	/^  double _cur_collection_code_root_fixup_time_ms;$/;"	m	class:G1GCPhaseTimes
_cur_collection_initial_evac_time_ms	g1GCPhaseTimes.hpp	/^  double _cur_collection_initial_evac_time_ms;$/;"	m	class:G1GCPhaseTimes
_cur_collection_start_sec	g1GCPhaseTimes.hpp	/^  double _cur_collection_start_sec;$/;"	m	class:G1GCPhaseTimes
_cur_concatenate_dirty_card_logs_time_ms	g1GCPhaseTimes.hpp	/^  double _cur_concatenate_dirty_card_logs_time_ms;$/;"	m	class:G1GCPhaseTimes
_cur_derived_pointer_table_update_time_ms	g1GCPhaseTimes.hpp	/^  double _cur_derived_pointer_table_update_time_ms;$/;"	m	class:G1GCPhaseTimes
_cur_dirty_regions	g1RemSet.cpp	/^    uint volatile _cur_dirty_regions;$/;"	m	class:G1RemSetScanState::G1ClearCardTableTask	file:
_cur_evac_fail_recalc_used	g1GCPhaseTimes.hpp	/^  double _cur_evac_fail_recalc_used;$/;"	m	class:G1GCPhaseTimes
_cur_evac_fail_remove_self_forwards	g1GCPhaseTimes.hpp	/^  double _cur_evac_fail_remove_self_forwards;$/;"	m	class:G1GCPhaseTimes
_cur_expand_heap_time_ms	g1GCPhaseTimes.hpp	/^  double _cur_expand_heap_time_ms;$/;"	m	class:G1GCPhaseTimes
_cur_fast_reclaim_humongous_candidates	g1GCPhaseTimes.hpp	/^  size_t _cur_fast_reclaim_humongous_candidates;$/;"	m	class:G1GCPhaseTimes
_cur_fast_reclaim_humongous_reclaimed	g1GCPhaseTimes.hpp	/^  size_t _cur_fast_reclaim_humongous_reclaimed;$/;"	m	class:G1GCPhaseTimes
_cur_fast_reclaim_humongous_time_ms	g1GCPhaseTimes.hpp	/^  double _cur_fast_reclaim_humongous_time_ms;$/;"	m	class:G1GCPhaseTimes
_cur_fast_reclaim_humongous_total	g1GCPhaseTimes.hpp	/^  size_t _cur_fast_reclaim_humongous_total;$/;"	m	class:G1GCPhaseTimes
_cur_idx	g1RemSet.cpp	/^    uint _cur_idx;$/;"	m	class:G1RemSetScanState::G1DirtyRegions	file:
_cur_merge_heap_roots_time_ms	g1GCPhaseTimes.hpp	/^  double _cur_merge_heap_roots_time_ms;$/;"	m	class:G1GCPhaseTimes
_cur_optional_evac_time_ms	g1GCPhaseTimes.hpp	/^  double _cur_optional_evac_time_ms;$/;"	m	class:G1GCPhaseTimes
_cur_optional_merge_heap_roots_time_ms	g1GCPhaseTimes.hpp	/^  double _cur_optional_merge_heap_roots_time_ms;$/;"	m	class:G1GCPhaseTimes
_cur_optional_prepare_merge_heap_roots_time_ms	g1GCPhaseTimes.hpp	/^  double _cur_optional_prepare_merge_heap_roots_time_ms;$/;"	m	class:G1GCPhaseTimes
_cur_prepare_merge_heap_roots_time_ms	g1GCPhaseTimes.hpp	/^  double _cur_prepare_merge_heap_roots_time_ms;$/;"	m	class:G1GCPhaseTimes
_cur_prepare_tlab_time_ms	g1GCPhaseTimes.hpp	/^  double _cur_prepare_tlab_time_ms;$/;"	m	class:G1GCPhaseTimes
_cur_ref_proc_time_ms	g1GCPhaseTimes.hpp	/^  double _cur_ref_proc_time_ms;$/;"	m	class:G1GCPhaseTimes
_cur_region_register_time	g1GCPhaseTimes.hpp	/^  double _cur_region_register_time;$/;"	m	class:G1GCPhaseTimes
_cur_resize_tlab_time_ms	g1GCPhaseTimes.hpp	/^  double _cur_resize_tlab_time_ms;$/;"	m	class:G1GCPhaseTimes
_cur_string_deduplication_time_ms	g1GCPhaseTimes.hpp	/^  double _cur_string_deduplication_time_ms;$/;"	m	class:G1GCPhaseTimes
_cur_strong_code_root_purge_time_ms	g1GCPhaseTimes.hpp	/^  double _cur_strong_code_root_purge_time_ms;$/;"	m	class:G1GCPhaseTimes
_cur_verify_after_time_ms	g1GCPhaseTimes.hpp	/^  double _cur_verify_after_time_ms;$/;"	m	class:G1GCPhaseTimes
_cur_verify_before_time_ms	g1GCPhaseTimes.hpp	/^  double _cur_verify_before_time_ms;$/;"	m	class:G1GCPhaseTimes
_curr	heapRegionSet.hpp	/^  HeapRegion*     _curr;$/;"	m	class:FreeRegionListIterator
_curr_region	g1ConcurrentMark.hpp	/^  HeapRegion*                 _curr_region;$/;"	m	class:G1CMTask
_current	g1FullGCPrepareTask.hpp	/^    HeapRegion* _current;$/;"	m	class:G1FullGCPrepareTask::G1RePrepareClosure
_current	g1RemSet.cpp	/^      HeapWord* _current;$/;"	m	class:G1RebuildRemSetTask::G1RebuildRemSetHeapRegionClosure::LiveObjIterator	file:
_current_region	g1FullGCCompactionPoint.hpp	/^  HeapRegion* _current_region;$/;"	m	class:G1FullGCCompactionPoint
_cursor	g1StringDedupQueue.hpp	/^  size_t                     _cursor;$/;"	m	class:G1StringDedupQueue
_cycle_already_in_progress	g1VMOperations.hpp	/^  bool _cycle_already_in_progress;$/;"	m	class:VM_G1TryInitiateConcMark
_data	g1CollectionSetChooser.cpp	/^    HeapRegion** _data;$/;"	m	class:G1BuildCandidateRegionsTask::G1BuildCandidateArray	file:
_data	g1NUMAStats.hpp	/^    size_t** _data;$/;"	m	class:G1NUMAStats::NodeDataArray
_deduped_old	g1StringDedupStat.hpp	/^  uintx  _deduped_old;$/;"	m	class:G1StringDedupStat
_deduped_old_bytes	g1StringDedupStat.hpp	/^  uintx  _deduped_old_bytes;$/;"	m	class:G1StringDedupStat
_deduped_young	g1StringDedupStat.hpp	/^  uintx  _deduped_young;$/;"	m	class:G1StringDedupStat
_deduped_young_bytes	g1StringDedupStat.hpp	/^  uintx  _deduped_young_bytes;$/;"	m	class:G1StringDedupStat
_desc	g1NUMA.hpp	/^  const char* _desc;$/;"	m	class:G1NodeIndexCheckClosure
_dest	g1ParScanThreadState.hpp	/^  G1HeapRegionAttr _dest[G1HeapRegionAttr::Num];$/;"	m	class:G1ParScanThreadState
_detached_refinement_stats	g1DirtyCardQueue.hpp	/^  G1ConcurrentRefineStats _detached_refinement_stats;$/;"	m	class:G1DirtyCardQueueSet
_detector	g1CodeCacheRemSet.cpp	/^  PointsIntoHRDetectionClosure _detector;$/;"	m	class:CleanCallback	file:
_direct_allocated	g1Allocator.hpp	/^  size_t _direct_allocated[G1HeapRegionAttr::Num];$/;"	m	class:G1PLABAllocator
_direct_allocated	g1EvacStats.hpp	/^  size_t _direct_allocated; \/\/ Number of words allocated directly into the regions.$/;"	m	class:G1EvacStats
_dirtied_cards	g1ConcurrentRefineStats.hpp	/^  size_t _dirtied_cards;$/;"	m	class:G1ConcurrentRefineStats
_dirtied_cards_rate_ms_seq	g1Analytics.hpp	/^  TruncatedSeq* _dirtied_cards_rate_ms_seq;$/;"	m	class:G1Analytics
_dirty	g1PageBasedVirtualSpace.hpp	/^  CHeapBitMap _dirty;$/;"	m	class:G1PageBasedVirtualSpace
_dirty_card_buffers	g1RemSet.cpp	/^  BufferNode::Stack _dirty_card_buffers;$/;"	m	class:G1MergeHeapRootsTask	file:
_dirty_card_queue	g1ThreadLocalData.hpp	/^  G1DirtyCardQueue _dirty_card_queue;$/;"	m	class:G1ThreadLocalData
_dirty_card_queue_buffer_allocator	g1BarrierSet.hpp	/^  BufferNode::Allocator _dirty_card_queue_buffer_allocator;$/;"	m	class:G1BarrierSet
_dirty_card_queue_set	g1BarrierSet.hpp	/^  G1DirtyCardQueueSet _dirty_card_queue_set;$/;"	m	class:G1BarrierSet
_do_load	c1/g1BarrierSetC1.hpp	/^  bool _do_load;$/;"	m	class:G1PreBarrierStub
_draining_satb_buffers	g1ConcurrentMark.hpp	/^  bool                        _draining_satb_buffers;$/;"	m	class:G1CMTask
_dram_idx_to_node_idx	g1NUMA.hpp	/^  int* _dram_idx_to_node_idx;$/;"	m	class:G1NUMA
_dram_mapper	g1RegionToSpaceMapper.hpp	/^  G1RegionToSpaceMapper* _dram_mapper;$/;"	m	class:G1RegionToHeteroSpaceMapper
_dropped	g1StringDedupQueue.hpp	/^  uintx                      _dropped;$/;"	m	class:G1StringDedupQueue
_dummy_region	g1AllocRegion.cpp	/^HeapRegion* G1AllocRegion::_dummy_region = NULL;$/;"	m	class:G1AllocRegion	file:
_dummy_region	g1AllocRegion.hpp	/^  static HeapRegion* _dummy_region;$/;"	m	class:G1AllocRegion
_during_concurrent_start	g1EvacFailure.cpp	/^  bool _during_concurrent_start;$/;"	m	class:RemoveSelfForwardPtrObjClosure	file:
_eden	g1CollectedHeap.hpp	/^  G1EdenRegions _eden;$/;"	m	class:G1CollectedHeap
_eden_length	g1HeapTransition.hpp	/^    size_t _eden_length;$/;"	m	struct:G1HeapTransition::Data
_eden_length_per_node	g1HeapTransition.hpp	/^    uint* _eden_length_per_node;$/;"	m	struct:G1HeapTransition::Data
_eden_region_count	g1HeapTransition.cpp	/^  size_t _eden_region_count;$/;"	m	struct:DetailedUsage	file:
_eden_region_length	g1CollectionSet.hpp	/^  uint _eden_region_length;$/;"	m	class:G1CollectionSet
_eden_space_committed	g1MonitoringSupport.hpp	/^  size_t _eden_space_committed;$/;"	m	class:G1MonitoringSupport
_eden_space_counters	g1MonitoringSupport.hpp	/^  HSpaceCounters*      _eden_space_counters;$/;"	m	class:G1MonitoringSupport
_eden_space_pool	g1MonitoringSupport.hpp	/^  MemoryPool* _eden_space_pool;$/;"	m	class:G1MonitoringSupport
_eden_space_used	g1MonitoringSupport.hpp	/^  size_t _eden_space_used;$/;"	m	class:G1MonitoringSupport
_eden_surv_rate_group	g1Policy.hpp	/^  G1SurvRateGroup* _eden_surv_rate_group;$/;"	m	class:G1Policy
_eden_used	g1HeapTransition.cpp	/^  size_t _eden_used;$/;"	m	struct:DetailedUsage	file:
_elapsed_time_ms	g1ConcurrentMark.hpp	/^  double                      _elapsed_time_ms;$/;"	m	class:G1CMTask
_empty	g1StringDedupQueue.hpp	/^  volatile bool              _empty;$/;"	m	class:G1StringDedupQueue
_enabled_verification_types	g1HeapVerifier.cpp	/^int G1HeapVerifier::_enabled_verification_types = G1HeapVerifier::G1VerifyAll;$/;"	m	class:G1HeapVerifier	file:
_enabled_verification_types	g1HeapVerifier.hpp	/^  static int _enabled_verification_types;$/;"	m	class:G1HeapVerifier
_end	heapRegion.hpp	/^  HeapWord* const _end;$/;"	m	class:HeapRegion
_end	heapRegionManager.hpp	/^  uint _end;$/;"	m	class:HeapRegionRange
_end_addr	g1PageBasedVirtualSpace.cpp	/^  char* const _end_addr;$/;"	m	class:G1PretouchTask	file:
_end_addr	g1RemSet.cpp	/^  CardValue* const _end_addr;$/;"	m	class:G1CardTableScanner	file:
_end_time	g1MMUTracker.hpp	/^  double _end_time;$/;"	m	class:G1MMUTrackerQueueElem
_entries	sparsePRT.hpp	/^  SparsePRTEntry* _entries;$/;"	m	class:RSHashTable
_entry_count	g1BufferNodeList.hpp	/^  size_t _entry_count;          \/\/ Sum of entries in nodes in list.$/;"	m	struct:G1BufferNodeList
_entry_count	g1RedirtyCardsQueue.hpp	/^  volatile size_t _entry_count;$/;"	m	class:G1RedirtyCardsQueueSet
_evacuation_failed	g1CollectedHeap.hpp	/^  bool _evacuation_failed;$/;"	m	class:G1CollectedHeap
_evacuation_failed	heapRegion.hpp	/^  bool _evacuation_failed;$/;"	m	class:HeapRegion
_evacuation_failed_info_array	g1CollectedHeap.hpp	/^  EvacuationFailedInfo* _evacuation_failed_info_array;$/;"	m	class:G1CollectedHeap
_evacuation_failure_alot_count	g1CollectedHeap.hpp	/^  volatile size_t _evacuation_failure_alot_count;$/;"	m	class:G1CollectedHeap
_evacuation_failure_alot_for_current_gc	g1CollectedHeap.hpp	/^  bool _evacuation_failure_alot_for_current_gc;$/;"	m	class:G1CollectedHeap
_evacuation_failure_alot_gc_number	g1CollectedHeap.hpp	/^  size_t _evacuation_failure_alot_gc_number;$/;"	m	class:G1CollectedHeap
_evacuation_info	g1CollectedHeap.cpp	/^  G1EvacuationInfo* _evacuation_info;$/;"	m	class:G1FreeCollectionSetTask	file:
_event	g1CollectedHeap.cpp	/^      EventGCPhaseParallel _event;$/;"	m	class:G1FreeCollectionSetTask::FreeCSetClosure::JFREventForRegion	file:
_event	g1GCParPhaseTimesTracker.hpp	/^  EventGCPhaseParallel _event;$/;"	m	class:G1GCParPhaseTimesTracker
_executable	g1PageBasedVirtualSpace.hpp	/^  bool _executable;$/;"	m	class:G1PageBasedVirtualSpace
_expand_heap_after_alloc_failure	g1CollectedHeap.hpp	/^  bool _expand_heap_after_alloc_failure;$/;"	m	class:G1CollectedHeap
_explicit_gc	g1FullGCScope.hpp	/^  bool                    _explicit_gc;$/;"	m	class:G1FullGCScope
_external_accounted_time_ms	g1GCPhaseTimes.hpp	/^  double _external_accounted_time_ms;$/;"	m	class:G1GCPhaseTimes
_failure_used	g1EvacStats.hpp	/^  size_t _failure_used;$/;"	m	class:G1EvacStats
_failure_used_words	g1CollectedHeap.cpp	/^    size_t _failure_used_words;  \/\/ Live size in failed regions$/;"	m	class:G1FreeCollectionSetTask::FreeCSetStats	file:
_failure_waste	g1EvacStats.hpp	/^  size_t _failure_waste;$/;"	m	class:G1EvacStats
_failure_waste_words	g1CollectedHeap.cpp	/^    size_t _failure_waste_words; \/\/ Wasted size in failed regions$/;"	m	class:G1FreeCollectionSetTask::FreeCSetStats	file:
_failures	g1FullGCOopClosures.hpp	/^  bool             _failures;$/;"	m	class:G1VerifyOopClosure
_failures	g1HeapVerifier.cpp	/^  bool              _failures;$/;"	m	class:G1ParVerifyTask	file:
_failures	g1HeapVerifier.cpp	/^  bool             _failures;$/;"	m	class:VerifyRegionClosure	file:
_failures	g1HeapVerifier.cpp	/^  bool             _failures;$/;"	m	class:VerifyRootsClosure	file:
_failures	g1HeapVerifier.cpp	/^  bool _failures;$/;"	m	class:G1CheckRegionAttrTableClosure	file:
_failures	g1HeapVerifier.cpp	/^  bool _failures;$/;"	m	class:G1VerifyBitmapClosure	file:
_failures	g1HeapVerifier.cpp	/^  bool _failures;$/;"	m	class:G1VerifyCodeRootOopClosure	file:
_failures	heapRegion.cpp	/^  bool _failures;$/;"	m	class:G1VerificationClosure	file:
_failures	heapRegion.cpp	/^  bool _failures;$/;"	m	class:VerifyStrongCodeRootCodeBlobClosure	file:
_failures	heapRegion.cpp	/^  bool _failures;$/;"	m	class:VerifyStrongCodeRootOopClosure	file:
_fast_reclaim_handled	g1RemSet.cpp	/^  volatile bool _fast_reclaim_handled;$/;"	m	class:G1MergeHeapRootsTask	file:
_fine_eviction_sample_size	heapRegionRemSet.cpp	/^size_t OtherRegionsTable::_fine_eviction_sample_size = 0;$/;"	m	class:OtherRegionsTable	file:
_fine_eviction_sample_size	heapRegionRemSet.hpp	/^  static size_t _fine_eviction_sample_size;$/;"	m	class:OtherRegionsTable
_fine_eviction_start	heapRegionRemSet.hpp	/^  size_t        _fine_eviction_start;$/;"	m	class:OtherRegionsTable
_fine_eviction_stride	heapRegionRemSet.cpp	/^size_t OtherRegionsTable::_fine_eviction_stride = 0;$/;"	m	class:OtherRegionsTable	file:
_fine_eviction_stride	heapRegionRemSet.hpp	/^  static size_t _fine_eviction_stride;$/;"	m	class:OtherRegionsTable
_fine_grain_regions	heapRegionRemSet.hpp	/^  PerRegionTable** _fine_grain_regions;$/;"	m	class:OtherRegionsTable
_finger	g1ConcurrentMark.hpp	/^  HeapWord*                   _finger;$/;"	m	class:G1CMTask
_finger	g1ConcurrentMark.hpp	/^  HeapWord* volatile      _finger;            \/\/ The global finger, region aligned,$/;"	m	class:G1ConcurrentMark
_first_all_fine_prts	heapRegionRemSet.hpp	/^  PerRegionTable * _first_all_fine_prts;$/;"	m	class:OtherRegionsTable
_first_overflow_barrier_sync	g1ConcurrentMark.hpp	/^  WorkGangBarrierSync     _first_overflow_barrier_sync;$/;"	m	class:G1ConcurrentMark
_flushed	g1ParScanThreadState.hpp	/^  bool _flushed;$/;"	m	class:G1ParScanThreadStateSet
_free	g1RemSetSummary.cpp	/^  RegionTypeCounter _free;$/;"	m	class:HRRSStatsIter	file:
_free_count	g1HeapVerifier.cpp	/^  uint _free_count;$/;"	m	class:VerifyRegionListsClosure	file:
_free_ids	g1DirtyCardQueue.hpp	/^  G1FreeIdSet _free_ids;$/;"	m	class:G1DirtyCardQueueSet
_free_list	g1ConcurrentMark.hpp	/^  TaskQueueEntryChunk* volatile _free_list;  \/\/ Linked list of free chunks that can be allocated by users.$/;"	m	class:G1CMMarkStack
_free_list	heapRegionManager.hpp	/^  FreeRegionList _free_list;$/;"	m	class:HeapRegionManager
_free_list	heapRegionRemSet.cpp	/^PerRegionTable* volatile PerRegionTable::_free_list = NULL;$/;"	m	class:PerRegionTable	file:
_free_list	heapRegionRemSet.hpp	/^  static PerRegionTable* volatile _free_list;$/;"	m	class:PerRegionTable
_free_list	sparsePRT.hpp	/^  int  _free_list;$/;"	m	class:RSHashTable
_free_list_only	g1CollectedHeap.cpp	/^  bool _free_list_only;$/;"	m	class:RebuildRegionSetsClosure	file:
_free_region	sparsePRT.hpp	/^  int  _free_region;$/;"	m	class:RSHashTable
_free_region_list	g1CollectedHeap.cpp	/^  FreeRegionList* _free_region_list;$/;"	m	class:G1FreeHumongousRegionClosure	file:
_free_regions_at_end_of_collection	g1Policy.hpp	/^  uint _free_regions_at_end_of_collection;$/;"	m	class:G1Policy
_freed_bytes	g1CollectedHeap.cpp	/^  size_t _freed_bytes;$/;"	m	class:G1FreeHumongousRegionClosure	file:
_freed_bytes	g1ConcurrentMark.cpp	/^    size_t _freed_bytes;$/;"	m	class:G1ReclaimEmptyRegionsTask::G1ReclaimEmptyRegionsClosure	file:
_freed_regions	g1FullGCPrepareTask.hpp	/^  volatile bool     _freed_regions;$/;"	m	class:G1FullGCPrepareTask
_from_space_counters	g1MonitoringSupport.hpp	/^  HSpaceCounters*      _from_space_counters;$/;"	m	class:G1MonitoringSupport
_front_idx	g1CollectionSetCandidates.hpp	/^  uint _front_idx;$/;"	m	class:G1CollectionSetCandidates
_full_collection_counters	g1MonitoringSupport.hpp	/^  CollectorCounters*   _full_collection_counters;$/;"	m	class:G1MonitoringSupport
_full_collection_start_sec	g1Policy.hpp	/^  double _full_collection_start_sec;$/;"	m	class:G1Policy
_full_gc_memory_manager	g1MonitoringSupport.hpp	/^  GCMemoryManager _full_gc_memory_manager;$/;"	m	class:G1MonitoringSupport
_g1_ct	g1CollectedHeap.cpp	/^  G1CardTable* _g1_ct;$/;"	m	class:RedirtyLoggedCardTableEntryClosure	file:
_g1_heap	g1HeapTransition.hpp	/^  G1CollectedHeap* _g1_heap;$/;"	m	class:G1HeapTransition
_g1_young_gc_info	g1Trace.hpp	/^  G1YoungGCInfo _g1_young_gc_info;$/;"	m	class:G1NewTracer
_g1h	g1AllocRegion.cpp	/^G1CollectedHeap* G1AllocRegion::_g1h = NULL;$/;"	m	class:G1AllocRegion	file:
_g1h	g1AllocRegion.hpp	/^  static G1CollectedHeap* _g1h;$/;"	m	class:G1AllocRegion
_g1h	g1Allocator.hpp	/^  G1CollectedHeap* _g1h;$/;"	m	class:G1Allocator
_g1h	g1Allocator.hpp	/^  G1CollectedHeap* _g1h;$/;"	m	class:G1ArchiveAllocator
_g1h	g1Allocator.hpp	/^  G1CollectedHeap* _g1h;$/;"	m	class:G1PLABAllocator
_g1h	g1CardCounts.hpp	/^  G1CollectedHeap* _g1h;$/;"	m	class:G1CardCounts
_g1h	g1CodeBlobClosure.hpp	/^    G1CollectedHeap* _g1h;$/;"	m	class:G1CodeBlobClosure::HeapRegionGatheringOopClosure
_g1h	g1CollectedHeap.cpp	/^    G1CollectedHeap* _g1h;$/;"	m	class:G1FreeCollectionSetTask::FreeCSetClosure	file:
_g1h	g1CollectedHeap.cpp	/^    G1CollectedHeap* _g1h;$/;"	m	class:G1PrepareEvacuationTask::G1PrepareRegionsClosure	file:
_g1h	g1CollectedHeap.cpp	/^  G1CollectedHeap*          _g1h;$/;"	m	class:G1STWRefProcTaskExecutor	file:
_g1h	g1CollectedHeap.cpp	/^  G1CollectedHeap*         _g1h;$/;"	m	class:G1CopyingKeepAliveClosure	file:
_g1h	g1CollectedHeap.cpp	/^  G1CollectedHeap*  _g1h;$/;"	m	class:G1FreeCollectionSetTask	file:
_g1h	g1CollectedHeap.cpp	/^  G1CollectedHeap* _g1h;$/;"	m	class:G1EvacuateRegionsBaseTask	file:
_g1h	g1CollectedHeap.cpp	/^  G1CollectedHeap* _g1h;$/;"	m	class:G1PrepareEvacuationTask	file:
_g1h	g1CollectedHeap.cpp	/^  G1CollectedHeap* _g1h;$/;"	m	class:G1RedirtyLoggedCardsTask	file:
_g1h	g1CollectedHeap.cpp	/^  G1CollectedHeap* _g1h;$/;"	m	class:G1STWDrainQueueClosure	file:
_g1h	g1CollectedHeap.cpp	/^  G1CollectedHeap* _g1h;$/;"	m	class:G1STWRefProcTaskProxy	file:
_g1h	g1CollectedHeap.cpp	/^  G1CollectedHeap* _g1h;$/;"	m	class:RebuildStrongCodeRootClosure	file:
_g1h	g1CollectedHeap.cpp	/^  G1CollectedHeap* _g1h;$/;"	m	class:RedirtyLoggedCardTableEntryClosure	file:
_g1h	g1CollectedHeap.cpp	/^  G1CollectedHeap* _g1h;$/;"	m	class:RegisterNMethodOopClosure	file:
_g1h	g1CollectedHeap.cpp	/^  G1CollectedHeap* _g1h;$/;"	m	class:UnregisterNMethodOopClosure	file:
_g1h	g1CollectedHeap.cpp	/^  G1CollectedHeap*_g1h;$/;"	m	class:G1KeepAliveClosure	file:
_g1h	g1CollectedHeap.hpp	/^  G1CollectedHeap*              _g1h;$/;"	m	class:G1ParEvacuateFollowersClosure
_g1h	g1CollectedHeap.hpp	/^  G1CollectedHeap* _g1h;$/;"	m	class:G1STWIsAliveClosure
_g1h	g1CollectedHeap.hpp	/^  G1CollectedHeap* _g1h;$/;"	m	class:G1STWSubjectToDiscoveryClosure
_g1h	g1CollectionSet.hpp	/^  G1CollectedHeap* _g1h;$/;"	m	class:G1CollectionSet
_g1h	g1CollectionSetChooser.cpp	/^  G1CollectedHeap* _g1h;$/;"	m	class:G1BuildCandidateRegionsTask	file:
_g1h	g1ConcurrentMark.cpp	/^    G1CollectedHeap* _g1h;$/;"	m	class:G1ReclaimEmptyRegionsTask::G1ReclaimEmptyRegionsClosure	file:
_g1h	g1ConcurrentMark.cpp	/^    G1CollectedHeap* _g1h;$/;"	m	class:G1UpdateRemSetTrackingBeforeRebuildTask::G1UpdateRemSetTrackingBeforeRebuild	file:
_g1h	g1ConcurrentMark.cpp	/^  G1CollectedHeap*  _g1h;$/;"	m	class:G1CMRefProcTaskExecutor	file:
_g1h	g1ConcurrentMark.cpp	/^  G1CollectedHeap*  _g1h;$/;"	m	class:G1CMRefProcTaskProxy	file:
_g1h	g1ConcurrentMark.cpp	/^  G1CollectedHeap* _g1h;$/;"	m	class:G1CMSATBBufferClosure	file:
_g1h	g1ConcurrentMark.cpp	/^  G1CollectedHeap* _g1h;$/;"	m	class:G1ObjectCountIsAliveClosure	file:
_g1h	g1ConcurrentMark.cpp	/^  G1CollectedHeap* _g1h;$/;"	m	class:G1ReclaimEmptyRegionsTask	file:
_g1h	g1ConcurrentMark.cpp	/^  G1CollectedHeap* _g1h;$/;"	m	class:G1UpdateRemSetTrackingAfterRebuild	file:
_g1h	g1ConcurrentMark.cpp	/^  G1CollectedHeap* _g1h;$/;"	m	class:G1UpdateRemSetTrackingBeforeRebuildTask	file:
_g1h	g1ConcurrentMark.cpp	/^  G1CollectedHeap* _g1h;$/;"	m	class:VerifyNoCSetOops	file:
_g1h	g1ConcurrentMark.hpp	/^  G1CollectedHeap*            _g1h;$/;"	m	class:G1CMTask
_g1h	g1ConcurrentMark.hpp	/^  G1CollectedHeap*        _g1h;           \/\/ The heap$/;"	m	class:G1ConcurrentMark
_g1h	g1ConcurrentMark.hpp	/^  G1CollectedHeap* _g1h;$/;"	m	class:G1CMIsAliveClosure
_g1h	g1ConcurrentMark.hpp	/^  G1CollectedHeap* _g1h;$/;"	m	class:G1CMSubjectToDiscoveryClosure
_g1h	g1EvacFailure.cpp	/^  G1CollectedHeap* _g1h;$/;"	m	class:RemoveSelfForwardPtrHRClosure	file:
_g1h	g1EvacFailure.cpp	/^  G1CollectedHeap* _g1h;$/;"	m	class:RemoveSelfForwardPtrObjClosure	file:
_g1h	g1EvacFailure.cpp	/^  G1CollectedHeap* _g1h;$/;"	m	class:UpdateLogBuffersDeferred	file:
_g1h	g1EvacFailure.hpp	/^  G1CollectedHeap* _g1h;$/;"	m	class:G1ParRemoveSelfForwardPtrsTask
_g1h	g1FullGCOopClosures.hpp	/^  G1CollectedHeap* _g1h;$/;"	m	class:G1VerifyOopClosure
_g1h	g1FullGCPrepareTask.hpp	/^    G1CollectedHeap* _g1h;$/;"	m	class:G1FullGCPrepareTask::G1CalculatePointersClosure
_g1h	g1FullGCScope.hpp	/^  G1CollectedHeap*        _g1h;$/;"	m	class:G1FullGCScope
_g1h	g1HeapSizingPolicy.hpp	/^  const G1CollectedHeap* _g1h;$/;"	m	class:G1HeapSizingPolicy
_g1h	g1HeapVerifier.cpp	/^  G1CollectedHeap*  _g1h;$/;"	m	class:G1ParVerifyTask	file:
_g1h	g1HeapVerifier.cpp	/^  G1CollectedHeap* _g1h;$/;"	m	class:G1VerifyCodeRootOopClosure	file:
_g1h	g1HeapVerifier.cpp	/^  G1CollectedHeap* _g1h;$/;"	m	class:VerifyLivenessOopClosure	file:
_g1h	g1HeapVerifier.cpp	/^  G1CollectedHeap* _g1h;$/;"	m	class:VerifyObjsInRegionClosure	file:
_g1h	g1HeapVerifier.cpp	/^  G1CollectedHeap* _g1h;$/;"	m	class:VerifyRootsClosure	file:
_g1h	g1HeapVerifier.cpp	/^  G1CollectedHeap* _g1h;$/;"	m	class:YoungRefCounterClosure	file:
_g1h	g1HeapVerifier.hpp	/^  G1CollectedHeap* _g1h;$/;"	m	class:G1HeapVerifier
_g1h	g1HotCardCache.hpp	/^  G1CollectedHeap*  _g1h;$/;"	m	class:G1HotCardCache
_g1h	g1MonitoringSupport.hpp	/^  G1CollectedHeap* _g1h;$/;"	m	class:G1MonitoringSupport
_g1h	g1OopClosures.hpp	/^  G1CollectedHeap*   _g1h;$/;"	m	class:G1CMOopClosure
_g1h	g1OopClosures.hpp	/^  G1CollectedHeap* _g1h;$/;"	m	class:G1ConcurrentRefineOopClosure
_g1h	g1OopClosures.hpp	/^  G1CollectedHeap* _g1h;$/;"	m	class:G1ParCopyHelper
_g1h	g1OopClosures.hpp	/^  G1CollectedHeap* _g1h;$/;"	m	class:G1RebuildRemSetClosure
_g1h	g1OopClosures.hpp	/^  G1CollectedHeap* _g1h;$/;"	m	class:G1RootRegionScanClosure
_g1h	g1OopClosures.hpp	/^  G1CollectedHeap* _g1h;$/;"	m	class:G1ScanClosureBase
_g1h	g1OopClosures.hpp	/^  G1CollectedHeap* _g1h;$/;"	m	class:G1ScanRSForOptionalClosure
_g1h	g1ParScanThreadState.hpp	/^  G1CollectedHeap* _g1h;$/;"	m	class:G1ParScanThreadState
_g1h	g1ParScanThreadState.hpp	/^  G1CollectedHeap* _g1h;$/;"	m	class:G1ParScanThreadStateSet
_g1h	g1Policy.hpp	/^  G1CollectedHeap* _g1h;$/;"	m	class:G1Policy
_g1h	g1RemSet.cpp	/^    G1CollectedHeap* _g1h;$/;"	m	class:G1RemSetScanState::G1ClearCardTableTask	file:
_g1h	g1RemSet.cpp	/^  G1CollectedHeap* _g1h;$/;"	m	class:G1ScanHRForRegionClosure	file:
_g1h	g1RemSet.hpp	/^  G1CollectedHeap* _g1h;$/;"	m	class:G1RemSet
_g1h	g1RootProcessor.hpp	/^  G1CollectedHeap* _g1h;$/;"	m	class:G1RootProcessor
_g1h	g1SATBMarkQueueSet.cpp	/^  G1CollectedHeap* _g1h;$/;"	m	class:G1SATBMarkQueueFilterFn	file:
_g1h	g1SATBMarkQueueSet.hpp	/^  G1CollectedHeap* _g1h;$/;"	m	class:G1SATBMarkQueueSet
_g1h	heapRegion.cpp	/^  G1CollectedHeap* _g1h;$/;"	m	class:G1VerificationClosure	file:
_g1h	heapRegionRemSet.hpp	/^  G1CollectedHeap* _g1h;$/;"	m	class:OtherRegionsTable
_g1mm	g1CollectedHeap.hpp	/^  G1MonitoringSupport* _g1mm;$/;"	m	class:G1CollectedHeap
_g1mm	g1MemoryPool.hpp	/^  G1MonitoringSupport* _g1mm;$/;"	m	class:G1MemoryPoolSuper
_g1mm	g1MonitoringSupport.cpp	/^  G1MonitoringSupport* _g1mm;$/;"	m	class:G1GenerationCounters	file:
_g1p	g1RemSet.hpp	/^  G1Policy*              _g1p;$/;"	m	class:G1RemSet
_g1rs	g1DirtyCardQueue.cpp	/^  G1RemSet* const _g1rs;$/;"	m	class:G1RefineBufferedCards	file:
_gc_efficiency	heapRegion.hpp	/^  double _gc_efficiency;$/;"	m	class:HeapRegion
_gc_id	g1FullGCScope.hpp	/^  GCIdMark                _gc_id;$/;"	m	class:G1FullGCScope
_gc_id	g1VMOperations.hpp	/^  uint         _gc_id;$/;"	m	class:VM_G1Concurrent
_gc_par_phases	g1GCPhaseTimes.hpp	/^  WorkerDataArray<double>* _gc_par_phases[GCParPhasesSentinel];$/;"	m	class:G1GCPhaseTimes
_gc_pause_time_ms	g1GCPhaseTimes.hpp	/^  double _gc_pause_time_ms;$/;"	m	class:G1GCPhaseTimes
_gc_start_counter	g1GCPhaseTimes.hpp	/^  jlong _gc_start_counter;$/;"	m	class:G1GCPhaseTimes
_gc_succeeded	g1VMOperations.hpp	/^  bool _gc_succeeded;$/;"	m	class:VM_G1CollectForAllocation
_gc_succeeded	g1VMOperations.hpp	/^  bool _gc_succeeded;$/;"	m	class:VM_G1CollectFull
_gc_succeeded	g1VMOperations.hpp	/^  bool _gc_succeeded;$/;"	m	class:VM_G1TryInitiateConcMark
_gc_timer_cm	g1ConcurrentMark.hpp	/^  ConcurrentGCTimer*      _gc_timer_cm;$/;"	m	class:G1ConcurrentMark
_gc_timer_stw	g1CollectedHeap.hpp	/^  STWGCTimer* _gc_timer_stw;$/;"	m	class:G1CollectedHeap
_gc_tracer_cm	g1ConcurrentMark.hpp	/^  G1OldTracer*            _gc_tracer_cm;$/;"	m	class:G1ConcurrentMark
_gc_tracer_stw	g1CollectedHeap.hpp	/^  G1NewTracer* _gc_tracer_stw;$/;"	m	class:G1CollectedHeap
_global_mark_stack	g1ConcurrentMark.hpp	/^  G1CMMarkStack           _global_mark_stack; \/\/ Grey objects behind global finger$/;"	m	class:G1ConcurrentMark
_green_zone	g1ConcurrentRefine.hpp	/^  size_t _green_zone;$/;"	m	class:G1ConcurrentRefine
_has_aborted	g1ConcurrentMark.hpp	/^  bool                        _has_aborted;$/;"	m	class:G1CMTask
_has_aborted	g1ConcurrentMark.hpp	/^  volatile bool           _has_aborted;$/;"	m	class:G1ConcurrentMark
_has_coarse_entries	heapRegionRemSet.hpp	/^  bool volatile _has_coarse_entries;$/;"	m	class:OtherRegionsTable
_has_holes	g1HeapVerifier.cpp	/^  bool _has_holes;$/;"	m	class:VerifyReadyForArchivingRegionClosure	file:
_has_humongous	g1HeapVerifier.cpp	/^  bool _has_humongous;$/;"	m	class:VerifyReadyForArchivingRegionClosure	file:
_has_humongous_reclaim_candidates	g1CollectedHeap.hpp	/^  bool _has_humongous_reclaim_candidates;$/;"	m	class:G1CollectedHeap
_has_oops_in_region	heapRegion.cpp	/^  bool _has_oops_in_region;$/;"	m	class:VerifyStrongCodeRootOopClosure	file:
_has_overflown	g1ConcurrentMark.hpp	/^  volatile bool           _has_overflown;$/;"	m	class:G1ConcurrentMark
_has_timed_out	g1ConcurrentMark.hpp	/^  bool                        _has_timed_out;$/;"	m	class:G1CMTask
_has_unexpected_holes	g1HeapVerifier.cpp	/^  bool _has_unexpected_holes;$/;"	m	class:VerifyReadyForArchivingRegionClosure	file:
_head	g1BufferNodeList.hpp	/^  BufferNode* _head;            \/\/ First node in list or NULL if empty.$/;"	m	struct:G1BufferNodeList
_head	g1DirtyCardQueue.hpp	/^      BufferNode* volatile _head;$/;"	m	class:G1DirtyCardQueueSet::PausedBuffers::PausedList
_head	g1DirtyCardQueue.hpp	/^    BufferNode* _head;$/;"	m	struct:G1DirtyCardQueueSet::HeadTail
_head	g1DirtyCardQueue.hpp	/^    BufferNode* volatile _head;$/;"	m	class:G1DirtyCardQueueSet::Queue
_head	g1FreeIdSet.hpp	/^  volatile uintx _head;$/;"	m	class:G1FreeIdSet
_head	heapRegionSet.hpp	/^  HeapRegion* _head;$/;"	m	class:FreeRegionList
_head_index	g1MMUTracker.hpp	/^  int                   _head_index;$/;"	m	class:G1MMUTrackerQueue
_head_index_mask	g1FreeIdSet.hpp	/^  uintx _head_index_mask;$/;"	m	class:G1FreeIdSet
_heap	g1CollectedHeap.cpp	/^  G1CollectedHeap*  _heap;$/;"	m	class:G1ParallelObjectIterator	file:
_heap	g1ConcurrentMark.hpp	/^  MemRegion const         _heap;$/;"	m	class:G1ConcurrentMark
_heap	g1FullCollector.hpp	/^  G1CollectedHeap*          _heap;$/;"	m	class:G1FullCollector
_heap	g1StringDedupStat.hpp	/^  G1CollectedHeap* const _heap;$/;"	m	class:G1StringDedupStat
_heap_mapper	heapRegionManager.hpp	/^  G1RegionToSpaceMapper* _heap_mapper;$/;"	m	class:HeapRegionManager
_heap_region_indices	g1CollectionSet.cpp	/^  uint* _heap_region_indices;$/;"	m	class:G1VerifyYoungCSetIndicesClosure	file:
_heap_reserve_percent	g1IHOPControl.hpp	/^  size_t _heap_reserve_percent; \/\/ Percentage of maximum heap capacity we should avoid to touch$/;"	m	class:G1AdaptiveIHOPControl
_heap_sizing_policy	g1CollectedHeap.hpp	/^  G1HeapSizingPolicy* _heap_sizing_policy;$/;"	m	class:G1CollectedHeap
_heap_transition	g1FullGCScope.hpp	/^  G1HeapTransition        _heap_transition;$/;"	m	class:G1FullGCScope
_heap_waste_percent	g1IHOPControl.hpp	/^  size_t _heap_waste_percent;   \/\/ Percentage of free heap that should be considered as waste.$/;"	m	class:G1AdaptiveIHOPControl
_high_boundary	g1PageBasedVirtualSpace.hpp	/^  char* _high_boundary;$/;"	m	class:G1PageBasedVirtualSpace
_hit	g1NUMAStats.hpp	/^    size_t _hit;$/;"	m	struct:G1NUMAStats::Stat
_holder	g1ConcurrentMark.hpp	/^  void* _holder;$/;"	m	class:G1TaskQueueEntry
_hot_cache	g1HotCardCache.hpp	/^  CardValue** _hot_cache;$/;"	m	class:G1HotCardCache
_hot_cache_idx	g1HotCardCache.hpp	/^  volatile size_t _hot_cache_idx;$/;"	m	class:G1HotCardCache
_hot_cache_par_chunk_size	g1HotCardCache.hpp	/^  size_t            _hot_cache_par_chunk_size;$/;"	m	class:G1HotCardCache
_hot_cache_par_claimed_idx	g1HotCardCache.hpp	/^  volatile size_t _hot_cache_par_claimed_idx;$/;"	m	class:G1HotCardCache
_hot_cache_size	g1HotCardCache.hpp	/^  size_t            _hot_cache_size;$/;"	m	class:G1HotCardCache
_hot_card_cache	g1CollectedHeap.hpp	/^  G1HotCardCache* _hot_card_cache;$/;"	m	class:G1CollectedHeap
_hot_card_cache	g1RemSet.hpp	/^  G1HotCardCache*        _hot_card_cache;$/;"	m	class:G1RemSet
_hr	g1BlockOffsetTable.cpp	/^  _hr(hr)$/;"	f
_hr	g1BlockOffsetTable.hpp	/^  HeapRegion* _hr;$/;"	m	class:G1BlockOffsetTablePart
_hr	g1CodeCacheRemSet.cpp	/^    HeapRegion* _hr;$/;"	m	class:CleanCallback::PointsIntoHRDetectionClosure	file:
_hr	g1EvacFailure.cpp	/^  HeapRegion* _hr;$/;"	m	class:RemoveSelfForwardPtrObjClosure	file:
_hr	g1HeapVerifier.cpp	/^  HeapRegion *_hr;$/;"	m	class:VerifyObjsInRegionClosure	file:
_hr	g1HeapVerifier.cpp	/^  HeapRegion* _hr;$/;"	m	class:VerifyArchiveOopClosure	file:
_hr	g1HeapVerifier.cpp	/^  HeapRegion* _hr;$/;"	m	class:VerifyObjectInArchiveRegionClosure	file:
_hr	heapRegion.cpp	/^  const HeapRegion* _hr;$/;"	m	class:VerifyStrongCodeRootCodeBlobClosure	file:
_hr	heapRegion.cpp	/^  const HeapRegion* _hr;$/;"	m	class:VerifyStrongCodeRootOopClosure	file:
_hr	heapRegionRemSet.hpp	/^  HeapRegion*     _hr;$/;"	m	class:PerRegionTable
_hr	heapRegionRemSet.hpp	/^  HeapRegion* _hr;$/;"	m	class:HeapRegionRemSet
_hr_claimer	g1ConcurrentMark.cpp	/^  HeapRegionClaimer _hr_claimer;$/;"	m	class:G1ClearBitMapTask	file:
_hr_claimer	g1RemSet.cpp	/^  HeapRegionClaimer _hr_claimer;$/;"	m	class:G1MergeHeapRootsTask	file:
_hr_claimer	g1RemSet.cpp	/^  HeapRegionClaimer _hr_claimer;$/;"	m	class:G1RebuildRemSetTask	file:
_hr_printer	g1CollectedHeap.cpp	/^  G1HRPrinter* _hr_printer;$/;"	m	class:G1PrintCollectionSetClosure	file:
_hr_printer	g1CollectedHeap.cpp	/^  G1HRPrinter* _hr_printer;$/;"	m	class:PostCompactionPrinterClosure	file:
_hr_printer	g1CollectedHeap.hpp	/^  G1HRPrinter _hr_printer;$/;"	m	class:G1CollectedHeap
_hrclaimer	g1CollectionSetChooser.cpp	/^  HeapRegionClaimer _hrclaimer;$/;"	m	class:G1BuildCandidateRegionsTask	file:
_hrclaimer	g1ConcurrentMark.cpp	/^  HeapRegionClaimer _hrclaimer;$/;"	m	class:G1ReclaimEmptyRegionsTask	file:
_hrclaimer	g1ConcurrentMark.cpp	/^  HeapRegionClaimer _hrclaimer;$/;"	m	class:G1UpdateRemSetTrackingBeforeRebuildTask	file:
_hrclaimer	g1EvacFailure.hpp	/^  HeapRegionClaimer _hrclaimer;$/;"	m	class:G1ParRemoveSelfForwardPtrsTask
_hrclaimer	g1FullGCAdjustTask.hpp	/^  HeapRegionClaimer        _hrclaimer;$/;"	m	class:G1FullGCAdjustTask
_hrclaimer	g1FullGCPrepareTask.hpp	/^  HeapRegionClaimer _hrclaimer;$/;"	m	class:G1FullGCPrepareTask
_hrclaimer	g1HeapVerifier.cpp	/^  HeapRegionClaimer _hrclaimer;$/;"	m	class:G1ParVerifyTask	file:
_hrm	g1CollectedHeap.cpp	/^  HeapRegionManager* _hrm;$/;"	m	class:RebuildRegionSetsClosure	file:
_hrm	g1CollectedHeap.hpp	/^  HeapRegionManager* _hrm;$/;"	m	class:G1CollectedHeap
_hrm	g1HeapVerifier.cpp	/^  HeapRegionManager* _hrm;$/;"	m	class:VerifyRegionListsClosure	file:
_hrm	heapRegionManager.cpp	/^  HeapRegionManager* _hrm;$/;"	m	class:G1RebuildFreeListTask	file:
_hrm_index	heapRegion.hpp	/^  const uint _hrm_index;$/;"	m	class:HeapRegion
_humongous	g1RemSetSummary.cpp	/^  RegionTypeCounter _humongous;$/;"	m	class:HRRSStatsIter	file:
_humongous_bytes_after_last_gc	g1OldGenAllocationTracker.hpp	/^  size_t _humongous_bytes_after_last_gc;$/;"	m	class:G1OldGenAllocationTracker
_humongous_candidates	g1CollectedHeap.cpp	/^  volatile size_t _humongous_candidates;$/;"	m	class:G1PrepareEvacuationTask	file:
_humongous_count	g1HeapVerifier.cpp	/^  uint _humongous_count;$/;"	m	class:VerifyRegionListsClosure	file:
_humongous_length	g1HeapTransition.hpp	/^    size_t _humongous_length;$/;"	m	struct:G1HeapTransition::Data
_humongous_object_threshold_in_words	g1CollectedHeap.cpp	/^size_t G1CollectedHeap::_humongous_object_threshold_in_words = 0;$/;"	m	class:G1CollectedHeap	file:
_humongous_object_threshold_in_words	g1CollectedHeap.hpp	/^  static size_t _humongous_object_threshold_in_words;$/;"	m	class:G1CollectedHeap
_humongous_objects_reclaimed	g1CollectedHeap.cpp	/^  uint _humongous_objects_reclaimed;$/;"	m	class:G1FreeHumongousRegionClosure	file:
_humongous_reclaim_candidates	g1CollectedHeap.hpp	/^  HumongousReclaimCandidates _humongous_reclaim_candidates;$/;"	m	class:G1CollectedHeap
_humongous_region_count	g1HeapTransition.cpp	/^  size_t _humongous_region_count;$/;"	m	struct:DetailedUsage	file:
_humongous_regions_reclaimed	g1CollectedHeap.cpp	/^  uint _humongous_regions_reclaimed;$/;"	m	class:G1FreeHumongousRegionClosure	file:
_humongous_regions_removed	g1ConcurrentMark.cpp	/^    uint _humongous_regions_removed;$/;"	m	class:G1ReclaimEmptyRegionsTask::G1ReclaimEmptyRegionsClosure	file:
_humongous_regions_removed	g1FullGCPrepareTask.hpp	/^    uint _humongous_regions_removed;$/;"	m	class:G1FullGCPrepareTask::G1CalculatePointersClosure
_humongous_set	g1CollectedHeap.hpp	/^  HeapRegionSet _humongous_set;$/;"	m	class:G1CollectedHeap
_humongous_set	g1HeapVerifier.cpp	/^  HeapRegionSet*   _humongous_set;$/;"	m	class:VerifyRegionListsClosure	file:
_humongous_start_region	heapRegion.hpp	/^  HeapRegion* _humongous_start_region;$/;"	m	class:HeapRegion
_humongous_total	g1CollectedHeap.cpp	/^  volatile size_t _humongous_total;$/;"	m	class:G1PrepareEvacuationTask	file:
_humongous_used	g1HeapTransition.cpp	/^  size_t _humongous_used;$/;"	m	struct:DetailedUsage	file:
_hwm	g1ConcurrentMark.hpp	/^  volatile size_t _hwm;          \/\/ High water mark within the reserved space.$/;"	m	class:G1CMMarkStack
_ihop_control	g1Policy.hpp	/^  G1IHOPControl* _ihop_control;$/;"	m	class:G1Policy
_in_concurrent_start_gc	g1CollectorState.hpp	/^  volatile bool _in_concurrent_start_gc;$/;"	m	class:G1CollectorState
_in_full_gc	g1CollectorState.hpp	/^  bool _in_full_gc;$/;"	m	class:G1CollectorState
_in_young_gc_before_mixed	g1CollectorState.hpp	/^  bool _in_young_gc_before_mixed;$/;"	m	class:G1CollectorState
_in_young_only_phase	g1CollectorState.hpp	/^  bool _in_young_only_phase;$/;"	m	class:G1CollectorState
_inc_build_state	g1CollectionSet.hpp	/^  CSetBuildType _inc_build_state;$/;"	m	class:G1CollectionSet
_inc_bytes_used_before	g1CollectionSet.hpp	/^  size_t _inc_bytes_used_before;$/;"	m	class:G1CollectionSet
_inc_collection_set_stats	g1CollectionSet.hpp	/^  IncCollectionSetRegionStat* _inc_collection_set_stats;$/;"	m	class:G1CollectionSet
_inc_part_start	g1CollectionSet.hpp	/^  size_t _inc_part_start;$/;"	m	class:G1CollectionSet
_inc_predicted_non_copy_time_ms	g1CollectionSet.hpp	/^  double _inc_predicted_non_copy_time_ms;$/;"	m	class:G1CollectionSet
_inc_predicted_non_copy_time_ms_diff	g1CollectionSet.hpp	/^  double _inc_predicted_non_copy_time_ms_diff;$/;"	m	class:G1CollectionSet
_inc_recorded_rs_length	g1CollectionSet.hpp	/^  size_t _inc_recorded_rs_length;$/;"	m	class:G1CollectionSet
_inc_recorded_rs_length_diff	g1CollectionSet.hpp	/^  size_t _inc_recorded_rs_length_diff;$/;"	m	class:G1CollectionSet
_incremental_collection_counters	g1MonitoringSupport.hpp	/^  CollectorCounters*   _incremental_collection_counters;$/;"	m	class:G1MonitoringSupport
_incremental_memory_manager	g1MonitoringSupport.hpp	/^  GCMemoryManager _incremental_memory_manager;$/;"	m	class:G1MonitoringSupport
_index	g1SharedDirtyCardQueue.hpp	/^  size_t _index;$/;"	m	class:G1SharedDirtyCardQueue
_index_in_opt_cset	heapRegion.hpp	/^  uint _index_in_opt_cset;$/;"	m	class:HeapRegion
_info	c1/g1BarrierSetC1.hpp	/^  CodeEmitInfo* _info;$/;"	m	class:G1PreBarrierStub
_info	g1ConcurrentMark.cpp	/^  int _info;$/;"	m	class:VerifyNoCSetOops	file:
_init_times	g1ConcurrentMark.hpp	/^  NumberSeq _init_times;$/;"	m	class:G1ConcurrentMark
_initial_evacuation	g1RemSet.cpp	/^  bool _initial_evacuation;$/;"	m	class:G1MergeHeapRootsTask	file:
_initial_ihop_percent	g1IHOPControl.hpp	/^  double _initial_ihop_percent;$/;"	m	class:G1IHOPControl
_initiate_conc_mark_if_possible	g1CollectorState.hpp	/^  volatile bool _initiate_conc_mark_if_possible;$/;"	m	class:G1CollectorState
_inst	g1NUMA.cpp	/^G1NUMA* G1NUMA::_inst = NULL;$/;"	m	class:G1NUMA	file:
_inst	g1NUMA.hpp	/^  static G1NUMA* _inst;$/;"	m	class:G1NUMA
_is_alive	g1CollectedHeap.cpp	/^  BoolObjectClosure* _is_alive;$/;"	m	class:G1StringDedupCleaningTask	file:
_is_alive	g1FullCollector.hpp	/^  G1IsAliveClosure          _is_alive;$/;"	m	class:G1FullCollector
_is_alive_closure_cm	g1CollectedHeap.hpp	/^  G1CMIsAliveClosure _is_alive_closure_cm;$/;"	m	class:G1CollectedHeap
_is_alive_closure_stw	g1CollectedHeap.hpp	/^  G1STWIsAliveClosure _is_alive_closure_stw;$/;"	m	class:G1CollectedHeap
_is_alive_mutator	g1FullCollector.hpp	/^  ReferenceProcessorIsAliveMutator _is_alive_mutator;$/;"	m	class:G1FullCollector
_is_complete	heapRegion.hpp	/^  bool _is_complete;$/;"	m	class:HeapRegionClosure
_is_serial	g1ConcurrentMark.cpp	/^  bool              _is_serial;$/;"	m	class:G1CMDrainMarkingStackClosure	file:
_is_serial	g1ConcurrentMark.cpp	/^  bool              _is_serial;$/;"	m	class:G1CMKeepAliveAndDrainClosure	file:
_is_subject_mutator	g1FullCollector.hpp	/^  ReferenceProcessorSubjectToDiscoveryMutator _is_subject_mutator;$/;"	m	class:G1FullCollector
_is_subject_to_discovery_cm	g1CollectedHeap.hpp	/^  G1CMSubjectToDiscoveryClosure _is_subject_to_discovery_cm;$/;"	m	class:G1CollectedHeap
_is_subject_to_discovery_stw	g1CollectedHeap.hpp	/^  G1STWSubjectToDiscoveryClosure _is_subject_to_discovery_stw;$/;"	m	class:G1CollectedHeap
_jvmci_cleaning_task	g1ParallelCleaning.hpp	/^  JVMCICleaningTask       _jvmci_cleaning_task;$/;"	m	class:G1ParallelCleaningTask
_keep_alive	g1CollectedHeap.cpp	/^  OopClosure* _keep_alive;$/;"	m	class:G1StringDedupCleaningTask	file:
_klass_cleaning_task	g1ParallelCleaning.cpp	/^  _klass_cleaning_task() {$/;"	f
_klass_cleaning_task	g1ParallelCleaning.hpp	/^  KlassCleaningTask       _klass_cleaning_task;$/;"	m	class:G1ParallelCleaningTask
_last	heapRegionSet.hpp	/^  HeapRegion* _last;$/;"	m	class:FreeRegionList
_last_all_fine_prts	heapRegionRemSet.hpp	/^  PerRegionTable * _last_all_fine_prts;$/;"	m	class:OtherRegionsTable
_last_allocation_time_s	g1IHOPControl.hpp	/^  double _last_allocation_time_s;$/;"	m	class:G1IHOPControl
_last_enqueued_card	g1EvacFailure.cpp	/^  size_t _last_enqueued_card;$/;"	m	class:UpdateLogBuffersDeferred	file:
_last_enqueued_card	g1ParScanThreadState.hpp	/^  size_t _last_enqueued_card;$/;"	m	class:G1ParScanThreadState
_last_forwarded_object_end	g1EvacFailure.cpp	/^  HeapWord* _last_forwarded_object_end;$/;"	m	class:RemoveSelfForwardPtrObjClosure	file:
_last_marking_length_s	g1IHOPControl.hpp	/^  double _last_marking_length_s;$/;"	m	class:G1StaticIHOPControl
_last_period_old_gen_bytes	g1OldGenAllocationTracker.hpp	/^  size_t _last_period_old_gen_bytes;$/;"	m	class:G1OldGenAllocationTracker
_last_period_old_gen_growth	g1OldGenAllocationTracker.hpp	/^  size_t _last_period_old_gen_growth;$/;"	m	class:G1OldGenAllocationTracker
_last_periodic_gc_attempt_s	g1ServiceThread.hpp	/^  double _last_periodic_gc_attempt_s;$/;"	m	class:G1ServiceThread
_last_pred	g1SurvRateGroup.hpp	/^  double  _last_pred;$/;"	m	class:G1SurvRateGroup
_last_unrestrained_young_size	g1IHOPControl.hpp	/^  size_t _last_unrestrained_young_size;$/;"	m	class:G1AdaptiveIHOPControl
_len_node_id_to_index_map	g1NUMA.hpp	/^  int _len_node_id_to_index_map;$/;"	m	class:G1NUMA
_length	g1BiasedArray.hpp	/^  size_t _length;         \/\/ the length of the array$/;"	m	class:G1BiasedMappedArrayBase
_length	g1CodeCacheRemSet.hpp	/^  size_t _length;$/;"	m	class:G1CodeRootSet
_length	g1EdenRegions.hpp	/^  int    _length;$/;"	m	class:G1EdenRegions
_length	heapRegionSet.hpp	/^  uint _length;$/;"	m	class:HeapRegionSetBase
_length_of_node	heapRegionSet.hpp	/^    uint*   _length_of_node;$/;"	m	class:FreeRegionList::NodeInfo
_list	g1RedirtyCardsQueue.hpp	/^  BufferNode::Stack _list;$/;"	m	class:G1RedirtyCardsQueueSet
_list	heapRegionSet.hpp	/^  FreeRegionList* _list;$/;"	m	class:FreeRegionListIterator
_listener	g1CardCounts.hpp	/^  G1CardCountsMappingChangedListener _listener;$/;"	m	class:G1CardCounts
_listener	g1CardTable.hpp	/^  G1CardTableChangedListener _listener;$/;"	m	class:G1CardTable
_listener	g1CollectedHeap.hpp	/^  G1RegionMappingChangedListener _listener;$/;"	m	class:G1CollectedHeap
_listener	g1ConcurrentMarkBitMap.hpp	/^  G1CMBitMapMappingChangedListener _listener;$/;"	m	class:G1CMBitMap
_listener	g1RegionToSpaceMapper.hpp	/^  G1MappingChangedListener* _listener;$/;"	m	class:G1RegionToSpaceMapper
_live_bytes	g1HeapVerifier.cpp	/^  size_t _live_bytes;$/;"	m	class:VerifyObjsInRegionClosure	file:
_live_words	g1RegionMarkStatsCache.hpp	/^  size_t _live_words;$/;"	m	struct:G1RegionMarkStats
_local_cleanup_list	g1ConcurrentMark.cpp	/^    FreeRegionList* _local_cleanup_list;$/;"	m	class:G1ReclaimEmptyRegionsTask::G1ReclaimEmptyRegionsClosure	file:
_local_qset	g1RedirtyCardsQueue.hpp	/^  LocalQSet _local_qset;$/;"	m	class:G1RedirtyCardsQueueBase
_log_buffer_cl	g1EvacFailure.cpp	/^  UpdateLogBuffersDeferred _log_buffer_cl;$/;"	m	class:RemoveSelfForwardPtrHRClosure	file:
_log_buffer_cl	g1EvacFailure.cpp	/^  UpdateLogBuffersDeferred* _log_buffer_cl;$/;"	m	class:RemoveSelfForwardPtrObjClosure	file:
_log_scan_chunks_per_region	g1RemSet.cpp	/^  uint8_t _log_scan_chunks_per_region;  \/\/ Log of number of chunks per region.$/;"	m	class:G1RemSetScanState	file:
_long_term_pause_time_ratio	g1Analytics.hpp	/^  double _long_term_pause_time_ratio;$/;"	m	class:G1Analytics
_low_boundary	g1PageBasedVirtualSpace.hpp	/^  char* _low_boundary;$/;"	m	class:G1PageBasedVirtualSpace
_ls	g1NUMA.hpp	/^  LogStream* _ls;$/;"	m	class:G1NodeIndexCheckClosure
_m	heapRegionRemSet.hpp	/^  Mutex _m;$/;"	m	class:HeapRegionRemSet
_m	heapRegionRemSet.hpp	/^  Mutex*           _m;$/;"	m	class:OtherRegionsTable
_manager	g1HeterogeneousHeapPolicy.hpp	/^  HeterogeneousHeapRegionManager* _manager;$/;"	m	class:G1HeterogeneousHeapPolicy
_mark_bitmap_1	g1ConcurrentMark.hpp	/^  G1CMBitMap              _mark_bitmap_1;$/;"	m	class:G1ConcurrentMark
_mark_bitmap_2	g1ConcurrentMark.hpp	/^  G1CMBitMap              _mark_bitmap_2;$/;"	m	class:G1ConcurrentMark
_mark_cleanup_start_sec	g1Policy.hpp	/^  double _mark_cleanup_start_sec;$/;"	m	class:G1Policy
_mark_closure	g1FullGCMarker.hpp	/^  G1MarkAndPushClosure _mark_closure;$/;"	m	class:G1FullGCMarker
_mark_or_rebuild_in_progress	g1CollectorState.hpp	/^  bool _mark_or_rebuild_in_progress;$/;"	m	class:G1CollectorState
_mark_remark_start_sec	g1Policy.hpp	/^  double _mark_remark_start_sec;$/;"	m	class:G1Policy
_mark_stats_cache	g1ConcurrentMark.hpp	/^  G1RegionMarkStatsCache      _mark_stats_cache;$/;"	m	class:G1CMTask
_marked_bytes	g1EvacFailure.cpp	/^  size_t _marked_bytes;$/;"	m	class:RemoveSelfForwardPtrObjClosure	file:
_marker	g1FullGCOopClosures.hpp	/^  G1FullGCMarker* _marker;$/;"	m	class:G1FollowStackClosure
_marker	g1FullGCOopClosures.hpp	/^  G1FullGCMarker* _marker;$/;"	m	class:G1FullKeepAliveClosure
_marker	g1FullGCOopClosures.hpp	/^  G1FullGCMarker* _marker;$/;"	m	class:G1MarkAndPushClosure
_markers	g1FullCollector.hpp	/^  G1FullGCMarker**          _markers;$/;"	m	class:G1FullCollector
_marking_oc	g1CodeBlobClosure.hpp	/^  MarkingOopClosure _marking_oc;$/;"	m	class:G1CodeBlobClosure
_marking_step_diff_ms	g1ConcurrentMark.hpp	/^  TruncatedSeq                _marking_step_diff_ms;$/;"	m	class:G1CMTask
_marking_times_s	g1IHOPControl.hpp	/^  TruncatedSeq _marking_times_s;$/;"	m	class:G1AdaptiveIHOPControl
_matched	g1NUMA.hpp	/^  uint* _matched;$/;"	m	class:G1NodeIndexCheckClosure
_max	g1Allocator.hpp	/^  HeapWord* _max;$/;"	m	class:G1ArchiveAllocator
_max_cache_size	g1StringDedupQueue.cpp	/^const size_t        G1StringDedupQueue::_max_cache_size = 0; \/\/ Max cache size per queue$/;"	m	class:G1StringDedupQueue	file:
_max_cache_size	g1StringDedupQueue.hpp	/^  static const size_t        _max_cache_size;$/;"	m	class:G1StringDedupQueue
_max_cards	g1DirtyCardQueue.hpp	/^  size_t _max_cards;$/;"	m	class:G1DirtyCardQueueSet
_max_chunk_capacity	g1ConcurrentMark.hpp	/^  size_t _max_chunk_capacity;    \/\/ Maximum number of TaskQueueEntryChunk elements on the stack.$/;"	m	class:G1CMMarkStack
_max_code_root_mem_sz	g1RemSetSummary.cpp	/^  size_t _max_code_root_mem_sz;$/;"	m	class:HRRSStatsIter	file:
_max_code_root_mem_sz_region	g1RemSetSummary.cpp	/^  HeapRegion* _max_code_root_mem_sz_region;$/;"	m	class:HRRSStatsIter	file:
_max_concurrent_workers	g1ConcurrentMark.hpp	/^  uint      _max_concurrent_workers; \/\/ Maximum number of marking worker threads$/;"	m	class:G1ConcurrentMark
_max_desired_young_length	g1YoungGenSizer.hpp	/^  uint _max_desired_young_length;$/;"	m	class:G1YoungGenSizer
_max_dram_regions	heterogeneousHeapRegionManager.hpp	/^  uint _max_dram_regions;$/;"	m	class:HeterogeneousHeapRegionManager
_max_fine_entries	heapRegionRemSet.cpp	/^size_t OtherRegionsTable::_max_fine_entries = 0;$/;"	m	class:OtherRegionsTable	file:
_max_fine_entries	heapRegionRemSet.hpp	/^  static size_t _max_fine_entries;$/;"	m	class:OtherRegionsTable
_max_gc_threads	g1GCPhaseTimes.hpp	/^  uint _max_gc_threads;$/;"	m	class:G1GCPhaseTimes
_max_gc_time	g1MMUTracker.hpp	/^  double          _max_gc_time; \/\/ this is per time slice$/;"	m	class:G1MMUTracker
_max_num_tasks	g1ConcurrentMark.hpp	/^  uint                    _max_num_tasks;    \/\/ Maximum number of marking tasks$/;"	m	class:G1ConcurrentMark
_max_nvdimm_regions	heterogeneousHeapRegionManager.hpp	/^  uint _max_nvdimm_regions;$/;"	m	class:HeterogeneousHeapRegionManager
_max_regions	g1ConcurrentMark.hpp	/^  size_t const _max_regions;$/;"	m	class:G1CMRootMemRegions
_max_regions	g1FromCardCache.cpp	/^uint        G1FromCardCache::_max_regions = 0;$/;"	m	class:G1FromCardCache	file:
_max_regions	g1FromCardCache.hpp	/^  static uint _max_regions;$/;"	m	class:G1FromCardCache
_max_regions	g1RemSet.cpp	/^    size_t _max_regions;$/;"	m	class:G1RemSetScanState::G1DirtyRegions	file:
_max_regions	g1RemSet.cpp	/^  size_t _max_regions;$/;"	m	class:G1RemSetScanState	file:
_max_regions	heterogeneousHeapRegionManager.hpp	/^  const uint _max_regions;$/;"	m	class:HeterogeneousHeapRegionManager
_max_rs_mem_sz	g1RemSetSummary.cpp	/^  size_t _max_rs_mem_sz;$/;"	m	class:HRRSStatsIter	file:
_max_rs_mem_sz_region	g1RemSetSummary.cpp	/^  HeapRegion* _max_rs_mem_sz_region;$/;"	m	class:HRRSStatsIter	file:
_max_size	g1CollectionSetChooser.cpp	/^    uint const _max_size;$/;"	m	class:G1BuildCandidateRegionsTask::G1BuildCandidateArray	file:
_max_size	g1StringDedupQueue.cpp	/^const size_t        G1StringDedupQueue::_max_size = 1000000; \/\/ Max number of elements per queue$/;"	m	class:G1StringDedupQueue	file:
_max_size	g1StringDedupQueue.hpp	/^  static const size_t        _max_size;$/;"	m	class:G1StringDedupQueue
_max_survivor_regions	g1Policy.hpp	/^  uint _max_survivor_regions;$/;"	m	class:G1Policy
_max_workers	g1FromCardCache.cpp	/^uint   G1FromCardCache::_max_workers = 0;$/;"	m	class:G1FromCardCache	file:
_max_workers	g1FromCardCache.hpp	/^  static uint _max_workers;$/;"	m	class:G1FromCardCache
_max_young_length	g1HeterogeneousHeapYoungGenSizer.hpp	/^  uint _max_young_length;$/;"	m	class:G1HeterogeneousHeapYoungGenSizer
_memory_type	g1RegionToSpaceMapper.hpp	/^  MemoryType _memory_type;$/;"	m	class:G1RegionToSpaceMapper
_merged_coarse	g1RemSet.cpp	/^    uint _merged_coarse;$/;"	m	class:G1MergeHeapRootsTask::G1MergeCardSetClosure	file:
_merged_fine	g1RemSet.cpp	/^    uint _merged_fine;$/;"	m	class:G1MergeHeapRootsTask::G1MergeCardSetClosure	file:
_merged_sparse	g1RemSet.cpp	/^    uint _merged_sparse;$/;"	m	class:G1MergeHeapRootsTask::G1MergeCardSetClosure	file:
_message	g1VMOperations.hpp	/^  const char*  _message;$/;"	m	class:VM_G1Concurrent
_meta_sizes	g1HeapTransition.hpp	/^    const metaspace::MetaspaceSizesSnapshot _meta_sizes;$/;"	m	struct:G1HeapTransition::Data
_min_desired_young_length	g1YoungGenSizer.hpp	/^  uint _min_desired_young_length;$/;"	m	class:G1YoungGenSizer
_min_yellow_zone_size	g1ConcurrentRefine.hpp	/^  size_t _min_yellow_zone_size;$/;"	m	class:G1ConcurrentRefine
_mismatched	g1NUMA.hpp	/^  uint* _mismatched;$/;"	m	class:G1NodeIndexCheckClosure
_mixed_card_merge_to_scan_ratio_seq	g1Analytics.hpp	/^  TruncatedSeq* _mixed_card_merge_to_scan_ratio_seq;$/;"	m	class:G1Analytics
_mixed_cost_per_card_merge_ms_seq	g1Analytics.hpp	/^  TruncatedSeq* _mixed_cost_per_card_merge_ms_seq;$/;"	m	class:G1Analytics
_mixed_cost_per_card_scan_ms_seq	g1Analytics.hpp	/^  TruncatedSeq* _mixed_cost_per_card_scan_ms_seq;$/;"	m	class:G1Analytics
_mixed_start_time	g1ConcurrentStartToMixedTimeTracker.hpp	/^  double _mixed_start_time;$/;"	m	class:G1ConcurrentStartToMixedTimeTracker
_mmu_tracker	g1Policy.hpp	/^  G1MMUTracker* _mmu_tracker;$/;"	m	class:G1Policy
_mod_max_fine_entries_mask	heapRegionRemSet.cpp	/^size_t OtherRegionsTable::_mod_max_fine_entries_mask = 0;$/;"	m	class:OtherRegionsTable	file:
_mod_max_fine_entries_mask	heapRegionRemSet.hpp	/^  static size_t _mod_max_fine_entries_mask;$/;"	m	class:OtherRegionsTable
_monitor	g1ServiceThread.hpp	/^  Monitor _monitor;$/;"	m	class:G1ServiceThread
_monitoring_scope	g1FullGCScope.hpp	/^  G1MonitoringScope       _monitoring_scope;$/;"	m	class:G1FullGCScope
_mr	g1RemSet.cpp	/^      const MemRegion _mr;$/;"	m	class:G1RebuildRemSetTask::G1RebuildRemSetHeapRegionClosure::LiveObjIterator	file:
_msg	g1CollectedHeap.cpp	/^  const char* _msg;$/;"	m	class:PrintRSetsClosure	file:
_must_record	g1GCParPhaseTimesTracker.hpp	/^  bool _must_record;$/;"	m	class:G1GCParPhaseTimesTracker
_mutator_alloc_regions	g1Allocator.hpp	/^  MutatorAllocRegion* _mutator_alloc_regions;$/;"	m	class:G1Allocator
_n_coarsenings	heapRegionRemSet.cpp	/^jint OtherRegionsTable::_n_coarsenings = 0;$/;"	m	class:OtherRegionsTable	file:
_n_coarsenings	heapRegionRemSet.hpp	/^  static jint   _n_coarsenings;$/;"	m	class:OtherRegionsTable
_n_failures	heapRegion.cpp	/^  int _n_failures;$/;"	m	class:G1VerificationClosure	file:
_n_fine_entries	heapRegionRemSet.hpp	/^  size_t           _n_fine_entries;$/;"	m	class:OtherRegionsTable
_n_regions	heapRegionManager.hpp	/^  uint           _n_regions;$/;"	m	class:HeapRegionClaimer
_n_workers	g1ParScanThreadState.hpp	/^  uint _n_workers;$/;"	m	class:G1ParScanThreadStateSet
_n_workers	heapRegionManager.hpp	/^  uint           _n_workers;$/;"	m	class:HeapRegionClaimer
_name	g1AllocRegion.hpp	/^  const char* _name;$/;"	m	class:G1AllocRegion
_name	g1RemSetSummary.cpp	/^  const char* _name;$/;"	m	class:RegionTypeCounter	file:
_name	heapRegionSet.hpp	/^  const char* _name;$/;"	m	class:HeapRegionSetBase
_needs_remset_update	g1HeapRegionAttr.hpp	/^  needs_remset_update_t _needs_remset_update;$/;"	m	struct:G1HeapRegionAttr
_new_val	c1/g1BarrierSetC1.hpp	/^  LIR_Opr _new_val;$/;"	m	class:G1PostBarrierStub
_next	g1FreeIdSet.hpp	/^  uint* _next;$/;"	m	class:G1FreeIdSet
_next	heapRegion.hpp	/^  HeapRegion* _next;$/;"	m	class:HeapRegion
_next	heapRegionRemSet.hpp	/^  PerRegionTable* _next;$/;"	m	class:PerRegionTable
_next_bitmap_mapper	heapRegionManager.hpp	/^  G1RegionToSpaceMapper* _next_bitmap_mapper;$/;"	m	class:HeapRegionManager
_next_dirty_regions	g1RemSet.cpp	/^  G1DirtyRegions* _next_dirty_regions;$/;"	m	class:G1RemSetScanState	file:
_next_index	sparsePRT.hpp	/^  int         _next_index;$/;"	m	class:SparsePRTEntry
_next_mark_bitmap	g1ConcurrentMark.hpp	/^  G1CMBitMap*                 _next_mark_bitmap;$/;"	m	class:G1CMTask
_next_mark_bitmap	g1ConcurrentMark.hpp	/^  G1CMBitMap*             _next_mark_bitmap; \/\/ Under-construction mark bitmap$/;"	m	class:G1ConcurrentMark
_next_marked_bytes	heapRegion.hpp	/^  size_t _next_marked_bytes;    \/\/ Bytes known to be live via in-progress marking.$/;"	m	class:HeapRegion
_next_null	sparsePRT.hpp	/^  int         _next_null;$/;"	m	class:SparsePRTEntry
_next_offset_index	g1BlockOffsetTable.hpp	/^  size_t    _next_offset_index;      \/\/ index corresponding to that boundary$/;"	m	class:G1BlockOffsetTablePart
_next_offset_threshold	g1BlockOffsetTable.hpp	/^  HeapWord* _next_offset_threshold;$/;"	m	class:G1BlockOffsetTablePart
_next_top_at_mark_start	heapRegion.hpp	/^  HeapWord* _next_top_at_mark_start;$/;"	m	class:HeapRegion
_nm	g1CodeBlobClosure.hpp	/^    nmethod* _nm;$/;"	m	class:G1CodeBlobClosure::HeapRegionGatheringOopClosure
_nm	g1CollectedHeap.cpp	/^  nmethod* _nm;$/;"	m	class:RegisterNMethodOopClosure	file:
_nm	g1CollectedHeap.cpp	/^  nmethod* _nm;$/;"	m	class:UnregisterNMethodOopClosure	file:
_nm	g1HeapVerifier.cpp	/^  nmethod* _nm;$/;"	m	class:G1VerifyCodeRootOopClosure	file:
_no_borrowed_regions	heterogeneousHeapRegionManager.hpp	/^  uint _no_borrowed_regions;$/;"	m	class:HeterogeneousHeapRegionManager
_no_entries	g1MMUTracker.hpp	/^  int                   _no_entries;$/;"	m	class:G1MMUTrackerQueue
_node	g1DirtyCardQueue.cpp	/^  BufferNode* const _node;$/;"	m	class:G1RefineBufferedCards	file:
_node_buffer	g1DirtyCardQueue.cpp	/^  CardTable::CardValue** const _node_buffer;$/;"	m	class:G1RefineBufferedCards::CardTable	file:
_node_buffer_size	g1DirtyCardQueue.cpp	/^  const size_t _node_buffer_size;$/;"	m	class:G1RefineBufferedCards	file:
_node_data	g1NUMAStats.hpp	/^  NodeDataArray* _node_data[NodeDataItemsSentinel];$/;"	m	class:G1NUMAStats
_node_id_to_index_map	g1NUMA.hpp	/^  uint* _node_id_to_index_map;$/;"	m	class:G1NUMA
_node_ids	g1NUMA.hpp	/^  int* _node_ids;$/;"	m	class:G1NUMA
_node_ids	g1NUMAStats.hpp	/^  const int* _node_ids;$/;"	m	class:G1NUMAStats
_node_index	g1AllocRegion.hpp	/^  uint _node_index;$/;"	m	class:G1AllocRegion
_node_index	heapRegion.hpp	/^  uint _node_index;$/;"	m	class:HeapRegion
_node_info	heapRegionSet.hpp	/^  NodeInfo*   _node_info;$/;"	m	class:FreeRegionList
_nodes	g1CollectedHeap.cpp	/^  BufferNode* volatile _nodes;$/;"	m	class:G1RedirtyLoggedCardsTask	file:
_non_copy_time_ms	g1CollectionSet.hpp	/^    double _non_copy_time_ms;$/;"	m	struct:G1CollectionSet::IncCollectionSetRegionStat
_non_young_other_cost_per_region_ms_seq	g1Analytics.hpp	/^  TruncatedSeq* _non_young_other_cost_per_region_ms_seq;$/;"	m	class:G1Analytics
_non_young_time	g1CollectedHeap.cpp	/^    Tickspan         _non_young_time;$/;"	m	class:G1FreeCollectionSetTask::FreeCSetClosure	file:
_notifier	g1ConcurrentRefineThread.hpp	/^  Semaphore* _notifier;$/;"	m	class:G1ConcurrentRefineThread
_nqueues	g1StringDedupQueue.hpp	/^  size_t                     _nqueues;$/;"	m	class:G1StringDedupQueue
_num_active_dram_node_ids	g1NUMA.hpp	/^  uint _num_active_dram_node_ids;$/;"	m	class:G1NUMA
_num_active_node_ids	g1NUMA.hpp	/^  uint _num_active_node_ids;$/;"	m	class:G1NUMA
_num_active_nvram_node_ids	g1NUMA.hpp	/^  uint _num_active_nvram_node_ids;$/;"	m	class:G1NUMA
_num_active_tasks	g1ConcurrentMark.hpp	/^  uint                    _num_active_tasks; \/\/ Number of tasks currently active$/;"	m	class:G1ConcurrentMark
_num_added_regions	g1SurvRateGroup.hpp	/^  size_t _num_added_regions;   \/\/ The number of regions in this survivor rate group.$/;"	m	class:G1SurvRateGroup
_num_alloc_regions	g1Allocator.hpp	/^  size_t _num_alloc_regions;$/;"	m	class:G1Allocator
_num_cache_entries	g1RegionMarkStatsCache.hpp	/^  uint _num_cache_entries;$/;"	m	class:G1RegionMarkStatsCache
_num_cache_entries_mask	g1RegionMarkStatsCache.hpp	/^  size_t _num_cache_entries_mask;$/;"	m	class:G1RegionMarkStatsCache
_num_cards	g1DirtyCardQueue.hpp	/^  volatile size_t _num_cards;$/;"	m	class:G1DirtyCardQueueSet
_num_coarsenings	g1RemSetSummary.hpp	/^  size_t _num_coarsenings;$/;"	m	class:G1RemSetSummary
_num_column	g1NUMAStats.hpp	/^    uint _num_column;$/;"	m	class:G1NUMAStats::NodeDataArray
_num_committed	heapRegionManager.hpp	/^  uint _num_committed;$/;"	m	class:HeapRegionManager
_num_committed_dram	g1RegionToSpaceMapper.hpp	/^  uint _num_committed_dram;$/;"	m	class:G1RegionToHeteroSpaceMapper
_num_committed_nvram	g1RegionToSpaceMapper.hpp	/^  uint _num_committed_nvram;$/;"	m	class:G1RegionToHeteroSpaceMapper
_num_concurrent_workers	g1ConcurrentMark.hpp	/^  uint      _num_concurrent_workers; \/\/ The number of marking worker threads we're using$/;"	m	class:G1ConcurrentMark
_num_dirtied	g1CollectedHeap.cpp	/^  size_t _num_dirtied;$/;"	m	class:RedirtyLoggedCardTableEntryClosure	file:
_num_entries	sparsePRT.hpp	/^  size_t _num_entries;$/;"	m	class:RSHashTable
_num_max_threads	g1ConcurrentRefine.hpp	/^  uint _num_max_threads;$/;"	m	class:G1ConcurrentRefineThreadControl
_num_node_ids	g1NUMAStats.hpp	/^  uint _num_node_ids;$/;"	m	class:G1NUMAStats
_num_nodes	heapRegionSet.hpp	/^    uint    _num_nodes;$/;"	m	class:FreeRegionList::NodeInfo
_num_occupied	heapRegionRemSet.hpp	/^  size_t volatile _num_occupied;$/;"	m	class:OtherRegionsTable
_num_optional_regions	g1CollectionSet.hpp	/^  uint _num_optional_regions;$/;"	m	class:G1CollectionSet
_num_optional_regions	g1ParScanThreadState.hpp	/^  size_t _num_optional_regions;$/;"	m	class:G1ParScanThreadState
_num_prev_pauses_for_heuristics	g1HeapSizingPolicy.hpp	/^  const uint _num_prev_pauses_for_heuristics;$/;"	m	class:G1HeapSizingPolicy
_num_regions	g1CollectionSetCandidates.hpp	/^  uint _num_regions; \/\/ Total number of regions in the collection set candidate set.$/;"	m	class:G1CollectionSetCandidates
_num_regions_added	g1CollectionSetChooser.cpp	/^  uint volatile _num_regions_added;$/;"	m	class:G1BuildCandidateRegionsTask	file:
_num_regions_selected_for_rebuild	g1ConcurrentMark.cpp	/^    uint _num_regions_selected_for_rebuild;  \/\/ The number of regions actually selected for rebuild.$/;"	m	class:G1UpdateRemSetTrackingBeforeRebuildTask::G1UpdateRemSetTrackingBeforeRebuild	file:
_num_root_regions	g1ConcurrentMark.hpp	/^  volatile size_t _num_root_regions; \/\/ Actual number of root regions.$/;"	m	class:G1CMRootMemRegions
_num_row	g1NUMAStats.hpp	/^    uint _num_row;$/;"	m	class:G1NUMAStats::NodeDataArray
_num_total_scan_chunks	g1RemSet.cpp	/^  size_t _num_total_scan_chunks;        \/\/ Total number of elements in _region_scan_chunks.$/;"	m	class:G1RemSetScanState	file:
_num_vtimes	g1RemSetSummary.hpp	/^  size_t _num_vtimes;$/;"	m	class:G1RemSetSummary
_num_workers	g1CollectedHeap.cpp	/^  uint _num_workers;$/;"	m	class:G1EvacuateRegionsBaseTask	file:
_num_workers	g1FullCollector.hpp	/^  uint                      _num_workers;$/;"	m	class:G1FullCollector
_num_workers	heapRegionManager.cpp	/^  uint               _num_workers;$/;"	m	class:G1RebuildFreeListTask	file:
_numa	g1Allocator.hpp	/^  G1NUMA* _numa;$/;"	m	class:G1Allocator
_numa	g1CollectedHeap.hpp	/^  G1NUMA* _numa;$/;"	m	class:G1CollectedHeap
_numa	g1NUMA.hpp	/^  G1NUMA* _numa;$/;"	m	class:G1NodeIndexCheckClosure
_numa	g1ParScanThreadState.hpp	/^  G1NUMA* _numa;$/;"	m	class:G1ParScanThreadState
_numa	g1RegionsOnNodes.hpp	/^  G1NUMA*        _numa;$/;"	m	class:G1RegionsOnNodes
_numa	heapRegionSet.hpp	/^    G1NUMA* _numa;$/;"	m	class:FreeRegionList::NodeInfo
_nvram_idx_to_node_idx	g1NUMA.hpp	/^  int* _nvram_idx_to_node_idx;$/;"	m	class:G1NUMA
_nvram_mapper	g1RegionToSpaceMapper.hpp	/^  G1RegionToSpaceMapper* _nvram_mapper;$/;"	m	class:G1RegionToHeteroSpaceMapper
_objArray_processor	g1ConcurrentMark.hpp	/^  G1CMObjArrayProcessor       _objArray_processor;$/;"	m	class:G1CMTask
_obj_alloc_stat	g1ParScanThreadState.hpp	/^  size_t* _obj_alloc_stat;$/;"	m	class:G1ParScanThreadState
_objarray_stack	g1FullGCMarker.hpp	/^  ObjArrayTaskQueue  _objarray_stack;$/;"	m	class:G1FullGCMarker
_oc	g1CodeBlobClosure.hpp	/^  HeapRegionGatheringOopClosure _oc;$/;"	m	class:G1CodeBlobClosure
_occupied	heapRegionRemSet.hpp	/^  jint            _occupied;$/;"	m	class:PerRegionTable
_occupied_entries	sparsePRT.hpp	/^  size_t _occupied_entries;$/;"	m	class:RSHashTable
_occupied_sum	g1CollectedHeap.cpp	/^  size_t _occupied_sum;$/;"	m	class:PrintRSetsClosure	file:
_offset_array	g1BlockOffsetTable.hpp	/^  volatile u_char* _offset_array;  \/\/ byte array keeping backwards offsets$/;"	m	class:G1BlockOffsetTable
_old	g1RemSetSummary.cpp	/^  RegionTypeCounter _old;$/;"	m	class:HRRSStatsIter	file:
_old_count	g1HeapVerifier.cpp	/^  uint _old_count;$/;"	m	class:VerifyRegionListsClosure	file:
_old_evac_stats	g1CollectedHeap.hpp	/^  G1EvacStats _old_evac_stats;$/;"	m	class:G1CollectedHeap
_old_gc_alloc_region	g1Allocator.hpp	/^  OldGCAllocRegion _old_gc_alloc_region;$/;"	m	class:G1Allocator
_old_gen_alloc_tracker	g1IHOPControl.hpp	/^  const G1OldGenAllocationTracker* _old_gen_alloc_tracker;$/;"	m	class:G1IHOPControl
_old_gen_alloc_tracker	g1Policy.hpp	/^  G1OldGenAllocationTracker _old_gen_alloc_tracker;$/;"	m	class:G1Policy
_old_gen_committed	g1MonitoringSupport.hpp	/^  size_t _old_gen_committed;$/;"	m	class:G1MonitoringSupport
_old_gen_counters	g1MonitoringSupport.hpp	/^  GenerationCounters*  _old_gen_counters;$/;"	m	class:G1MonitoringSupport
_old_gen_is_full	g1ParScanThreadState.hpp	/^  bool _old_gen_is_full;$/;"	m	class:G1ParScanThreadState
_old_gen_pool	g1MonitoringSupport.hpp	/^  MemoryPool* _old_gen_pool;$/;"	m	class:G1MonitoringSupport
_old_gen_used	g1MonitoringSupport.hpp	/^  size_t _old_gen_used;$/;"	m	class:G1MonitoringSupport
_old_is_full	g1Allocator.hpp	/^  bool _old_is_full;$/;"	m	class:G1Allocator
_old_length	g1HeapTransition.hpp	/^    size_t _old_length;$/;"	m	struct:G1HeapTransition::Data
_old_marking_cycles_completed	g1CollectedHeap.hpp	/^  volatile uint _old_marking_cycles_completed;$/;"	m	class:G1CollectedHeap
_old_marking_cycles_started	g1CollectedHeap.hpp	/^  volatile uint _old_marking_cycles_started;$/;"	m	class:G1CollectedHeap
_old_mt_degree	g1FullGCReferenceProcessorExecutor.hpp	/^  uint                _old_mt_degree;$/;"	m	class:G1FullGCReferenceProcessingExecutor
_old_region_count	g1HeapTransition.cpp	/^  size_t _old_region_count;$/;"	m	struct:DetailedUsage	file:
_old_region_length	g1CollectionSet.hpp	/^  uint _old_region_length;$/;"	m	class:G1CollectionSet
_old_regions_removed	g1ConcurrentMark.cpp	/^    uint _old_regions_removed;$/;"	m	class:G1ReclaimEmptyRegionsTask::G1ReclaimEmptyRegionsClosure	file:
_old_set	g1CollectedHeap.cpp	/^  HeapRegionSet *_old_set;$/;"	m	class:TearDownRegionSetsClosure	file:
_old_set	g1CollectedHeap.cpp	/^  HeapRegionSet* _old_set;$/;"	m	class:RebuildRegionSetsClosure	file:
_old_set	g1CollectedHeap.hpp	/^  HeapRegionSet _old_set;$/;"	m	class:G1CollectedHeap
_old_set	g1HeapVerifier.cpp	/^  HeapRegionSet*   _old_set;$/;"	m	class:VerifyRegionListsClosure	file:
_old_space_counters	g1MonitoringSupport.hpp	/^  HSpaceCounters*      _old_space_counters;$/;"	m	class:G1MonitoringSupport
_old_used	g1HeapTransition.cpp	/^  size_t _old_used;$/;"	m	struct:DetailedUsage	file:
_oop_cl	g1HeapVerifier.cpp	/^  G1VerifyCodeRootOopClosure* _oop_cl;$/;"	m	class:G1VerifyCodeRootBlobClosure	file:
_oop_closure	g1HeapVerifier.cpp	/^  OopClosure *_oop_closure;$/;"	m	class:VerifyCLDClosure	file:
_oop_queue_set	g1FullCollector.hpp	/^  OopQueueSet               _oop_queue_set;$/;"	m	class:G1FullCollector
_oop_stack	g1FullGCMarker.hpp	/^  OopQueue           _oop_stack;$/;"	m	class:G1FullGCMarker
_oop_storage_set_strong_par_state	g1RootProcessor.hpp	/^  OopStorageSetStrongParState<false, false> _oop_storage_set_strong_par_state;$/;"	m	class:G1RootProcessor
_oops	g1OopStarChunkedList.hpp	/^  ChunkedList<oop*, mtGC>* _oops;$/;"	m	class:G1OopStarChunkedList
_oops	g1SharedClosures.hpp	/^  G1ParCopyClosure<G1BarrierNone, Mark> _oops;$/;"	m	class:G1SharedClosures
_oops_in_cld	g1SharedClosures.hpp	/^  G1ParCopyClosure<G1BarrierCLD,  Mark> _oops_in_cld;$/;"	m	class:G1SharedClosures
_oops_in_nmethod	g1SharedClosures.hpp	/^  G1ParCopyClosure<G1BarrierNoOptRoots, Mark> _oops_in_nmethod;$/;"	m	class:G1SharedClosures
_oops_into_optional_regions	g1ParScanThreadState.hpp	/^  G1OopStarChunkedList* _oops_into_optional_regions;$/;"	m	class:G1ParScanThreadState
_open	g1Allocator.hpp	/^  bool _open; \/\/ Indicate if the region is 'open' archive.$/;"	m	class:G1ArchiveAllocator
_opt_refs_memory_used	g1RemSet.cpp	/^  size_t _opt_refs_memory_used;$/;"	m	class:G1ScanCollectionSetRegionClosure	file:
_opt_refs_scanned	g1RemSet.cpp	/^  size_t _opt_refs_scanned;$/;"	m	class:G1ScanCollectionSetRegionClosure	file:
_optional_cset_length	g1ParScanThreadState.hpp	/^  size_t _optional_cset_length;$/;"	m	class:G1ParScanThreadStateSet
_other_regions	heapRegionRemSet.hpp	/^  OtherRegionsTable _other_regions;$/;"	m	class:HeapRegionRemSet
_overall_committed	g1MonitoringSupport.hpp	/^  size_t _overall_committed;$/;"	m	class:G1MonitoringSupport
_overall_used	g1MonitoringSupport.hpp	/^  size_t _overall_used;$/;"	m	class:G1MonitoringSupport
_pad0	g1ConcurrentMark.hpp	/^  char _pad0[DEFAULT_CACHE_LINE_SIZE];$/;"	m	class:G1CMMarkStack
_pad1	g1ConcurrentMark.hpp	/^  char _pad1[DEFAULT_CACHE_LINE_SIZE - sizeof(TaskQueueEntryChunk*)];$/;"	m	class:G1CMMarkStack
_pad2	g1ConcurrentMark.hpp	/^  char _pad2[DEFAULT_CACHE_LINE_SIZE - sizeof(TaskQueueEntryChunk*) - sizeof(size_t)];$/;"	m	class:G1CMMarkStack
_pad4	g1ConcurrentMark.hpp	/^  char _pad4[DEFAULT_CACHE_LINE_SIZE - sizeof(size_t)];$/;"	m	class:G1CMMarkStack
_pad_after	g1HotCardCache.hpp	/^  char _pad_after[DEFAULT_CACHE_LINE_SIZE];$/;"	m	class:G1HotCardCache
_pad_before	g1HotCardCache.hpp	/^  char _pad_before[DEFAULT_CACHE_LINE_SIZE];$/;"	m	class:G1HotCardCache
_padded_max_cards	g1DirtyCardQueue.hpp	/^  volatile size_t _padded_max_cards;$/;"	m	class:G1DirtyCardQueueSet
_page_size	g1NUMA.hpp	/^  size_t _page_size;$/;"	m	class:G1NUMA
_page_size	g1PageBasedVirtualSpace.cpp	/^  size_t _page_size;$/;"	m	class:G1PretouchTask	file:
_page_size	g1PageBasedVirtualSpace.hpp	/^  size_t _page_size;$/;"	m	class:G1PageBasedVirtualSpace
_page_size	g1RegionToSpaceMapper.hpp	/^  size_t _page_size;$/;"	m	class:G1RegionToHeteroSpaceMapper
_pages_per_region	g1RegionToSpaceMapper.cpp	/^  size_t _pages_per_region;$/;"	m	class:G1RegionsLargerThanCommitSizeMapper	file:
_par	g1HeapVerifier.cpp	/^  bool             _par;$/;"	m	class:VerifyRegionClosure	file:
_par_alloc_lock	heapRegion.hpp	/^  Mutex _par_alloc_lock;$/;"	m	class:HeapRegion
_par_scan_state	g1CollectedHeap.cpp	/^  G1ParScanThreadState*    _par_scan_state;$/;"	m	class:G1CopyingKeepAliveClosure	file:
_par_scan_state	g1CollectedHeap.cpp	/^  G1ParScanThreadState* _par_scan_state;$/;"	m	class:G1STWDrainQueueClosure	file:
_par_scan_state	g1CollectedHeap.hpp	/^  G1ParScanThreadState*         _par_scan_state;$/;"	m	class:G1ParEvacuateFollowersClosure
_par_scan_state	g1OopClosures.hpp	/^  G1ParScanThreadState* _par_scan_state;$/;"	m	class:G1ParCopyHelper
_par_scan_state	g1OopClosures.hpp	/^  G1ParScanThreadState* _par_scan_state;$/;"	m	class:G1ScanClosureBase
_parent_task	g1CollectedHeap.cpp	/^    G1PrepareEvacuationTask* _parent_task;$/;"	m	class:G1PrepareEvacuationTask::G1PrepareRegionsClosure	file:
_patch_code	c1/g1BarrierSetC1.hpp	/^  LIR_PatchCode _patch_code;$/;"	m	class:G1PreBarrierStub
_paused	g1DirtyCardQueue.hpp	/^  PausedBuffers _paused;      \/\/ Has inner padding, including trailer.$/;"	m	class:G1DirtyCardQueueSet
_pauses_since_start	g1HeapSizingPolicy.hpp	/^  uint _pauses_since_start;$/;"	m	class:G1HeapSizingPolicy
_pending_cards_at_gc_start	g1Policy.hpp	/^  size_t _pending_cards_at_gc_start;$/;"	m	class:G1Policy
_pending_cards_seq	g1Analytics.hpp	/^  TruncatedSeq* _pending_cards_seq;$/;"	m	class:G1Analytics
_per_thread_states	g1CollectedHeap.cpp	/^  G1ParScanThreadStateSet* _per_thread_states;$/;"	m	class:G1EvacuateRegionsBaseTask	file:
_phase	g1CollectedHeap.hpp	/^  G1GCPhaseTimes::GCParPhases   _phase;$/;"	m	class:G1ParEvacuateFollowersClosure
_phase	g1ConcurrentMark.cpp	/^  const char* _phase;$/;"	m	class:VerifyNoCSetOops	file:
_phase	g1GCParPhaseTimesTracker.hpp	/^  G1GCPhaseTimes::GCParPhases _phase;$/;"	m	class:G1GCParPhaseTimesTracker
_phase	g1RemSet.cpp	/^  G1GCPhaseTimes::GCParPhases _phase;$/;"	m	class:G1ScanHRForRegionClosure	file:
_phase_times	g1CollectedHeap.cpp	/^  G1GCPhaseTimes* _phase_times;$/;"	m	class:G1StringDedupCleaningTask	file:
_phase_times	g1GCParPhaseTimesTracker.hpp	/^  G1GCPhaseTimes* _phase_times;$/;"	m	class:G1GCParPhaseTimesTracker
_phase_times	g1Policy.hpp	/^  mutable G1GCPhaseTimes* _phase_times;$/;"	m	class:G1Policy
_phase_times_timer	g1Policy.hpp	/^  STWGCTimer*     _phase_times_timer;$/;"	m	class:G1Policy
_plab_allocator	g1ParScanThreadState.hpp	/^  G1PLABAllocator* _plab_allocator;$/;"	m	class:G1ParScanThreadState
_plist	g1DirtyCardQueue.hpp	/^    PausedList* volatile _plist;$/;"	m	class:G1DirtyCardQueueSet::PausedBuffers
_points_into	g1CodeCacheRemSet.cpp	/^    bool _points_into;$/;"	m	class:CleanCallback::PointsIntoHRDetectionClosure	file:
_policy	g1CollectedHeap.hpp	/^  G1Policy* _policy;$/;"	m	class:G1CollectedHeap
_policy	g1CollectionSet.hpp	/^  G1Policy* _policy;$/;"	m	class:G1CollectionSet
_policy	g1Policy.cpp	/^  const G1Policy* const _policy;$/;"	m	class:G1YoungLengthPredictor	file:
_policy_counters	g1Policy.hpp	/^  GCPolicyCounters* _policy_counters;$/;"	m	class:G1Policy
_post_barrier_c1_runtime_code_blob	c1/g1BarrierSetC1.hpp	/^  CodeBlob* _post_barrier_c1_runtime_code_blob;$/;"	m	class:G1BarrierSetC1
_pre_barrier_c1_runtime_code_blob	c1/g1BarrierSetC1.hpp	/^  CodeBlob* _pre_barrier_c1_runtime_code_blob;$/;"	m	class:G1BarrierSetC1
_pre_dummy_top	heapRegion.hpp	/^  HeapWord* _pre_dummy_top;$/;"	m	class:HeapRegion
_pre_val	c1/g1BarrierSetC1.hpp	/^  LIR_Opr _pre_val;$/;"	m	class:G1PreBarrierStub
_precleaned_cards	g1ConcurrentRefineStats.hpp	/^  size_t _precleaned_cards;$/;"	m	class:G1ConcurrentRefineStats
_predictor	g1Analytics.hpp	/^  const G1Predictions* _predictor;$/;"	m	class:G1Analytics
_predictor	g1IHOPControl.hpp	/^  const G1Predictions * _predictor;$/;"	m	class:G1AdaptiveIHOPControl
_predictor	g1Policy.hpp	/^  G1Predictions _predictor;$/;"	m	class:G1Policy
_preserved_marks_set	g1CollectedHeap.hpp	/^  PreservedMarksSet _preserved_marks_set;$/;"	m	class:G1CollectedHeap
_preserved_marks_set	g1FullCollector.hpp	/^  PreservedMarksSet         _preserved_marks_set;$/;"	m	class:G1FullCollector
_preserved_stack	g1FullGCMarker.hpp	/^  PreservedMarks*    _preserved_stack;$/;"	m	class:G1FullGCMarker
_prev	heapRegion.hpp	/^  HeapRegion* _prev;$/;"	m	class:HeapRegion
_prev_bitmap_mapper	heapRegionManager.hpp	/^  G1RegionToSpaceMapper* _prev_bitmap_mapper;$/;"	m	class:HeapRegionManager
_prev_collection_pause_end_ms	g1Analytics.hpp	/^  double        _prev_collection_pause_end_ms;$/;"	m	class:G1Analytics
_prev_mark_bitmap	g1ConcurrentMark.hpp	/^  G1CMBitMap*             _prev_mark_bitmap; \/\/ Completed mark bitmap$/;"	m	class:G1ConcurrentMark
_prev_marked_bytes	heapRegion.hpp	/^  size_t _prev_marked_bytes;    \/\/ Bytes known to be live via last completed marking.$/;"	m	class:HeapRegion
_prev_period_summary	g1RemSet.hpp	/^  G1RemSetSummary _prev_period_summary;$/;"	m	class:G1RemSet
_prev_top_at_mark_start	heapRegion.hpp	/^  HeapWord* _prev_top_at_mark_start;$/;"	m	class:HeapRegion
_primary_refinement_thread	g1DirtyCardQueue.hpp	/^  G1ConcurrentRefineThread* _primary_refinement_thread;$/;"	m	class:G1DirtyCardQueueSet
_proc_task	g1CollectedHeap.cpp	/^  ProcessTask&     _proc_task;$/;"	m	class:G1STWRefProcTaskProxy	file:
_proc_task	g1ConcurrentMark.cpp	/^  ProcessTask&      _proc_task;$/;"	m	class:G1CMRefProcTaskProxy	file:
_proc_task	g1FullGCReferenceProcessorExecutor.hpp	/^    ProcessTask&                  _proc_task;$/;"	m	class:G1FullGCReferenceProcessingExecutor::G1RefProcTaskProxy
_process_cards_threshold	g1DirtyCardQueue.hpp	/^  size_t _process_cards_threshold;$/;"	m	class:G1DirtyCardQueueSet
_process_only_dirty	g1OopClosures.hpp	/^  bool             _process_only_dirty;$/;"	m	class:G1CLDScanClosure
_process_strong_tasks	g1RootProcessor.hpp	/^  SubTasksDone _process_strong_tasks;$/;"	m	class:G1RootProcessor
_proxy_set	g1CollectedHeap.cpp	/^  HeapRegionSet* _proxy_set;$/;"	m	class:G1FreeHumongousRegionClosure	file:
_pss	g1CollectedHeap.cpp	/^  G1ParScanThreadStateSet*  _pss;$/;"	m	class:G1STWRefProcTaskExecutor	file:
_pss	g1CollectedHeap.cpp	/^  G1ParScanThreadStateSet* _pss;$/;"	m	class:G1STWRefProcTaskProxy	file:
_pss	g1GCPhaseTimes.hpp	/^  G1ParScanThreadState* _pss;$/;"	m	class:G1EvacPhaseWithTrimTimeTracker
_pss	g1RemSet.cpp	/^  G1ParScanThreadState* _pss;$/;"	m	class:G1ScanCollectionSetRegionClosure	file:
_pss	g1RemSet.cpp	/^  G1ParScanThreadState* _pss;$/;"	m	class:G1ScanHRForRegionClosure	file:
_purge_list	g1CodeCacheRemSet.cpp	/^G1CodeRootSetTable* volatile G1CodeRootSetTable::_purge_list = NULL;$/;"	m	class:G1CodeRootSetTable	file:
_purge_list	g1CodeRootSetTable.hpp	/^  static G1CodeRootSetTable* volatile _purge_list;$/;"	m	class:G1CodeRootSetTable
_purge_next	g1CodeRootSetTable.hpp	/^  G1CodeRootSetTable* _purge_next;$/;"	m	class:G1CodeRootSetTable
_purpose	g1AllocRegion.hpp	/^  G1HeapRegionAttr::region_type_t _purpose;$/;"	m	class:G1GCAllocRegion
_qset	g1CollectedHeap.cpp	/^  G1RedirtyCardsQueueSet* _qset;$/;"	m	class:G1RedirtyLoggedCardsTask	file:
_qset	g1SharedDirtyCardQueue.hpp	/^  G1DirtyCardQueueSet* const _qset;$/;"	m	class:G1SharedDirtyCardQueue
_queues	g1CollectedHeap.cpp	/^  G1ScannerTasksQueueSet*   _queues;$/;"	m	class:G1STWRefProcTaskExecutor	file:
_queues	g1CollectedHeap.hpp	/^  G1ScannerTasksQueueSet*       _queues;$/;"	m	class:G1ParEvacuateFollowersClosure
_queues	g1StringDedupQueue.hpp	/^  G1StringDedupWorkerQueue*  _queues;$/;"	m	class:G1StringDedupQueue
_ratio_over_threshold_count	g1HeapSizingPolicy.hpp	/^  uint _ratio_over_threshold_count;$/;"	m	class:G1HeapSizingPolicy
_ratio_over_threshold_sum	g1HeapSizingPolicy.hpp	/^  double _ratio_over_threshold_sum;$/;"	m	class:G1HeapSizingPolicy
_rdcq	g1EvacFailure.cpp	/^  G1RedirtyCardsQueue _rdcq;$/;"	m	class:RemoveSelfForwardPtrHRClosure	file:
_rdcq	g1EvacFailure.cpp	/^  G1RedirtyCardsQueue* _rdcq;$/;"	m	class:UpdateLogBuffersDeferred	file:
_rdcq	g1ParScanThreadState.hpp	/^  G1RedirtyCardsQueue _rdcq;$/;"	m	class:G1ParScanThreadState
_rdcqs	g1EvacFailure.hpp	/^  G1RedirtyCardsQueueSet* _rdcqs;$/;"	m	class:G1ParRemoveSelfForwardPtrsTask
_rdcqs	g1ParScanThreadState.hpp	/^  G1RedirtyCardsQueueSet* _rdcqs;$/;"	m	class:G1ParScanThreadStateSet
_real_refs_reached_limit	g1ConcurrentMark.hpp	/^  size_t                      _real_refs_reached_limit;$/;"	m	class:G1CMTask
_real_words_scanned_limit	g1ConcurrentMark.hpp	/^  size_t                      _real_words_scanned_limit;$/;"	m	class:G1CMTask
_recent_gc_times_ms	g1Analytics.hpp	/^  TruncatedSeq* _recent_gc_times_ms;$/;"	m	class:G1Analytics
_recent_prev_end_times_for_all_gcs_sec	g1Analytics.hpp	/^  TruncatedSeq* _recent_prev_end_times_for_all_gcs_sec;$/;"	m	class:G1Analytics
_reclaimable_bytes_added	g1CollectionSetChooser.cpp	/^    size_t _reclaimable_bytes_added;$/;"	m	class:G1BuildCandidateRegionsTask::G1BuildCandidateRegionsClosure	file:
_reclaimable_bytes_added	g1CollectionSetChooser.cpp	/^  size_t volatile _reclaimable_bytes_added;$/;"	m	class:G1BuildCandidateRegionsTask	file:
_recorded_clear_claimed_marks_time_ms	g1GCPhaseTimes.hpp	/^  double _recorded_clear_claimed_marks_time_ms;$/;"	m	class:G1GCPhaseTimes
_recorded_merge_pss_time_ms	g1GCPhaseTimes.hpp	/^  double _recorded_merge_pss_time_ms;$/;"	m	class:G1GCPhaseTimes
_recorded_non_young_cset_choice_time_ms	g1GCPhaseTimes.hpp	/^  double _recorded_non_young_cset_choice_time_ms;$/;"	m	class:G1GCPhaseTimes
_recorded_prepare_heap_roots_time_ms	g1GCPhaseTimes.hpp	/^  double _recorded_prepare_heap_roots_time_ms;$/;"	m	class:G1GCPhaseTimes
_recorded_preserve_cm_referents_time_ms	g1GCPhaseTimes.hpp	/^  double _recorded_preserve_cm_referents_time_ms;$/;"	m	class:G1GCPhaseTimes
_recorded_redirty_logged_cards_time_ms	g1GCPhaseTimes.hpp	/^  double _recorded_redirty_logged_cards_time_ms;$/;"	m	class:G1GCPhaseTimes
_recorded_rs_length	g1CollectionSet.hpp	/^  size_t _recorded_rs_length;$/;"	m	class:G1CollectionSet
_recorded_serial_free_cset_time_ms	g1GCPhaseTimes.hpp	/^  double _recorded_serial_free_cset_time_ms;$/;"	m	class:G1GCPhaseTimes
_recorded_serial_rebuild_freelist_time_ms	g1GCPhaseTimes.hpp	/^  double _recorded_serial_rebuild_freelist_time_ms;$/;"	m	class:G1GCPhaseTimes
_recorded_start_new_cset_time_ms	g1GCPhaseTimes.hpp	/^  double _recorded_start_new_cset_time_ms;$/;"	m	class:G1GCPhaseTimes
_recorded_total_free_cset_time_ms	g1GCPhaseTimes.hpp	/^  double _recorded_total_free_cset_time_ms;$/;"	m	class:G1GCPhaseTimes
_recorded_total_rebuild_freelist_time_ms	g1GCPhaseTimes.hpp	/^  double _recorded_total_rebuild_freelist_time_ms;$/;"	m	class:G1GCPhaseTimes
_recorded_young_cset_choice_time_ms	g1GCPhaseTimes.hpp	/^  double _recorded_young_cset_choice_time_ms;$/;"	m	class:G1GCPhaseTimes
_red_zone	g1ConcurrentRefine.hpp	/^  size_t _red_zone;$/;"	m	class:G1ConcurrentRefine
_ref_counter	g1ConcurrentMark.cpp	/^  uint              _ref_counter;$/;"	m	class:G1CMKeepAliveAndDrainClosure	file:
_ref_counter_limit	g1ConcurrentMark.cpp	/^  uint              _ref_counter_limit;$/;"	m	class:G1CMKeepAliveAndDrainClosure	file:
_ref_phase_times	g1GCPhaseTimes.hpp	/^  ReferenceProcessorPhaseTimes _ref_phase_times;$/;"	m	class:G1GCPhaseTimes
_ref_processor_cm	g1CollectedHeap.hpp	/^  ReferenceProcessor* _ref_processor_cm;$/;"	m	class:G1CollectedHeap
_ref_processor_stw	g1CollectedHeap.hpp	/^  ReferenceProcessor* _ref_processor_stw;$/;"	m	class:G1CollectedHeap
_reference_processor	g1FullGCReferenceProcessorExecutor.hpp	/^  ReferenceProcessor* _reference_processor;$/;"	m	class:G1FullGCReferenceProcessingExecutor
_references_done	g1FullGCAdjustTask.hpp	/^  volatile uint            _references_done; \/\/ Atomic counter \/ bool$/;"	m	class:G1FullGCAdjustTask
_refined_cards	g1ConcurrentRefineStats.hpp	/^  size_t _refined_cards;$/;"	m	class:G1ConcurrentRefineStats
_refinement_stats	g1ConcurrentRefineThread.hpp	/^  G1ConcurrentRefineStats* _refinement_stats;$/;"	m	class:G1ConcurrentRefineThread
_refinement_stats	g1DirtyCardQueue.hpp	/^  G1ConcurrentRefineStats* _refinement_stats;$/;"	m	class:G1DirtyCardQueue
_refinement_time	g1ConcurrentRefineStats.hpp	/^  Tickspan _refinement_time;$/;"	m	class:G1ConcurrentRefineStats
_refs_reached	g1ConcurrentMark.hpp	/^  size_t                      _refs_reached;$/;"	m	class:G1CMTask
_refs_reached_limit	g1ConcurrentMark.hpp	/^  size_t                      _refs_reached_limit;$/;"	m	class:G1CMTask
_region_attr	g1CollectedHeap.hpp	/^  G1HeapRegionAttrBiasedMappedArray _region_attr;$/;"	m	class:G1CollectedHeap
_region_commit_map	g1RegionToSpaceMapper.hpp	/^  CHeapBitMap _region_commit_map;$/;"	m	class:G1RegionToSpaceMapper
_region_end_waste	g1EvacStats.hpp	/^  size_t _region_end_waste; \/\/ Number of words wasted due to skipping to the next region.$/;"	m	class:G1EvacStats
_region_granularity	g1RegionToSpaceMapper.hpp	/^  size_t _region_granularity;$/;"	m	class:G1RegionToSpaceMapper
_region_idx	g1RegionMarkStatsCache.hpp	/^    uint _region_idx;$/;"	m	struct:G1RegionMarkStatsCache::G1RegionMarkStatsCacheEntry
_region_idx	g1RemSet.cpp	/^  uint _region_idx;$/;"	m	class:G1CardTableChunkClaimer	file:
_region_ind	sparsePRT.hpp	/^  RegionIdx_t _region_ind;$/;"	m	class:SparsePRTEntry
_region_limit	g1ConcurrentMark.hpp	/^  HeapWord*                   _region_limit;$/;"	m	class:G1CMTask
_region_mark_stats	g1ConcurrentMark.hpp	/^  G1RegionMarkStats* _region_mark_stats;$/;"	m	class:G1ConcurrentMark
_region_scan_chunks	g1RemSet.cpp	/^  bool* _region_scan_chunks;$/;"	m	class:G1RemSetScanState	file:
_region_size	g1NUMA.hpp	/^  size_t _region_size;$/;"	m	class:G1NUMA
_regions	g1CollectionSetCandidates.hpp	/^  HeapRegion** _regions;$/;"	m	class:G1CollectionSetCandidates
_regions	g1RemSet.cpp	/^    G1DirtyRegions* _regions;$/;"	m	class:G1RemSetScanState::G1ClearCardTableTask	file:
_regions	g1SurvivorRegions.hpp	/^  GrowableArray<HeapRegion*>* _regions;$/;"	m	class:G1SurvivorRegions
_regions	heapRegionManager.hpp	/^  G1HeapRegionTable _regions;$/;"	m	class:HeapRegionManager
_regions_added	g1CollectionSetChooser.cpp	/^    uint _regions_added;$/;"	m	class:G1BuildCandidateRegionsTask::G1BuildCandidateRegionsClosure	file:
_regions_filled	g1EvacStats.hpp	/^  uint   _regions_filled;   \/\/ Number of regions filled completely.$/;"	m	class:G1EvacStats
_regions_freed	g1CollectedHeap.cpp	/^    uint _regions_freed;         \/\/ Number of regions freed$/;"	m	class:G1FreeCollectionSetTask::FreeCSetStats	file:
_regions_freed	g1EvacuationInfo.hpp	/^  uint   _regions_freed;$/;"	m	class:G1EvacuationInfo
_regions_on_node	g1EdenRegions.hpp	/^  G1RegionsOnNodes  _regions_on_node;$/;"	m	class:G1EdenRegions
_regions_on_node	g1SurvivorRegions.hpp	/^  G1RegionsOnNodes            _regions_on_node;$/;"	m	class:G1SurvivorRegions
_regions_per_page	g1RegionToSpaceMapper.cpp	/^  size_t _regions_per_page;$/;"	m	class:G1RegionsSmallerThanCommitSizeMapper	file:
_regions_visited	g1ServiceThread.cpp	/^  size_t _regions_visited;$/;"	m	class:G1YoungRemSetSamplingClosure	file:
_rem_set	g1CollectedHeap.hpp	/^  G1RemSet* _rem_set;$/;"	m	class:G1CollectedHeap
_rem_set	heapRegion.hpp	/^  HeapRegionRemSet* _rem_set;$/;"	m	class:HeapRegion
_rem_set_opt_root_scan_time	g1RemSet.cpp	/^  Tickspan _rem_set_opt_root_scan_time;$/;"	m	class:G1ScanCollectionSetRegionClosure	file:
_rem_set_opt_trim_partially_time	g1RemSet.cpp	/^  Tickspan _rem_set_opt_trim_partially_time;$/;"	m	class:G1ScanCollectionSetRegionClosure	file:
_rem_set_root_scan_time	g1RemSet.cpp	/^  Tickspan _rem_set_root_scan_time;$/;"	m	class:G1ScanHRForRegionClosure	file:
_rem_set_trim_partially_time	g1RemSet.cpp	/^  Tickspan _rem_set_trim_partially_time;$/;"	m	class:G1ScanHRForRegionClosure	file:
_remaining_reclaimable_bytes	g1CollectionSetCandidates.hpp	/^  size_t _remaining_reclaimable_bytes;$/;"	m	class:G1CollectionSetCandidates
_remark_mark_times	g1ConcurrentMark.hpp	/^  NumberSeq _remark_mark_times;$/;"	m	class:G1ConcurrentMark
_remark_times	g1ConcurrentMark.hpp	/^  NumberSeq _remark_times;$/;"	m	class:G1ConcurrentMark
_remark_weak_ref_times	g1ConcurrentMark.hpp	/^  NumberSeq _remark_weak_ref_times;$/;"	m	class:G1ConcurrentMark
_remset_tracker	g1Policy.hpp	/^  G1RemSetTrackingPolicy _remset_tracker;$/;"	m	class:G1Policy
_requested	g1NUMAStats.hpp	/^    size_t _requested;$/;"	m	struct:G1NUMAStats::Stat
_reserve_factor	g1Policy.hpp	/^  double _reserve_factor;$/;"	m	class:G1Policy
_reserve_regions	g1Policy.hpp	/^  uint   _reserve_regions;$/;"	m	class:G1Policy
_reserved	g1BlockOffsetTable.hpp	/^  MemRegion _reserved;$/;"	m	class:G1BlockOffsetTable
_reserved_max_card_num	g1CardCounts.hpp	/^  size_t _reserved_max_card_num;$/;"	m	class:G1CardCounts
_restart_for_overflow	g1ConcurrentMark.hpp	/^  volatile bool           _restart_for_overflow;$/;"	m	class:G1ConcurrentMark
_result	g1CollectionSetChooser.cpp	/^  G1BuildCandidateArray _result;$/;"	m	class:G1BuildCandidateRegionsTask	file:
_retained_alloc_region	g1AllocRegion.hpp	/^  HeapRegion* volatile _retained_alloc_region;$/;"	m	class:MutatorAllocRegion
_retained_old_gc_alloc_region	g1Allocator.hpp	/^  HeapRegion* _retained_old_gc_alloc_region;$/;"	m	class:G1Allocator
_rm	g1FullGCScope.hpp	/^  ResourceMark            _rm;$/;"	m	class:G1FullGCScope
_root_cl	g1HeapVerifier.cpp	/^  OopClosure* _root_cl;$/;"	m	class:G1VerifyCodeRootOopClosure	file:
_root_processor	g1CollectedHeap.cpp	/^  G1RootProcessor* _root_processor;$/;"	m	class:G1EvacuateRegionsTask	file:
_root_processor	g1FullGCAdjustTask.hpp	/^  G1RootProcessor          _root_processor;$/;"	m	class:G1FullGCAdjustTask
_root_processor	g1FullGCMarkTask.hpp	/^  G1RootProcessor          _root_processor;$/;"	m	class:G1FullGCMarkTask
_root_region_scan_wait_time_ms	g1GCPhaseTimes.hpp	/^  double _root_region_scan_wait_time_ms;$/;"	m	class:G1GCPhaseTimes
_root_regions	g1ConcurrentMark.hpp	/^  G1CMRootMemRegions         _root_regions;$/;"	m	class:G1ConcurrentMark
_root_regions	g1ConcurrentMark.hpp	/^  MemRegion*   _root_regions;$/;"	m	class:G1CMRootMemRegions
_roots	g1OopStarChunkedList.hpp	/^  ChunkedList<oop*, mtGC>* _roots;$/;"	m	class:G1OopStarChunkedList
_roots	g1RootProcessor.cpp	/^  OopClosure* _roots;$/;"	m	class:AllRootsClosures	file:
_roots	g1RootProcessor.cpp	/^  OopClosure* _roots;$/;"	m	class:StrongRootsClosures	file:
_rs	g1RegionToSpaceMapper.hpp	/^  ReservedSpace _rs;$/;"	m	class:G1RegionToHeteroSpaceMapper
_rs_length	g1CollectedHeap.cpp	/^    size_t _rs_length;           \/\/ Remembered set size$/;"	m	class:G1FreeCollectionSetTask::FreeCSetStats	file:
_rs_length	g1CollectionSet.hpp	/^    size_t _rs_length;$/;"	m	struct:G1CollectionSet::IncCollectionSetRegionStat
_rs_length	g1Policy.hpp	/^  size_t _rs_length;$/;"	m	class:G1Policy
_rs_length_diff_seq	g1Analytics.hpp	/^  TruncatedSeq* _rs_length_diff_seq;$/;"	m	class:G1Analytics
_rs_length_prediction	g1Policy.hpp	/^  size_t _rs_length_prediction;$/;"	m	class:G1Policy
_rs_length_seq	g1Analytics.hpp	/^  TruncatedSeq* _rs_length_seq;$/;"	m	class:G1Analytics
_rs_mem_size	g1RemSetSummary.cpp	/^  size_t _rs_mem_size;$/;"	m	class:RegionTypeCounter	file:
_rs_threads_vtimes	g1RemSetSummary.hpp	/^  double* _rs_threads_vtimes;$/;"	m	class:G1RemSetSummary
_rsht	sparsePRT.hpp	/^  RSHashTable* _rsht;$/;"	m	class:RSHashTableBucketIter
_safepoint_id	g1DirtyCardQueue.hpp	/^      size_t _safepoint_id;$/;"	m	class:G1DirtyCardQueueSet::PausedBuffers::PausedList
_sampled_rs_length	g1ServiceThread.cpp	/^  size_t _sampled_rs_length;$/;"	m	class:G1YoungRemSetSamplingClosure	file:
_satb_mark_queue	g1ThreadLocalData.hpp	/^  SATBMarkQueue _satb_mark_queue;$/;"	m	class:G1ThreadLocalData
_satb_mark_queue_buffer_allocator	g1BarrierSet.hpp	/^  BufferNode::Allocator _satb_mark_queue_buffer_allocator;$/;"	m	class:G1BarrierSet
_satb_mark_queue_set	g1BarrierSet.hpp	/^  G1SATBMarkQueueSet _satb_mark_queue_set;$/;"	m	class:G1BarrierSet
_scan_chunks_per_region	g1RemSet.cpp	/^  uint _scan_chunks_per_region;         \/\/ Number of chunks per region.$/;"	m	class:G1RemSetScanState	file:
_scan_chunks_shift	g1RemSet.cpp	/^  uint8_t _scan_chunks_shift;           \/\/ For conversion between card index and chunk index.$/;"	m	class:G1RemSetScanState	file:
_scan_cl	g1OopClosures.hpp	/^  G1ScanCardClosure* _scan_cl;$/;"	m	class:G1ScanRSForOptionalClosure
_scan_in_progress	g1ConcurrentMark.hpp	/^  volatile bool _scan_in_progress;$/;"	m	class:G1CMRootMemRegions
_scan_phase	g1RemSet.cpp	/^  G1GCPhaseTimes::GCParPhases _scan_phase;$/;"	m	class:G1ScanCollectionSetRegionClosure	file:
_scan_state	g1RemSet.cpp	/^    G1RemSetScanState* _scan_state;$/;"	m	class:G1MergeHeapRootsTask::G1MergeCardSetClosure	file:
_scan_state	g1RemSet.cpp	/^    G1RemSetScanState* _scan_state;$/;"	m	class:G1MergeHeapRootsTask::G1MergeLogBufferCardsClosure	file:
_scan_state	g1RemSet.cpp	/^    G1RemSetScanState* _scan_state;$/;"	m	class:G1RemSetScanState::G1ClearCardTableTask	file:
_scan_state	g1RemSet.cpp	/^  G1RemSetScanState* _scan_state;$/;"	m	class:G1CardTableChunkClaimer	file:
_scan_state	g1RemSet.cpp	/^  G1RemSetScanState* _scan_state;$/;"	m	class:G1MergeHeapRootsTask	file:
_scan_state	g1RemSet.cpp	/^  G1RemSetScanState* _scan_state;$/;"	m	class:G1ScanCollectionSetRegionClosure	file:
_scan_state	g1RemSet.cpp	/^  G1RemSetScanState* _scan_state;$/;"	m	class:G1ScanHRForRegionClosure	file:
_scan_state	g1RemSet.hpp	/^  G1RemSetScanState* _scan_state;$/;"	m	class:G1RemSet
_scan_top	g1RemSet.cpp	/^  HeapWord** _scan_top;$/;"	m	class:G1RemSetScanState	file:
_scanned_cld	g1OopClosures.hpp	/^  ClassLoaderData* _scanned_cld;$/;"	m	class:G1ParCopyHelper
_scanned_to	g1RemSet.cpp	/^  HeapWord* _scanned_to;$/;"	m	class:G1ScanHRForRegionClosure	file:
_scanner	g1ParScanThreadState.hpp	/^  G1ScanEvacuatedObjClosure  _scanner;$/;"	m	class:G1ParScanThreadState
_scanning_in_young	g1OopClosures.hpp	/^  ScanningInYoungValues _scanning_in_young;$/;"	m	class:G1ScanEvacuatedObjClosure
_scope	g1FullCollector.hpp	/^  G1FullGCScope             _scope;$/;"	m	class:G1FullCollector
_second_overflow_barrier_sync	g1ConcurrentMark.hpp	/^  WorkGangBarrierSync     _second_overflow_barrier_sync;$/;"	m	class:G1ConcurrentMark
_seen_free	g1HeapVerifier.cpp	/^  bool _seen_free;$/;"	m	class:VerifyReadyForArchivingRegionClosure	file:
_sem	g1FreeIdSet.hpp	/^  Semaphore _sem;$/;"	m	class:G1FreeIdSet
_serial_compaction_point	g1FullCollector.hpp	/^  G1FullGCCompactionPoint   _serial_compaction_point;$/;"	m	class:G1FullCollector
_service_thread	g1CollectedHeap.hpp	/^  G1ServiceThread* _service_thread;$/;"	m	class:G1CollectedHeap
_service_thread_vtime	g1RemSetSummary.hpp	/^  double _service_thread_vtime;$/;"	m	class:G1RemSetSummary
_shared_dirty_card_queue	g1BarrierSet.hpp	/^  G1SharedDirtyCardQueue _shared_dirty_card_queue;$/;"	m	class:G1BarrierSet
_shared_qset	g1RedirtyCardsQueue.hpp	/^    G1RedirtyCardsQueueSet* _shared_qset;$/;"	m	class:G1RedirtyCardsQueueBase::LocalQSet
_shift_by	g1BiasedArray.hpp	/^  uint _shift_by;         \/\/ the amount of bits to shift right when mapping to an index of the array.$/;"	m	class:G1BiasedMappedArrayBase
_short_state_strings	heapRegionRemSet.cpp	/^const char* HeapRegionRemSet::_short_state_strings[] =  {"UNTRA", "UPDAT", "CMPLT"};$/;"	m	class:HeapRegionRemSet	file:
_short_state_strings	heapRegionRemSet.hpp	/^  static const char* _short_state_strings[];$/;"	m	class:HeapRegionRemSet
_short_term_pause_time_ratio	g1Analytics.hpp	/^  double _short_term_pause_time_ratio;$/;"	m	class:G1Analytics
_should_abort	g1ConcurrentMark.hpp	/^  volatile bool _should_abort;$/;"	m	class:G1CMRootMemRegions
_should_notify	g1ConcurrentRefineThread.hpp	/^  volatile bool _should_notify;$/;"	m	class:G1ConcurrentRefineThread
_sigma	g1Predictions.hpp	/^  double _sigma;$/;"	m	class:G1Predictions
_size	g1FreeIdSet.hpp	/^  uint _size;$/;"	m	class:G1FreeIdSet
_sizer_kind	g1YoungGenSizer.hpp	/^  SizerKind _sizer_kind;$/;"	m	class:G1YoungGenSizer
_soft_ref_policy	g1CollectedHeap.hpp	/^  SoftRefPolicy      _soft_ref_policy;$/;"	m	class:G1CollectedHeap
_soft_refs	g1FullGCScope.hpp	/^  ClearedAllSoftRefs      _soft_refs;$/;"	m	class:G1FullGCScope
_sparse_table	heapRegionRemSet.hpp	/^  SparsePRT   _sparse_table;$/;"	m	class:OtherRegionsTable
_special	g1PageBasedVirtualSpace.hpp	/^  bool _special;$/;"	m	class:G1PageBasedVirtualSpace
_srs	g1RootProcessor.hpp	/^  StrongRootsScope _srs;$/;"	m	class:G1RootProcessor
_st	g1CollectedHeap.cpp	/^  outputStream* _st;$/;"	m	class:PrintRegionClosure	file:
_st	g1CollectionSet.cpp	/^  outputStream* _st;$/;"	m	class:G1PrintCollectionSetDetailClosure	file:
_stack_closure	g1FullGCMarker.hpp	/^  G1FollowStackClosure _stack_closure;$/;"	m	class:G1FullGCMarker
_stack_trim_lower_threshold	g1ParScanThreadState.hpp	/^  uint const _stack_trim_lower_threshold;$/;"	m	class:G1ParScanThreadState
_stack_trim_upper_threshold	g1ParScanThreadState.hpp	/^  uint const _stack_trim_upper_threshold;$/;"	m	class:G1ParScanThreadState
_start	g1FreeIdSet.hpp	/^  uint _start;$/;"	m	class:G1FreeIdSet
_start	g1GCPhaseTimes.hpp	/^  Ticks _start;$/;"	m	class:G1EvacPhaseWithTrimTimeTracker
_start	heapRegionManager.hpp	/^  uint _start;$/;"	m	class:HeapRegionRange
_start_addr	g1PageBasedVirtualSpace.cpp	/^  char* const _start_addr;$/;"	m	class:G1PretouchTask	file:
_start_index_of_dram	g1NUMA.hpp	/^  uint _start_index_of_dram;$/;"	m	class:G1NUMA
_start_index_of_dram	g1RegionToSpaceMapper.hpp	/^  uint _start_index_of_dram;$/;"	m	class:G1RegionToHeteroSpaceMapper
_start_index_of_nvdimm	heterogeneousHeapRegionManager.hpp	/^  uint _start_index_of_nvdimm;$/;"	m	class:HeterogeneousHeapRegionManager
_start_term	g1CollectedHeap.hpp	/^  double _start_term;$/;"	m	class:G1ParEvacuateFollowersClosure
_start_time	g1CollectedHeap.cpp	/^      Ticks     _start_time;$/;"	m	class:G1FreeCollectionSetTask::FreeCSetClosure::TimerForRegion	file:
_start_time	g1GCParPhaseTimesTracker.hpp	/^  Ticks _start_time;$/;"	m	class:G1GCParPhaseTimesTracker
_start_time	g1MMUTracker.hpp	/^  double _start_time;$/;"	m	class:G1MMUTrackerQueueElem
_start_time_ms	g1ConcurrentMark.hpp	/^  double                      _start_time_ms;$/;"	m	class:G1CMTask
_state	g1ConcurrentMarkThread.hpp	/^  volatile State _state;$/;"	m	class:G1ConcurrentMarkThread
_state	heapRegionRemSet.hpp	/^  RemSetState _state;$/;"	m	class:HeapRegionRemSet
_state_strings	heapRegionRemSet.cpp	/^const char* HeapRegionRemSet::_state_strings[] =  {"Untracked", "Updating", "Complete"};$/;"	m	class:HeapRegionRemSet	file:
_state_strings	heapRegionRemSet.hpp	/^  static const char* _state_strings[];$/;"	m	class:HeapRegionRemSet
_states	g1ParScanThreadState.hpp	/^  G1ParScanThreadState** _states;$/;"	m	class:G1ParScanThreadStateSet
_static_mem_size	g1FromCardCache.cpp	/^size_t      G1FromCardCache::_static_mem_size = 0;$/;"	m	class:G1FromCardCache	file:
_static_mem_size	g1FromCardCache.hpp	/^  static size_t _static_mem_size;$/;"	m	class:G1FromCardCache
_stats	g1AllocRegion.hpp	/^  G1EvacStats* _stats;$/;"	m	class:G1GCAllocRegion
_stats	g1CollectedHeap.cpp	/^    FreeCSetStats*   _stats;$/;"	m	class:G1FreeCollectionSetTask::FreeCSetClosure	file:
_stats	g1DirtyCardQueue.cpp	/^  G1ConcurrentRefineStats* _stats;$/;"	m	class:G1RefineBufferedCards	file:
_stats	g1NUMA.hpp	/^  G1NUMAStats* _stats;$/;"	m	class:G1NUMA
_stats	g1RegionMarkStatsCache.hpp	/^    G1RegionMarkStats _stats;$/;"	m	struct:G1RegionMarkStatsCache::G1RegionMarkStatsCacheEntry
_stats_arrays_length	g1SurvRateGroup.hpp	/^  size_t  _stats_arrays_length;$/;"	m	class:G1SurvRateGroup
_step_times_ms	g1ConcurrentMark.hpp	/^  NumberSeq                   _step_times_ms;$/;"	m	class:G1CMTask
_stopped	g1GCPhaseTimes.hpp	/^  bool _stopped;$/;"	m	class:G1EvacPhaseWithTrimTimeTracker
_storage	g1RegionToSpaceMapper.hpp	/^  G1PageBasedVirtualSpace _storage;$/;"	m	class:G1RegionToSpaceMapper
_string_dedup_cleaning_task	g1FullGCAdjustTask.hpp	/^  StringDedupCleaningTask  _string_dedup_cleaning_task;$/;"	m	class:G1FullGCAdjustTask
_string_dedup_task	g1ParallelCleaning.hpp	/^  StringDedupCleaningTask _string_dedup_task;$/;"	m	class:G1ParallelCleaningTask
_strong	g1CodeBlobClosure.hpp	/^  bool _strong;$/;"	m	class:G1CodeBlobClosure
_strong	g1RootClosures.cpp	/^  G1SharedClosures<G1MarkFromRoot> _strong;$/;"	m	class:G1ConcurrentStartMarkClosures	file:
_strong_code_root_scan_time	g1RemSet.cpp	/^  Tickspan _strong_code_root_scan_time;$/;"	m	class:G1ScanCollectionSetRegionClosure	file:
_strong_code_trim_partially_time	g1RemSet.cpp	/^  Tickspan _strong_code_trim_partially_time;$/;"	m	class:G1ScanCollectionSetRegionClosure	file:
_sts	g1ServiceThread.cpp	/^  SuspendibleThreadSetJoiner* _sts;$/;"	m	class:G1YoungRemSetSamplingClosure	file:
_success	g1CollectedHeap.cpp	/^  bool _success;$/;"	m	class:NoYoungRegionsClosure	file:
_summary_bytes_used	g1Allocator.hpp	/^  size_t _summary_bytes_used;$/;"	m	class:G1ArchiveAllocator
_summary_bytes_used	g1CollectedHeap.hpp	/^  volatile size_t _summary_bytes_used;$/;"	m	class:G1CollectedHeap
_surv_rate_group	heapRegion.hpp	/^  G1SurvRateGroup* _surv_rate_group;$/;"	m	class:HeapRegion
_surv_rate_predictors	g1SurvRateGroup.hpp	/^  TruncatedSeq** _surv_rate_predictors;$/;"	m	class:G1SurvRateGroup
_surviving_words_length	g1ParScanThreadState.hpp	/^  size_t _surviving_words_length;$/;"	m	class:G1ParScanThreadState
_surviving_young_words	g1CollectedHeap.cpp	/^    const size_t*    _surviving_young_words;$/;"	m	class:G1FreeCollectionSetTask::FreeCSetClosure	file:
_surviving_young_words	g1CollectedHeap.cpp	/^  const size_t*     _surviving_young_words;$/;"	m	class:G1FreeCollectionSetTask	file:
_surviving_young_words	g1ParScanThreadState.hpp	/^  size_t* _surviving_young_words;$/;"	m	class:G1ParScanThreadState
_surviving_young_words_base	g1ParScanThreadState.hpp	/^  size_t* _surviving_young_words_base;$/;"	m	class:G1ParScanThreadState
_surviving_young_words_total	g1ParScanThreadState.hpp	/^  size_t* _surviving_young_words_total;$/;"	m	class:G1ParScanThreadStateSet
_survivor	g1CollectedHeap.hpp	/^  G1SurvivorRegions _survivor;$/;"	m	class:G1CollectedHeap
_survivor_alignment_bytes	g1Allocator.hpp	/^  const uint _survivor_alignment_bytes;$/;"	m	class:G1PLABAllocator
_survivor_evac_stats	g1CollectedHeap.hpp	/^  G1EvacStats _survivor_evac_stats;$/;"	m	class:G1CollectedHeap
_survivor_gc_alloc_regions	g1Allocator.hpp	/^  SurvivorGCAllocRegion* _survivor_gc_alloc_regions;$/;"	m	class:G1Allocator
_survivor_is_full	g1Allocator.hpp	/^  bool _survivor_is_full;$/;"	m	class:G1Allocator
_survivor_length	g1HeapTransition.hpp	/^    size_t _survivor_length;$/;"	m	struct:G1HeapTransition::Data
_survivor_length_per_node	g1HeapTransition.hpp	/^    uint* _survivor_length_per_node;$/;"	m	struct:G1HeapTransition::Data
_survivor_region_count	g1HeapTransition.cpp	/^  size_t _survivor_region_count;$/;"	m	struct:DetailedUsage	file:
_survivor_region_length	g1CollectionSet.hpp	/^  uint _survivor_region_length;$/;"	m	class:G1CollectionSet
_survivor_space_committed	g1MonitoringSupport.hpp	/^  size_t _survivor_space_committed;$/;"	m	class:G1MonitoringSupport
_survivor_space_pool	g1MonitoringSupport.hpp	/^  MemoryPool* _survivor_space_pool;$/;"	m	class:G1MonitoringSupport
_survivor_space_used	g1MonitoringSupport.hpp	/^  size_t _survivor_space_used;$/;"	m	class:G1MonitoringSupport
_survivor_surv_rate_group	g1Policy.hpp	/^  G1SurvRateGroup* _survivor_surv_rate_group;$/;"	m	class:G1Policy
_survivor_used	g1HeapTransition.cpp	/^  size_t _survivor_used;$/;"	m	struct:DetailedUsage	file:
_survivors_age_table	g1Policy.hpp	/^  AgeTable _survivors_age_table;$/;"	m	class:G1Policy
_suspendible	g1ConcurrentMark.cpp	/^  bool _suspendible; \/\/ If the task is suspendible, workers must join the STS.$/;"	m	class:G1ClearBitMapTask	file:
_svc_marker	g1FullGCScope.hpp	/^  SvcGCMarker             _svc_marker;$/;"	m	class:G1FullGCScope
_table	g1CodeCacheRemSet.hpp	/^  G1CodeRootSetTable* _table;$/;"	m	class:G1CodeRootSet
_table	sparsePRT.hpp	/^  RSHashTable* _table;$/;"	m	class:SparsePRT
_tag	heapRegionType.hpp	/^  volatile Tag _tag;$/;"	m	class:HeapRegionType
_tail	g1BufferNodeList.hpp	/^  BufferNode* _tail;            \/\/ Last node in list or NULL if empty.$/;"	m	struct:G1BufferNodeList
_tail	g1DirtyCardQueue.hpp	/^      BufferNode* _tail;$/;"	m	class:G1DirtyCardQueueSet::PausedBuffers::PausedList
_tail	g1DirtyCardQueue.hpp	/^    BufferNode* _tail;$/;"	m	struct:G1DirtyCardQueueSet::HeadTail
_tail	g1DirtyCardQueue.hpp	/^    BufferNode* volatile _tail;$/;"	m	class:G1DirtyCardQueueSet::Queue
_tail	g1RedirtyCardsQueue.hpp	/^  BufferNode* _tail;$/;"	m	class:G1RedirtyCardsQueueSet
_tail	heapRegionSet.hpp	/^  HeapRegion* _tail;$/;"	m	class:FreeRegionList
_tail_index	g1MMUTracker.hpp	/^  int                   _tail_index;$/;"	m	class:G1MMUTrackerQueue
_tail_size	g1PageBasedVirtualSpace.hpp	/^  size_t _tail_size;$/;"	m	class:G1PageBasedVirtualSpace
_tams	g1RemSet.cpp	/^      const HeapWord* _tams;$/;"	m	class:G1RebuildRemSetTask::G1RebuildRemSetHeapRegionClosure::LiveObjIterator	file:
_target	g1RegionMarkStatsCache.hpp	/^  G1RegionMarkStats* _target;$/;"	m	class:G1RegionMarkStatsCache
_target_occupancy	g1IHOPControl.hpp	/^  size_t _target_occupancy;$/;"	m	class:G1IHOPControl
_target_pause_time_ms	g1Policy.cpp	/^  const double _target_pause_time_ms;$/;"	m	class:G1YoungLengthPredictor	file:
_target_pause_time_ms	g1VMOperations.hpp	/^  double _target_pause_time_ms;$/;"	m	class:VM_G1CollectForAllocation
_target_pause_time_ms	g1VMOperations.hpp	/^  double _target_pause_time_ms;$/;"	m	class:VM_G1TryInitiateConcMark
_task	g1ConcurrentMark.cpp	/^  G1CMTask*         _task;$/;"	m	class:G1CMDrainMarkingStackClosure	file:
_task	g1ConcurrentMark.cpp	/^  G1CMTask*         _task;$/;"	m	class:G1CMKeepAliveAndDrainClosure	file:
_task	g1ConcurrentMark.cpp	/^  G1CMTask* _task;$/;"	m	class:G1CMSATBBufferClosure	file:
_task	g1ConcurrentMarkBitMap.hpp	/^  G1CMTask* const _task;$/;"	m	class:G1CMBitMapClosure
_task	g1ConcurrentMarkObjArrayProcessor.hpp	/^  G1CMTask* _task;$/;"	m	class:G1CMObjArrayProcessor
_task	g1OopClosures.hpp	/^  G1CMTask*          _task;$/;"	m	class:G1CMOopClosure
_task_queue	g1ConcurrentMark.hpp	/^  G1CMTaskQueue*              _task_queue;$/;"	m	class:G1CMTask
_task_queue	g1ParScanThreadState.hpp	/^  G1ScannerTasksQueue* _task_queue;$/;"	m	class:G1ParScanThreadState
_task_queues	g1CollectedHeap.cpp	/^  G1ScannerTasksQueueSet* _task_queues;$/;"	m	class:G1EvacuateRegionsBaseTask	file:
_task_queues	g1CollectedHeap.cpp	/^  G1ScannerTasksQueueSet* _task_queues;$/;"	m	class:G1STWRefProcTaskProxy	file:
_task_queues	g1CollectedHeap.hpp	/^  G1ScannerTasksQueueSet *_task_queues;$/;"	m	class:G1CollectedHeap
_task_queues	g1ConcurrentMark.hpp	/^  G1CMTaskQueueSet*       _task_queues; \/\/ Task queue set$/;"	m	class:G1ConcurrentMark
_tasks	g1ConcurrentMark.hpp	/^  G1CMTask**              _tasks;            \/\/ Task queue array (max_worker_id length)$/;"	m	class:G1ConcurrentMark
_tbl_ind	sparsePRT.hpp	/^  uint _tbl_ind;        \/\/ [0.._rsht->_capacity)$/;"	m	class:RSHashTableBucketIter
_tcs	g1MonitoringSupport.hpp	/^  TraceCollectorStats _tcs;$/;"	m	class:G1MonitoringScope
_tenuring_threshold	g1ParScanThreadState.hpp	/^  uint _tenuring_threshold;$/;"	m	class:G1ParScanThreadState
_tenuring_threshold	g1Policy.hpp	/^  uint _tenuring_threshold;$/;"	m	class:G1Policy
_term_attempts	g1CollectedHeap.hpp	/^  size_t _term_attempts;$/;"	m	class:G1ParEvacuateFollowersClosure
_term_time	g1CollectedHeap.hpp	/^  double _term_time;$/;"	m	class:G1ParEvacuateFollowersClosure
_terminating	g1VMOperations.hpp	/^  bool _terminating;$/;"	m	class:VM_G1TryInitiateConcMark
_termination_start_time_ms	g1ConcurrentMark.hpp	/^  double                      _termination_start_time_ms;$/;"	m	class:G1CMTask
_termination_time_ms	g1ConcurrentMark.hpp	/^  double                      _termination_time_ms;$/;"	m	class:G1CMTask
_terminator	g1CollectedHeap.cpp	/^  TaskTerminator _terminator;$/;"	m	class:G1EvacuateRegionsBaseTask	file:
_terminator	g1CollectedHeap.cpp	/^  TaskTerminator* _terminator;$/;"	m	class:G1STWRefProcTaskProxy	file:
_terminator	g1CollectedHeap.hpp	/^  TaskTerminator*               _terminator;$/;"	m	class:G1ParEvacuateFollowersClosure
_terminator	g1ConcurrentMark.hpp	/^  TaskTerminator          _terminator;  \/\/ For termination$/;"	m	class:G1ConcurrentMark
_terminator	g1FullGCMarkTask.hpp	/^  TaskTerminator           _terminator;$/;"	m	class:G1FullGCMarkTask
_terminator	g1FullGCReferenceProcessorExecutor.hpp	/^    TaskTerminator                _terminator;$/;"	m	class:G1FullGCReferenceProcessingExecutor::G1RefProcTaskProxy
_thread_control	g1ConcurrentRefine.hpp	/^  G1ConcurrentRefineThreadControl _thread_control;$/;"	m	class:G1ConcurrentRefine
_threads	g1ConcurrentRefine.hpp	/^  G1ConcurrentRefineThread** _threads;$/;"	m	class:G1ConcurrentRefineThreadControl
_threshold	g1FullGCCompactionPoint.hpp	/^  HeapWord*   _threshold;$/;"	m	class:G1FullGCCompactionPoint
_time	g1CollectedHeap.cpp	/^      Tickspan& _time;$/;"	m	class:G1FreeCollectionSetTask::FreeCSetClosure::TimerForRegion	file:
_time_slice	g1MMUTracker.hpp	/^  double          _time_slice;$/;"	m	class:G1MMUTracker
_time_target_ms	g1ConcurrentMark.hpp	/^  double                      _time_target_ms;$/;"	m	class:G1CMTask
_timer	g1FullGCScope.hpp	/^  STWGCTimer              _timer;$/;"	m	class:G1FullGCScope
_tms	g1MonitoringSupport.hpp	/^  TraceMemoryManagerStats _tms;$/;"	m	class:G1MonitoringScope
_to_space_counters	g1MonitoringSupport.hpp	/^  HSpaceCounters*      _to_space_counters;$/;"	m	class:G1MonitoringSupport
_top	g1Allocator.hpp	/^  HeapWord* _top;$/;"	m	class:G1ArchiveAllocator
_top	heapRegion.hpp	/^  HeapWord* volatile _top;$/;"	m	class:HeapRegion
_top_at_rebuild_starts	g1ConcurrentMark.hpp	/^  HeapWord* volatile* _top_at_rebuild_starts;$/;"	m	class:G1ConcurrentMark
_total	g1NUMA.hpp	/^  uint* _total;$/;"	m	class:G1NodeIndexCheckClosure
_total_capacity_bytes	g1ConcurrentMark.hpp	/^  size_t _total_capacity_bytes;$/;"	m	class:G1PrintRegionLivenessInfoClosure
_total_cleanup_time	g1ConcurrentMark.hpp	/^  double    _total_cleanup_time;$/;"	m	class:G1ConcurrentMark
_total_commited_before_full_gc	heterogeneousHeapRegionManager.hpp	/^  uint _total_commited_before_full_gc;$/;"	m	class:HeterogeneousHeapRegionManager
_total_next_live_bytes	g1ConcurrentMark.hpp	/^  size_t _total_next_live_bytes;$/;"	m	class:G1PrintRegionLivenessInfoClosure
_total_pause_time	g1ConcurrentStartToMixedTimeTracker.hpp	/^  double _total_pause_time;$/;"	m	class:G1ConcurrentStartToMixedTimeTracker
_total_prev_live_bytes	g1ConcurrentMark.hpp	/^  size_t _total_prev_live_bytes;$/;"	m	class:G1PrintRegionLivenessInfoClosure
_total_remset_bytes	g1ConcurrentMark.hpp	/^  size_t _total_remset_bytes;$/;"	m	class:G1PrintRegionLivenessInfoClosure
_total_selected_for_rebuild	g1ConcurrentMark.cpp	/^  uint volatile _total_selected_for_rebuild;$/;"	m	class:G1UpdateRemSetTrackingBeforeRebuildTask	file:
_total_strong_code_roots_bytes	g1ConcurrentMark.hpp	/^  size_t _total_strong_code_roots_bytes;$/;"	m	class:G1PrintRegionLivenessInfoClosure
_total_time	g1GCParPhaseTimesTracker.hpp	/^  Tickspan _total_time;$/;"	m	class:G1EvacPhaseTimesTracker
_total_time	g1GCPhaseTimes.hpp	/^  Tickspan& _total_time;$/;"	m	class:G1EvacPhaseWithTrimTimeTracker
_total_used	g1CollectedHeap.cpp	/^  size_t _total_used;$/;"	m	class:RebuildRegionSetsClosure	file:
_total_used_bytes	g1ConcurrentMark.hpp	/^  size_t _total_used_bytes;$/;"	m	class:G1PrintRegionLivenessInfoClosure
_tracer	g1FullGCScope.hpp	/^  G1FullGCTracer          _tracer;$/;"	m	class:G1FullGCScope
_transient_failure	g1VMOperations.hpp	/^  bool _transient_failure;$/;"	m	class:VM_G1TryInitiateConcMark
_trim_ticks	g1ParScanThreadState.hpp	/^  Tickspan _trim_ticks;$/;"	m	class:G1ParScanThreadState
_trim_time	g1GCParPhaseTimesTracker.hpp	/^  Tickspan _trim_time;$/;"	m	class:G1EvacPhaseTimesTracker
_trim_time	g1GCPhaseTimes.hpp	/^  Tickspan& _trim_time;$/;"	m	class:G1EvacPhaseWithTrimTimeTracker
_trim_tracker	g1GCParPhaseTimesTracker.hpp	/^  G1EvacPhaseWithTrimTimeTracker _trim_tracker;$/;"	m	class:G1EvacPhaseTimesTracker
_type	g1HeapRegionAttr.hpp	/^  region_type_t _type;$/;"	m	struct:G1HeapRegionAttr
_type	g1RegionToSpaceMapper.hpp	/^  MemoryType _type;$/;"	m	class:G1RegionToHeteroSpaceMapper
_type	g1Trace.hpp	/^  G1YCType _type;$/;"	m	class:G1YoungGCInfo
_type	heapRegion.hpp	/^  HeapRegionType _type;$/;"	m	class:HeapRegion
_unloading_occurred	g1ParallelCleaning.hpp	/^  bool                    _unloading_occurred;$/;"	m	class:G1ParallelCleaningTask
_unrealistically_long_length	heapRegionSet.cpp	/^uint FreeRegionList::_unrealistically_long_length = 0;$/;"	m	class:FreeRegionList	file:
_unrealistically_long_length	heapRegionSet.hpp	/^  static uint _unrealistically_long_length;$/;"	m	class:FreeRegionList
_update_cl	g1RemSet.cpp	/^    G1RebuildRemSetClosure _update_cl;$/;"	m	class:G1RebuildRemSetTask::G1RebuildRemSetHeapRegionClosure	file:
_usage	g1HeapTransition.cpp	/^  DetailedUsage _usage;$/;"	m	class:DetailedUsageClosure	file:
_use_adaptive_sizing	g1YoungGenSizer.hpp	/^  bool _use_adaptive_sizing;$/;"	m	class:G1YoungGenSizer
_use_cache	g1HotCardCache.hpp	/^  bool              _use_cache;$/;"	m	class:G1HotCardCache
_used	g1CollectedHeap.cpp	/^  size_t _used;$/;"	m	class:SumUsedClosure	file:
_used_bytes	g1EdenRegions.hpp	/^  volatile size_t _used_bytes;$/;"	m	class:G1EdenRegions
_used_bytes	g1SurvivorRegions.hpp	/^  volatile size_t             _used_bytes;$/;"	m	class:G1SurvivorRegions
_used_bytes_before	g1AllocRegion.hpp	/^  size_t _used_bytes_before;$/;"	m	class:G1AllocRegion
_used_memory	g1OopStarChunkedList.hpp	/^  size_t _used_memory;$/;"	m	class:G1OopStarChunkedList
_valid	g1CollectionSet.cpp	/^  bool _valid;$/;"	m	class:G1VerifyYoungAgesClosure	file:
_verifier	g1CollectedHeap.hpp	/^  G1HeapVerifier* _verifier;$/;"	m	class:G1CollectedHeap
_verifier	g1HeapVerifier.cpp	/^  G1HeapVerifier* _verifier;$/;"	m	class:G1VerifyBitmapClosure	file:
_verifier	g1HeapVerifier.cpp	/^  G1HeapVerifier* _verifier;$/;"	m	class:G1VerifyCardTableCleanup	file:
_verifier	g1HeapVerifier.cpp	/^  G1HeapVerifier* _verifier;$/;"	m	class:G1VerifyDirtyYoungListClosure	file:
_verify_closure	g1FullGCMarker.hpp	/^  G1VerifyOopClosure   _verify_closure;$/;"	m	class:G1FullGCMarker
_verify_in_progress	heapRegionSet.hpp	/^  bool _verify_in_progress;$/;"	m	class:HeapRegionSetBase
_verify_option	g1FullGCOopClosures.hpp	/^  VerifyOption     _verify_option;$/;"	m	class:G1VerifyOopClosure
_vo	g1HeapVerifier.cpp	/^  VerifyOption      _vo;$/;"	m	class:G1ParVerifyTask	file:
_vo	g1HeapVerifier.cpp	/^  VerifyOption     _vo;$/;"	m	class:VerifyRegionClosure	file:
_vo	g1HeapVerifier.cpp	/^  VerifyOption     _vo;$/;"	m	class:VerifyRootsClosure	file:
_vo	g1HeapVerifier.cpp	/^  VerifyOption _vo;$/;"	m	class:G1VerifyCodeRootOopClosure	file:
_vo	g1HeapVerifier.cpp	/^  VerifyOption _vo;$/;"	m	class:VerifyLivenessOopClosure	file:
_vo	g1HeapVerifier.cpp	/^  VerifyOption _vo;$/;"	m	class:VerifyObjsInRegionClosure	file:
_vo	heapRegion.cpp	/^  VerifyOption _vo;$/;"	m	class:G1VerificationClosure	file:
_vtime_accum	g1ConcurrentMarkThread.hpp	/^  double _vtime_accum;  \/\/ Accumulated virtual time.$/;"	m	class:G1ConcurrentMarkThread
_vtime_accum	g1ConcurrentRefineThread.hpp	/^  double _vtime_accum;  \/\/ Accumulated virtual time.$/;"	m	class:G1ConcurrentRefineThread
_vtime_accum	g1ServiceThread.hpp	/^  double _vtime_accum;  \/\/ Accumulated virtual time.$/;"	m	class:G1ServiceThread
_vtime_mark_accum	g1ConcurrentMarkThread.hpp	/^  double _vtime_mark_accum;$/;"	m	class:G1ConcurrentMarkThread
_vtime_start	g1ConcurrentMarkThread.hpp	/^  double _vtime_start;  \/\/ Initial virtual time.$/;"	m	class:G1ConcurrentMarkThread
_vtime_start	g1ConcurrentRefineThread.hpp	/^  double _vtime_start;  \/\/ Initial virtual time.$/;"	m	class:G1ConcurrentRefineThread
_wasted_bytes	g1AllocRegion.hpp	/^  size_t _wasted_bytes;$/;"	m	class:MutatorAllocRegion
_weak	g1RootClosures.cpp	/^  G1SharedClosures<MarkWeak>       _weak;$/;"	m	class:G1ConcurrentStartMarkClosures	file:
_weak_phase_times	g1GCPhaseTimes.hpp	/^  WeakProcessorPhaseTimes _weak_phase_times;$/;"	m	class:G1GCPhaseTimes
_weak_proc_task	g1FullGCAdjustTask.hpp	/^  WeakProcessor::Task      _weak_proc_task;$/;"	m	class:G1FullGCAdjustTask
_whitebox_attached	g1VMOperations.hpp	/^  bool _whitebox_attached;$/;"	m	class:VM_G1TryInitiateConcMark
_words_scanned	g1ConcurrentMark.hpp	/^  size_t                      _words_scanned;$/;"	m	class:G1CMTask
_words_scanned_limit	g1ConcurrentMark.hpp	/^  size_t                      _words_scanned_limit;$/;"	m	class:G1CMTask
_work	g1CodeBlobClosure.hpp	/^    OopClosure* _work;$/;"	m	class:G1CodeBlobClosure::HeapRegionGatheringOopClosure
_worker_chunk_size	heapRegionManager.cpp	/^  uint               _worker_chunk_size;$/;"	m	class:G1RebuildFreeListTask	file:
_worker_freelists	heapRegionManager.cpp	/^  FreeRegionList*    _worker_freelists;$/;"	m	class:G1RebuildFreeListTask	file:
_worker_humongous_candidates	g1CollectedHeap.cpp	/^    size_t _worker_humongous_candidates;$/;"	m	class:G1PrepareEvacuationTask::G1PrepareRegionsClosure	file:
_worker_humongous_total	g1CollectedHeap.cpp	/^    size_t _worker_humongous_total;$/;"	m	class:G1PrepareEvacuationTask::G1PrepareRegionsClosure	file:
_worker_id	g1CodeBlobClosure.hpp	/^    uint _worker_id;$/;"	m	class:G1CodeBlobClosure::MarkingOopClosure
_worker_id	g1CollectedHeap.cpp	/^    uint             _worker_id;$/;"	m	class:G1FreeCollectionSetTask::FreeCSetClosure	file:
_worker_id	g1ConcurrentMark.hpp	/^  uint                        _worker_id;$/;"	m	class:G1CMTask
_worker_id	g1ConcurrentRefineThread.hpp	/^  uint _worker_id;$/;"	m	class:G1ConcurrentRefineThread
_worker_id	g1DirtyCardQueue.cpp	/^  const uint _worker_id;$/;"	m	class:G1RefineBufferedCards	file:
_worker_id	g1EvacFailure.cpp	/^  uint _worker_id;$/;"	m	class:RemoveSelfForwardPtrHRClosure	file:
_worker_id	g1EvacFailure.cpp	/^  uint _worker_id;$/;"	m	class:RemoveSelfForwardPtrObjClosure	file:
_worker_id	g1FullGCAdjustTask.cpp	/^  uint _worker_id;$/;"	m	class:G1AdjustRegionClosure	file:
_worker_id	g1FullGCMarker.hpp	/^  uint               _worker_id;$/;"	m	class:G1FullGCMarker
_worker_id	g1FullGCOopClosures.hpp	/^  uint _worker_id;$/;"	m	class:G1MarkAndPushClosure
_worker_id	g1GCParPhaseTimesTracker.hpp	/^  uint _worker_id;$/;"	m	class:G1GCParPhaseTimesTracker
_worker_id	g1OopClosures.hpp	/^  uint _worker_id;              \/\/ Cache value from par_scan_state.$/;"	m	class:G1ParCopyHelper
_worker_id	g1OopClosures.hpp	/^  uint _worker_id;$/;"	m	class:G1ConcurrentRefineOopClosure
_worker_id	g1OopClosures.hpp	/^  uint _worker_id;$/;"	m	class:G1RebuildRemSetClosure
_worker_id	g1OopClosures.hpp	/^  uint _worker_id;$/;"	m	class:G1RootRegionScanClosure
_worker_id	g1ParScanThreadState.hpp	/^  uint _worker_id;$/;"	m	class:G1ParScanThreadState
_worker_id	g1RemSet.cpp	/^  uint   _worker_id;$/;"	m	class:G1ScanHRForRegionClosure	file:
_worker_id	g1RemSet.cpp	/^  uint _worker_id;$/;"	m	class:G1ScanCollectionSetRegionClosure	file:
_worker_id_offset	g1ConcurrentMark.hpp	/^  uint                    _worker_id_offset;$/;"	m	class:G1ConcurrentMark
_worker_id_offset	g1RemSet.cpp	/^  uint _worker_id_offset;$/;"	m	class:G1RebuildRemSetTask	file:
_worker_stats	g1CollectedHeap.cpp	/^  FreeCSetStats*    _worker_stats;$/;"	m	class:G1FreeCollectionSetTask	file:
_workers	g1CollectedHeap.cpp	/^  WorkGang*                 _workers;$/;"	m	class:G1STWRefProcTaskExecutor	file:
_workers	g1CollectedHeap.hpp	/^  WorkGang* _workers;$/;"	m	class:G1CollectedHeap
_workers	g1ConcurrentMark.cpp	/^  WorkGang*         _workers;$/;"	m	class:G1CMRefProcTaskExecutor	file:
_yellow_zone	g1ConcurrentRefine.hpp	/^  size_t _yellow_zone;$/;"	m	class:G1ConcurrentRefine
_young	g1RemSetSummary.cpp	/^  RegionTypeCounter _young;$/;"	m	class:HRRSStatsIter	file:
_young_card_merge_to_scan_ratio_seq	g1Analytics.hpp	/^  TruncatedSeq* _young_card_merge_to_scan_ratio_seq;$/;"	m	class:G1Analytics
_young_cost_per_card_merge_ms_seq	g1Analytics.hpp	/^  TruncatedSeq* _young_cost_per_card_merge_ms_seq;$/;"	m	class:G1Analytics
_young_cost_per_card_scan_ms_seq	g1Analytics.hpp	/^  TruncatedSeq* _young_cost_per_card_scan_ms_seq;$/;"	m	class:G1Analytics
_young_cset_length	g1ParScanThreadState.hpp	/^  size_t _young_cset_length;$/;"	m	class:G1ParScanThreadStateSet
_young_gen_committed	g1MonitoringSupport.hpp	/^  size_t _young_gen_committed;$/;"	m	class:G1MonitoringSupport
_young_gen_counters	g1MonitoringSupport.hpp	/^  GenerationCounters*  _young_gen_counters;$/;"	m	class:G1MonitoringSupport
_young_gen_sizer	g1Policy.hpp	/^  G1YoungGenSizer* _young_gen_sizer;$/;"	m	class:G1Policy
_young_index_in_cset	heapRegion.hpp	/^  uint  _young_index_in_cset;$/;"	m	class:HeapRegion
_young_length	g1CollectionSet.cpp	/^  size_t _young_length;$/;"	m	class:G1VerifyYoungCSetIndicesClosure	file:
_young_list_fixed_length	g1Policy.hpp	/^  uint _young_list_fixed_length;$/;"	m	class:G1Policy
_young_list_max_length	g1Policy.hpp	/^  uint _young_list_max_length;$/;"	m	class:G1Policy
_young_list_target_length	g1Policy.hpp	/^  uint _young_list_target_length;$/;"	m	class:G1Policy
_young_other_cost_per_region_ms_seq	g1Analytics.hpp	/^  TruncatedSeq* _young_other_cost_per_region_ms_seq;$/;"	m	class:G1Analytics
_young_ref_counter_closure	g1HeapVerifier.cpp	/^  YoungRefCounterClosure _young_ref_counter_closure;$/;"	m	class:VerifyCLDClosure	file:
_young_time	g1CollectedHeap.cpp	/^    Tickspan         _young_time;$/;"	m	class:G1FreeCollectionSetTask::FreeCSetClosure	file:
abandon	heapRegionSet.cpp	/^void FreeRegionList::abandon() {$/;"	f	class:FreeRegionList
abandon_collection_set	g1CollectedHeap.cpp	/^void G1CollectedHeap::abandon_collection_set(G1CollectionSet* collection_set) {$/;"	f	class:G1CollectedHeap
abandon_completed_buffers	g1DirtyCardQueue.cpp	/^void G1DirtyCardQueueSet::abandon_completed_buffers() {$/;"	f	class:G1DirtyCardQueueSet
abandon_gc_alloc_regions	g1Allocator.cpp	/^void G1Allocator::abandon_gc_alloc_regions() {$/;"	f	class:G1Allocator
abandon_logs	g1DirtyCardQueue.cpp	/^void G1DirtyCardQueueSet::abandon_logs() {$/;"	f	class:G1DirtyCardQueueSet
abandon_optional_collection_set	g1CollectionSet.cpp	/^void G1CollectionSet::abandon_optional_collection_set(G1ParScanThreadStateSet* pss) {$/;"	f	class:G1CollectionSet
abort	g1ConcurrentMark.hpp	/^  void abort() { _should_abort = true; }$/;"	f	class:G1CMRootMemRegions
abort_concurrent_cycle	g1CollectedHeap.cpp	/^void G1CollectedHeap::abort_concurrent_cycle() {$/;"	f	class:G1CollectedHeap
abort_marking_if_regular_check_fail	g1ConcurrentMark.inline.hpp	/^inline void G1CMTask::abort_marking_if_regular_check_fail() {$/;"	f	class:G1CMTask
abort_refinement	g1CollectedHeap.cpp	/^void G1CollectedHeap::abort_refinement() {$/;"	f	class:G1CollectedHeap
abort_time_to_mixed_tracking	g1Policy.cpp	/^void G1Policy::abort_time_to_mixed_tracking() {$/;"	f	class:G1Policy
about_to_start_mixed_phase	g1Policy.cpp	/^bool G1Policy::about_to_start_mixed_phase() const {$/;"	f	class:G1Policy
account_evacuated_region	g1CollectedHeap.cpp	/^    void account_evacuated_region(HeapRegion* r) {$/;"	f	class:G1FreeCollectionSetTask::FreeCSetStats
account_failed_region	g1CollectedHeap.cpp	/^    void account_failed_region(HeapRegion* r) {$/;"	f	class:G1FreeCollectionSetTask::FreeCSetStats
account_rs_length	g1CollectedHeap.cpp	/^    void account_rs_length(HeapRegion* r) {$/;"	f	class:G1FreeCollectionSetTask::FreeCSetStats
accum_surv_rate_pred	g1SurvRateGroup.hpp	/^  double accum_surv_rate_pred(int age) const {$/;"	f	class:G1SurvRateGroup
activate	g1ConcurrentRefineThread.cpp	/^void G1ConcurrentRefineThread::activate() {$/;"	f	class:G1ConcurrentRefineThread
activation_level	g1ConcurrentRefine.cpp	/^inline size_t activation_level(const Thresholds& t) { return t.first; }$/;"	f
activation_threshold	g1ConcurrentRefine.cpp	/^size_t G1ConcurrentRefine::activation_threshold(uint worker_id) const {$/;"	f	class:G1ConcurrentRefine
active_tasks	g1ConcurrentMark.hpp	/^  uint                active_tasks() { return _num_active_tasks; }$/;"	f	class:G1ConcurrentMark
actual_reserved_page_size	g1CollectedHeap.cpp	/^static size_t actual_reserved_page_size(ReservedSpace rs) {$/;"	f	file:
actual_target_threshold	g1IHOPControl.cpp	/^size_t G1AdaptiveIHOPControl::actual_target_threshold() const {$/;"	f	class:G1AdaptiveIHOPControl
add	g1CodeCacheRemSet.cpp	/^bool G1CodeRootSetTable::add(nmethod* nm) {$/;"	f	class:G1CodeRootSetTable
add	g1CodeCacheRemSet.cpp	/^void G1CodeRootSet::add(nmethod* method) {$/;"	f	class:G1CodeRootSet
add	g1ConcurrentMark.cpp	/^void G1CMRootMemRegions::add(HeapWord* start, HeapWord* end) {$/;"	f	class:G1CMRootMemRegions
add	g1DirtyCardQueue.cpp	/^void G1DirtyCardQueueSet::PausedBuffers::PausedList::add(BufferNode* node) {$/;"	f	class:G1DirtyCardQueueSet::PausedBuffers::PausedList
add	g1DirtyCardQueue.cpp	/^void G1DirtyCardQueueSet::PausedBuffers::add(BufferNode* node) {$/;"	f	class:G1DirtyCardQueueSet::PausedBuffers
add	g1EdenRegions.hpp	/^  virtual uint add(HeapRegion* hr) {$/;"	f	class:G1EdenRegions
add	g1FullGCCompactionPoint.cpp	/^void G1FullGCCompactionPoint::add(HeapRegion* hr) {$/;"	f	class:G1FullGCCompactionPoint
add	g1RegionsOnNodes.cpp	/^uint G1RegionsOnNodes::add(HeapRegion* hr) {$/;"	f	class:G1RegionsOnNodes
add	g1RemSetSummary.cpp	/^  void add(size_t rs_mem_size, size_t cards_occupied, size_t code_root_mem_size,$/;"	f	class:RegionTypeCounter
add	g1StringDedupStat.cpp	/^void G1StringDedupStat::add(const StringDedupStat* const stat) {$/;"	f	class:G1StringDedupStat
add	g1SurvivorRegions.cpp	/^uint G1SurvivorRegions::add(HeapRegion* hr) {$/;"	f	class:G1SurvivorRegions
add	heapRegionSet.cpp	/^void FreeRegionList::NodeInfo::add(NodeInfo* info) {$/;"	f	class:FreeRegionList::NodeInfo
add	heapRegionSet.inline.hpp	/^inline void HeapRegionSetBase::add(HeapRegion* hr) {$/;"	f	class:HeapRegionSetBase
add_all_dirty_region	g1RemSet.cpp	/^  void add_all_dirty_region(uint region) {$/;"	f	class:G1RemSetScanState
add_allocated_bytes_since_last_gc	g1OldGenAllocationTracker.hpp	/^  void add_allocated_bytes_since_last_gc(size_t bytes) { _allocated_bytes_since_last_gc += bytes; }$/;"	f	class:G1OldGenAllocationTracker
add_allocated_humongous_bytes_since_last_gc	g1OldGenAllocationTracker.hpp	/^  void add_allocated_humongous_bytes_since_last_gc(size_t bytes) { _allocated_humongous_bytes_since_last_gc += bytes; }$/;"	f	class:G1OldGenAllocationTracker
add_card	heapRegionRemSet.inline.hpp	/^inline bool PerRegionTable::add_card(CardIdx_t from_card_index) {$/;"	f	class:PerRegionTable
add_card	sparsePRT.cpp	/^SparsePRT::AddCardResult RSHashTable::add_card(RegionIdx_t region_ind, CardIdx_t card_index) {$/;"	f	class:RSHashTable
add_card	sparsePRT.cpp	/^SparsePRT::AddCardResult SparsePRT::add_card(RegionIdx_t region_id, CardIdx_t card_index) {$/;"	f	class:SparsePRT
add_card	sparsePRT.cpp	/^SparsePRT::AddCardResult SparsePRTEntry::add_card(CardIdx_t card_index) {$/;"	f	class:SparsePRTEntry
add_card_count	g1CardCounts.cpp	/^uint G1CardCounts::add_card_count(CardValue* card_ptr) {$/;"	f	class:G1CardCounts
add_chunk_to_chunk_list	g1ConcurrentMark.cpp	/^void G1CMMarkStack::add_chunk_to_chunk_list(TaskQueueEntryChunk* elem) {$/;"	f	class:G1CMMarkStack
add_chunk_to_free_list	g1ConcurrentMark.cpp	/^void G1CMMarkStack::add_chunk_to_free_list(TaskQueueEntryChunk* elem) {$/;"	f	class:G1CMMarkStack
add_chunk_to_list	g1ConcurrentMark.cpp	/^void G1CMMarkStack::add_chunk_to_list(TaskQueueEntryChunk* volatile* list, TaskQueueEntryChunk* elem) {$/;"	f	class:G1CMMarkStack
add_direct_allocated	g1EvacStats.inline.hpp	/^inline void G1EvacStats::add_direct_allocated(size_t value) {$/;"	f	class:G1EvacStats
add_dirty_region	g1RemSet.cpp	/^    void add_dirty_region(uint region) {$/;"	f	class:G1RemSetScanState::G1DirtyRegions
add_dirty_region	g1RemSet.cpp	/^  void add_dirty_region(uint const region) {$/;"	f	class:G1RemSetScanState
add_eden_region	g1CollectionSet.cpp	/^void G1CollectionSet::add_eden_region(HeapRegion* hr) {$/;"	f	class:G1CollectionSet
add_entry	sparsePRT.cpp	/^void RSHashTable::add_entry(SparsePRTEntry* e) {$/;"	f	class:RSHashTable
add_failure_used_and_waste	g1EvacStats.inline.hpp	/^inline void G1EvacStats::add_failure_used_and_waste(size_t used, size_t waste) {$/;"	f	class:G1EvacStats
add_humongous_candidates	g1CollectedHeap.cpp	/^  void add_humongous_candidates(size_t candidates) {$/;"	f	class:G1PrepareEvacuationTask
add_humongous_total	g1CollectedHeap.cpp	/^  void add_humongous_total(size_t total) {$/;"	f	class:G1PrepareEvacuationTask
add_list_common_end	heapRegionSet.cpp	/^void FreeRegionList::add_list_common_end(FreeRegionList* from_list) {$/;"	f	class:FreeRegionList
add_list_common_start	heapRegionSet.cpp	/^void FreeRegionList::add_list_common_start(FreeRegionList* from_list) {$/;"	f	class:FreeRegionList
add_live_words	g1RegionMarkStatsCache.hpp	/^  void add_live_words(uint region_idx, size_t live_words) {$/;"	f	class:G1RegionMarkStatsCache
add_marked_bytes_and_note_end	g1ConcurrentMark.cpp	/^    void add_marked_bytes_and_note_end(HeapRegion* hr, size_t marked_bytes) {$/;"	f	class:G1UpdateRemSetTrackingBeforeRebuildTask::G1UpdateRemSetTrackingBeforeRebuild	file:
add_old_region	g1CollectionSet.cpp	/^void G1CollectionSet::add_old_region(HeapRegion* hr) {$/;"	f	class:G1CollectionSet
add_optional_region	g1CollectionSet.cpp	/^void G1CollectionSet::add_optional_region(HeapRegion* hr) {$/;"	f	class:G1CollectionSet
add_ordered	heapRegionSet.cpp	/^void FreeRegionList::add_ordered(FreeRegionList* from_list) {$/;"	f	class:FreeRegionList
add_ordered	heapRegionSet.inline.hpp	/^inline void FreeRegionList::add_ordered(HeapRegion* hr) {$/;"	f	class:FreeRegionList
add_pause	g1ConcurrentStartToMixedTimeTracker.hpp	/^  void add_pause(double time) {$/;"	f	class:G1ConcurrentStartToMixedTimeTracker
add_pause	g1MMUTracker.cpp	/^void G1MMUTrackerQueue::add_pause(double start, double end) {$/;"	f	class:G1MMUTrackerQueue
add_reference	heapRegionRemSet.cpp	/^void OtherRegionsTable::add_reference(OopOrNarrowOopStar from, uint tid) {$/;"	f	class:OtherRegionsTable
add_reference	heapRegionRemSet.hpp	/^  void add_reference(OopOrNarrowOopStar from, uint tid) {$/;"	f	class:HeapRegionRemSet
add_reference	heapRegionRemSet.inline.hpp	/^inline bool PerRegionTable::add_reference(OopOrNarrowOopStar from) {$/;"	f	class:PerRegionTable
add_region	g1CollectionSetChooser.cpp	/^    void add_region(HeapRegion* hr) {$/;"	f	class:G1BuildCandidateRegionsTask::G1BuildCandidateRegionsClosure	file:
add_region_end_waste	g1EvacStats.inline.hpp	/^inline void G1EvacStats::add_region_end_waste(size_t value) {$/;"	f	class:G1EvacStats
add_strong_code_root	heapRegion.cpp	/^void HeapRegion::add_strong_code_root(nmethod* nm) {$/;"	f	class:HeapRegion
add_strong_code_root	heapRegionRemSet.cpp	/^void HeapRegionRemSet::add_strong_code_root(nmethod* nm) {$/;"	f	class:HeapRegionRemSet
add_strong_code_root_locked	heapRegion.cpp	/^void HeapRegion::add_strong_code_root_locked(nmethod* nm) {$/;"	f	class:HeapRegion
add_strong_code_root_locked	heapRegionRemSet.cpp	/^void HeapRegionRemSet::add_strong_code_root_locked(nmethod* nm) {$/;"	f	class:HeapRegionRemSet
add_survivor_regions	g1CollectionSet.cpp	/^void G1CollectionSet::add_survivor_regions(HeapRegion* hr) {$/;"	f	class:G1CollectionSet
add_time_secs	g1GCPhaseTimes.cpp	/^void G1GCPhaseTimes::add_time_secs(GCParPhases phase, uint worker_id, double secs) {$/;"	f	class:G1GCPhaseTimes
add_to_liveness	g1ConcurrentMark.inline.hpp	/^inline void G1ConcurrentMark::add_to_liveness(uint worker_id, oop const obj, size_t size) {$/;"	f	class:G1ConcurrentMark
add_to_marked_bytes	heapRegion.hpp	/^  void add_to_marked_bytes(size_t incr_bytes) {$/;"	f	class:HeapRegion
add_to_tail	heapRegionSet.inline.hpp	/^inline void FreeRegionList::add_to_tail(HeapRegion* region_to_add) {$/;"	f	class:FreeRegionList
add_used_bytes	g1EdenRegions.hpp	/^  void add_used_bytes(size_t used_bytes) {$/;"	f	class:G1EdenRegions
add_used_bytes	g1SurvivorRegions.cpp	/^void G1SurvivorRegions::add_used_bytes(size_t used_bytes) {$/;"	f	class:G1SurvivorRegions
add_young_region_common	g1CollectionSet.cpp	/^void G1CollectionSet::add_young_region_common(HeapRegion* hr) {$/;"	f	class:G1CollectionSet
added	sparsePRT.hpp	/^    added     \/\/ The card has been added.$/;"	e	enum:SparsePRT::AddCardResult
addr	c1/g1BarrierSetC1.hpp	/^  LIR_Opr addr() const { return _addr; }$/;"	f	class:G1PostBarrierStub
addr	c1/g1BarrierSetC1.hpp	/^  LIR_Opr addr() const { return _addr; }$/;"	f	class:G1PreBarrierStub
addr_to_page_index	g1PageBasedVirtualSpace.cpp	/^size_t G1PageBasedVirtualSpace::addr_to_page_index(char* addr) const {$/;"	f	class:G1PageBasedVirtualSpace
addr_to_region	g1CollectedHeap.inline.hpp	/^inline uint G1CollectedHeap::addr_to_region(HeapWord* addr) const {$/;"	f	class:G1CollectedHeap
addr_to_region	heapRegionManager.inline.hpp	/^inline HeapRegion* HeapRegionManager::addr_to_region(HeapWord* addr) const {$/;"	f	class:HeapRegionManager
address_for_index	g1BlockOffsetTable.inline.hpp	/^inline HeapWord* G1BlockOffsetTable::address_for_index(size_t index) const {$/;"	f	class:G1BlockOffsetTable
address_for_index_raw	g1BlockOffsetTable.hpp	/^  inline HeapWord* address_for_index_raw(size_t index) const {$/;"	f	class:G1BlockOffsetTable
address_mapped_to	g1BiasedArray.hpp	/^  T* address_mapped_to(HeapWord* address) {$/;"	f	class:G1BiasedMappedArray
adjust	g1ConcurrentRefine.cpp	/^void G1ConcurrentRefine::adjust(double logged_cards_scan_time,$/;"	f	class:G1ConcurrentRefine
adjust_dram_regions	heterogeneousHeapRegionManager.cpp	/^void HeterogeneousHeapRegionManager::adjust_dram_regions(uint expected_num_regions, WorkGang* pretouch_workers) {$/;"	f	class:HeterogeneousHeapRegionManager
adjust_lengths_based_on_dram_memory	g1HeterogeneousHeapYoungGenSizer.cpp	/^void G1HeterogeneousHeapYoungGenSizer::adjust_lengths_based_on_dram_memory() {$/;"	f	class:G1HeterogeneousHeapYoungGenSizer
adjust_max_new_size	g1HeterogeneousHeapYoungGenSizer.cpp	/^void G1HeterogeneousHeapYoungGenSizer::adjust_max_new_size(uint number_of_heap_regions) {$/;"	f	class:G1HeterogeneousHeapYoungGenSizer
adjust_max_new_size	g1YoungGenSizer.cpp	/^void G1YoungGenSizer::adjust_max_new_size(uint number_of_heap_regions) {$/;"	f	class:G1YoungGenSizer
adjust_pointer	g1FullGCOopClosures.inline.hpp	/^template <class T> inline void G1AdjustClosure::adjust_pointer(T* p) {$/;"	f	class:G1AdjustClosure
age_in_group	g1SurvRateGroup.hpp	/^  int age_in_group(int age_index) const {$/;"	f	class:G1SurvRateGroup
age_in_surv_rate_group	heapRegion.inline.hpp	/^inline int HeapRegion::age_in_surv_rate_group() const {$/;"	f	class:HeapRegion
align_up_to_region_byte_size	heapRegion.hpp	/^  static size_t align_up_to_region_byte_size(size_t sz) {$/;"	f	class:HeapRegion
all_completed_buffers	g1RedirtyCardsQueue.cpp	/^BufferNode* G1RedirtyCardsQueueSet::all_completed_buffers() const {$/;"	f	class:G1RedirtyCardsQueueSet
all_surviving_words_recorded	g1SurvRateGroup.cpp	/^void G1SurvRateGroup::all_surviving_words_recorded(const G1Predictions& predictor, bool update_predictors) {$/;"	f	class:G1SurvRateGroup
all_task_accum_vtime	g1ConcurrentMark.hpp	/^  double all_task_accum_vtime() {$/;"	f	class:G1ConcurrentMark
alloc	g1HRPrinter.hpp	/^  void alloc(HeapRegion* hr, bool force = false) {$/;"	f	class:G1HRPrinter
alloc	heapRegionRemSet.cpp	/^PerRegionTable* PerRegionTable::alloc(HeapRegion* hr) {$/;"	f	class:PerRegionTable
alloc_archive_regions	g1CollectedHeap.cpp	/^bool G1CollectedHeap::alloc_archive_regions(MemRegion* ranges,$/;"	f	class:G1CollectedHeap
alloc_block	g1BlockOffsetTable.hpp	/^  void alloc_block(HeapWord* blk, size_t size) {$/;"	f	class:G1BlockOffsetTablePart
alloc_block	g1BlockOffsetTable.hpp	/^  void alloc_block(HeapWord* blk_start, HeapWord* blk_end) {$/;"	f	class:G1BlockOffsetTablePart
alloc_block_work	g1BlockOffsetTable.cpp	/^void G1BlockOffsetTablePart::alloc_block_work(HeapWord** threshold_, size_t* index_,$/;"	f	class:G1BlockOffsetTablePart
alloc_buffer	g1Allocator.inline.hpp	/^inline PLAB* G1PLABAllocator::alloc_buffer(G1HeapRegionAttr dest, uint node_index) const {$/;"	f	class:G1PLABAllocator
alloc_buffer	g1Allocator.inline.hpp	/^inline PLAB* G1PLABAllocator::alloc_buffer(region_type_t dest, uint node_index) const {$/;"	f	class:G1PLABAllocator
alloc_buffer_stats	g1CollectedHeap.inline.hpp	/^G1EvacStats* G1CollectedHeap::alloc_buffer_stats(G1HeapRegionAttr dest) {$/;"	f	class:G1CollectedHeap
alloc_buffers_length	g1Allocator.inline.hpp	/^inline uint G1PLABAllocator::alloc_buffers_length(region_type_t dest) const {$/;"	f	class:G1PLABAllocator
alloc_entry	sparsePRT.cpp	/^int RSHashTable::alloc_entry() {$/;"	f	class:RSHashTable
alloc_highest_free_region	g1CollectedHeap.cpp	/^HeapRegion* G1CollectedHeap::alloc_highest_free_region() {$/;"	f	class:G1CollectedHeap
alloc_new_region	g1Allocator.cpp	/^bool G1ArchiveAllocator::alloc_new_region() {$/;"	f	class:G1ArchiveAllocator
alloc_regions_used_before	g1EvacuationInfo.hpp	/^  size_t alloc_regions_used_before() { return _alloc_regions_used_before; }$/;"	f	class:G1EvacuationInfo
allocate	g1AllocRegion.inline.hpp	/^inline HeapWord* G1AllocRegion::allocate(HeapRegion* alloc_region,$/;"	f	class:G1AllocRegion
allocate	g1Allocator.inline.hpp	/^inline HeapWord* G1PLABAllocator::allocate(G1HeapRegionAttr dest,$/;"	f	class:G1PLABAllocator
allocate	heapRegion.inline.hpp	/^inline HeapWord* HeapRegion::allocate(size_t min_word_size,$/;"	f	class:HeapRegion
allocate	heapRegion.inline.hpp	/^inline HeapWord* HeapRegion::allocate(size_t word_size) {$/;"	f	class:HeapRegion
allocate_containing_regions	heapRegionManager.cpp	/^bool HeapRegionManager::allocate_containing_regions(MemRegion range, size_t* commit_count, WorkGang* pretouch_workers) {$/;"	f	class:HeapRegionManager
allocate_copy_slow	g1ParScanThreadState.cpp	/^HeapWord* G1ParScanThreadState::allocate_copy_slow(G1HeapRegionAttr* dest_attr,$/;"	f	class:G1ParScanThreadState
allocate_direct_or_new_plab	g1Allocator.cpp	/^HeapWord* G1PLABAllocator::allocate_direct_or_new_plab(G1HeapRegionAttr dest,$/;"	f	class:G1PLABAllocator
allocate_dummy_regions	g1CollectedHeap.cpp	/^void G1CollectedHeap::allocate_dummy_regions() {$/;"	f	class:G1CollectedHeap
allocate_free_region	heapRegionManager.cpp	/^HeapRegion* HeapRegionManager::allocate_free_region(HeapRegionType type, uint requested_node_index) {$/;"	f	class:HeapRegionManager
allocate_free_region	heterogeneousHeapRegionManager.cpp	/^HeapRegion* HeterogeneousHeapRegionManager::allocate_free_region(HeapRegionType type, uint node_index) {$/;"	f	class:HeterogeneousHeapRegionManager
allocate_free_regions_starting_at	heapRegionManager.inline.hpp	/^inline HeapRegion* HeapRegionManager::allocate_free_regions_starting_at(uint first, uint num_regions) {$/;"	f	class:HeapRegionManager
allocate_humongous	heapRegionManager.cpp	/^HeapRegion* HeapRegionManager::allocate_humongous(uint num_regions) {$/;"	f	class:HeapRegionManager
allocate_humongous_allow_expand	heapRegionManager.cpp	/^HeapRegion* HeapRegionManager::allocate_humongous_allow_expand(uint num_regions) {$/;"	f	class:HeapRegionManager
allocate_humongous_allow_expand	heterogeneousHeapRegionManager.cpp	/^HeapRegion* HeterogeneousHeapRegionManager::allocate_humongous_allow_expand(uint num_regions) {$/;"	f	class:HeterogeneousHeapRegionManager
allocate_humongous_from_free_list	heapRegionManager.cpp	/^HeapRegion* HeapRegionManager::allocate_humongous_from_free_list(uint num_regions) {$/;"	f	class:HeapRegionManager
allocate_humongous_from_free_list	heterogeneousHeapRegionManager.cpp	/^HeapRegion* HeterogeneousHeapRegionManager::allocate_humongous_from_free_list(uint num_regions) {$/;"	f	class:HeterogeneousHeapRegionManager
allocate_impl	heapRegion.inline.hpp	/^inline HeapWord* HeapRegion::allocate_impl(size_t min_word_size,$/;"	f	class:HeapRegion
allocate_in_next_plab	g1ParScanThreadState.cpp	/^HeapWord* G1ParScanThreadState::allocate_in_next_plab(G1HeapRegionAttr* dest,$/;"	f	class:G1ParScanThreadState
allocate_new_chunk	g1ConcurrentMark.cpp	/^G1CMMarkStack::TaskQueueEntryChunk* G1CMMarkStack::allocate_new_chunk() {$/;"	f	class:G1CMMarkStack
allocate_new_region	g1AllocRegion.cpp	/^HeapRegion* G1GCAllocRegion::allocate_new_region(size_t word_size,$/;"	f	class:G1GCAllocRegion
allocate_new_region	g1AllocRegion.cpp	/^HeapRegion* MutatorAllocRegion::allocate_new_region(size_t word_size,$/;"	f	class:MutatorAllocRegion
allocate_new_tlab	g1CollectedHeap.cpp	/^HeapWord* G1CollectedHeap::allocate_new_tlab(size_t min_size,$/;"	f	class:G1CollectedHeap
allocate_no_bot_updates	heapRegion.inline.hpp	/^inline HeapWord* HeapRegion::allocate_no_bot_updates(size_t min_word_size,$/;"	f	class:HeapRegion
allocate_no_bot_updates	heapRegion.inline.hpp	/^inline HeapWord* HeapRegion::allocate_no_bot_updates(size_t word_size) {$/;"	f	class:HeapRegion
allocate_small_table	g1CodeCacheRemSet.cpp	/^void G1CodeRootSet::allocate_small_table() {$/;"	f	class:G1CodeRootSet
allocation_regions	g1EvacuationInfo.hpp	/^  uint   allocation_regions()        { return _allocation_regions; }$/;"	f	class:G1EvacuationInfo
allocator	g1CollectedHeap.hpp	/^  G1Allocator* allocator() {$/;"	f	class:G1CollectedHeap
amount	g1RemSetSummary.cpp	/^  size_t amount() const { return _amount; }$/;"	f	class:RegionTypeCounter	file:
analytics	g1Policy.hpp	/^  const G1Analytics* analytics()   const { return const_cast<const G1Analytics*>(_analytics); }$/;"	f	class:G1Policy
append	g1DirtyCardQueue.cpp	/^void G1DirtyCardQueueSet::Queue::append(BufferNode& first, BufferNode& last) {$/;"	f	class:G1DirtyCardQueueSet::Queue
append_ordered	heapRegionSet.cpp	/^void FreeRegionList::append_ordered(FreeRegionList* from_list) {$/;"	f	class:FreeRegionList
append_prev_collection_pause_end_ms	g1Analytics.hpp	/^  void append_prev_collection_pause_end_ms(double ms) {$/;"	f	class:G1Analytics
apply	g1FullGCAdjustTask.cpp	/^  size_t apply(oop object) {$/;"	f	class:G1AdjustLiveClosure
apply	g1FullGCCompactTask.cpp	/^size_t G1FullGCCompactTask::G1CompactRegionClosure::apply(oop obj) {$/;"	f	class:G1FullGCCompactTask::G1CompactRegionClosure
apply	g1FullGCPrepareTask.cpp	/^size_t G1FullGCPrepareTask::G1PrepareCompactLiveClosure::apply(oop object) {$/;"	f	class:G1FullGCPrepareTask::G1PrepareCompactLiveClosure
apply	g1FullGCPrepareTask.cpp	/^size_t G1FullGCPrepareTask::G1RePrepareClosure::apply(oop obj) {$/;"	f	class:G1FullGCPrepareTask::G1RePrepareClosure
apply_closure_to_dirty_card_buffers	g1RemSet.cpp	/^  void apply_closure_to_dirty_card_buffers(G1MergeLogBufferCardsClosure* cl, uint worker_id) {$/;"	f	class:G1MergeHeapRootsTask	file:
apply_to_buffer	g1CardTableEntryClosure.hpp	/^  void apply_to_buffer(BufferNode* node, size_t buffer_size, uint worker_id) {$/;"	f	class:G1CardTableEntryClosure
apply_to_marked_objects	heapRegion.inline.hpp	/^inline void HeapRegion::apply_to_marked_objects(G1CMBitMap* bitmap, ApplyToMarkedClosure* closure) {$/;"	f	class:HeapRegion
archive_check_enabled	g1Allocator.inline.hpp	/^inline bool G1ArchiveAllocator::archive_check_enabled() {$/;"	f	class:G1ArchiveAllocator
archive_mem_allocate	g1Allocator.cpp	/^HeapWord* G1ArchiveAllocator::archive_mem_allocate(size_t word_size) {$/;"	f	class:G1ArchiveAllocator
archive_mem_allocate	g1CollectedHeap.cpp	/^HeapWord* G1CollectedHeap::archive_mem_allocate(size_t word_size) {$/;"	f	class:G1CollectedHeap
archive_regions_count	g1CollectedHeap.hpp	/^  uint archive_regions_count() const { return _archive_set.length(); }$/;"	f	class:G1CollectedHeap
archive_set_add	g1CollectedHeap.inline.hpp	/^inline void G1CollectedHeap::archive_set_add(HeapRegion* hr) {$/;"	f	class:G1CollectedHeap
array	g1BlockOffsetTable.cpp	/^  _bot(array),$/;"	v
array_queue_set	g1FullCollector.hpp	/^  ObjArrayTaskQueueSet*    array_queue_set() { return &_array_queue_set; }$/;"	f	class:G1FullCollector
assert_alloc_region	g1AllocRegion.inline.hpp	31;"	d
assert_at_safepoint_on_vm_thread	g1CollectedHeap.hpp	366;"	d
assert_contiguous_range	heapRegionManager.cpp	/^void HeapRegionManager::assert_contiguous_range(uint start, uint num_regions) {$/;"	f	class:HeapRegionManager
assert_free_region_list	heapRegionSet.hpp	43;"	d
assert_heap_locked	g1CollectedHeap.hpp	329;"	d
assert_heap_locked_and_not_at_safepoint	g1CollectedHeap.hpp	344;"	d
assert_heap_locked_or_at_safepoint	g1CollectedHeap.hpp	335;"	d
assert_heap_not_locked	g1CollectedHeap.hpp	352;"	d
assert_heap_not_locked_and_not_at_safepoint	g1CollectedHeap.hpp	358;"	d
assert_heap_region_set	heapRegionSet.hpp	31;"	d
assert_in_cset	g1CollectedHeap.cpp	/^    void assert_in_cset(HeapRegion* r) {$/;"	f	class:G1FreeCollectionSetTask::FreeCSetClosure	file:
assert_used_and_recalculate_used_equal	g1CollectedHeap.hpp	374;"	d
assert_used_and_recalculate_used_equal	g1CollectedHeap.hpp	383;"	d
assert_zone_constraints_g	g1ConcurrentRefine.cpp	145;"	d	file:
assert_zone_constraints_gy	g1ConcurrentRefine.cpp	153;"	d	file:
assert_zone_constraints_gyr	g1ConcurrentRefine.cpp	166;"	d	file:
at	g1CollectionSetCandidates.hpp	/^  HeapRegion* at(uint idx) const {$/;"	f	class:G1CollectionSetCandidates
at	g1FromCardCache.hpp	/^  static uintptr_t at(uint worker_id, uint region_idx) {$/;"	f	class:G1FromCardCache
at	g1HeapRegionAttr.hpp	/^  G1HeapRegionAttr at(HeapWord* addr) const { return get_by_address(addr); }$/;"	f	class:G1HeapRegionAttrBiasedMappedArray
at	g1RemSet.cpp	/^    uint at(uint idx) const {$/;"	f	class:G1RemSetScanState::G1DirtyRegions
at	heapRegionManager.inline.hpp	/^inline HeapRegion* HeapRegionManager::at(uint index) const {$/;"	f	class:HeapRegionManager
at_or_null	heapRegionManager.inline.hpp	/^inline HeapRegion* HeapRegionManager::at_or_null(uint index) const {$/;"	f	class:HeapRegionManager
attempt_allocation	g1AllocRegion.inline.hpp	/^inline HeapWord* G1AllocRegion::attempt_allocation(size_t min_word_size,$/;"	f	class:G1AllocRegion
attempt_allocation	g1AllocRegion.inline.hpp	/^inline HeapWord* G1AllocRegion::attempt_allocation(size_t word_size) {$/;"	f	class:G1AllocRegion
attempt_allocation	g1Allocator.inline.hpp	/^inline HeapWord* G1Allocator::attempt_allocation(size_t min_word_size,$/;"	f	class:G1Allocator
attempt_allocation	g1CollectedHeap.cpp	/^inline HeapWord* G1CollectedHeap::attempt_allocation(size_t min_word_size,$/;"	f	class:G1CollectedHeap
attempt_allocation_at_safepoint	g1CollectedHeap.cpp	/^HeapWord* G1CollectedHeap::attempt_allocation_at_safepoint(size_t word_size,$/;"	f	class:G1CollectedHeap
attempt_allocation_force	g1AllocRegion.inline.hpp	/^inline HeapWord* G1AllocRegion::attempt_allocation_force(size_t word_size) {$/;"	f	class:G1AllocRegion
attempt_allocation_force	g1Allocator.inline.hpp	/^inline HeapWord* G1Allocator::attempt_allocation_force(size_t word_size) {$/;"	f	class:G1Allocator
attempt_allocation_humongous	g1CollectedHeap.cpp	/^HeapWord* G1CollectedHeap::attempt_allocation_humongous(size_t word_size) {$/;"	f	class:G1CollectedHeap
attempt_allocation_locked	g1AllocRegion.inline.hpp	/^inline HeapWord* G1AllocRegion::attempt_allocation_locked(size_t min_word_size,$/;"	f	class:G1AllocRegion
attempt_allocation_locked	g1AllocRegion.inline.hpp	/^inline HeapWord* G1AllocRegion::attempt_allocation_locked(size_t word_size) {$/;"	f	class:G1AllocRegion
attempt_allocation_locked	g1Allocator.inline.hpp	/^inline HeapWord* G1Allocator::attempt_allocation_locked(size_t word_size) {$/;"	f	class:G1Allocator
attempt_allocation_slow	g1CollectedHeap.cpp	/^HeapWord* G1CollectedHeap::attempt_allocation_slow(size_t word_size) {$/;"	f	class:G1CollectedHeap
attempt_retained_allocation	g1AllocRegion.inline.hpp	/^inline HeapWord* MutatorAllocRegion::attempt_retained_allocation(size_t min_word_size,$/;"	f	class:MutatorAllocRegion
available	heapRegionManager.hpp	/^  uint available() const { return max_length() - length(); }$/;"	f	class:HeapRegionManager
average_time_ms	g1GCPhaseTimes.cpp	/^double G1GCPhaseTimes::average_time_ms(GCParPhases phase) {$/;"	f	class:G1GCPhaseTimes
average_time_ms	g1Policy.cpp	/^double G1Policy::average_time_ms(G1GCPhaseTimes::GCParPhases phase) const {$/;"	f	class:G1Policy
base	g1BiasedArray.hpp	/^  T* base() const { return (T*)G1BiasedMappedArrayBase::_base; }$/;"	f	class:G1BiasedMappedArray
begin_archive_alloc_range	g1CollectedHeap.cpp	/^void G1CollectedHeap::begin_archive_alloc_range(bool open) {$/;"	f	class:G1CollectedHeap
bias	g1BiasedArray.hpp	/^  size_t bias() const { return _bias; }$/;"	f	class:G1BiasedMappedArrayBase
biased_base	g1BiasedArray.hpp	/^  T* biased_base() const { return (T*)G1BiasedMappedArrayBase::_biased_base; }$/;"	f	class:G1BiasedMappedArray
bitmap_limit	g1RemSet.cpp	/^      HeapWord* bitmap_limit() const {$/;"	f	class:G1RebuildRemSetTask::G1RebuildRemSetHeapRegionClosure::LiveObjIterator	file:
block_at_or_preceding	g1BlockOffsetTable.inline.hpp	/^inline HeapWord* G1BlockOffsetTablePart::block_at_or_preceding(const void* addr,$/;"	f	class:G1BlockOffsetTablePart
block_is_obj	g1CollectedHeap.cpp	/^bool G1CollectedHeap::block_is_obj(const HeapWord* addr) const {$/;"	f	class:G1CollectedHeap
block_is_obj	heapRegion.inline.hpp	/^inline bool HeapRegion::block_is_obj(const HeapWord* p) const {$/;"	f	class:HeapRegion
block_size	g1BlockOffsetTable.inline.hpp	/^inline size_t G1BlockOffsetTablePart::block_size(const HeapWord* p) const {$/;"	f	class:G1BlockOffsetTablePart
block_size	heapRegion.inline.hpp	/^inline size_t HeapRegion::block_size(const HeapWord *addr) const {$/;"	f	class:HeapRegion
block_size_using_bitmap	heapRegion.inline.hpp	/^inline size_t HeapRegion::block_size_using_bitmap(const HeapWord* addr, const G1CMBitMap* const prev_bitmap) const {$/;"	f	class:HeapRegion
block_start	g1BlockOffsetTable.inline.hpp	/^inline HeapWord* G1BlockOffsetTablePart::block_start(const void* addr) {$/;"	f	class:G1BlockOffsetTablePart
block_start	g1CollectedHeap.cpp	/^HeapWord* G1CollectedHeap::block_start(const void* addr) const {$/;"	f	class:G1CollectedHeap
block_start	heapRegion.inline.hpp	/^inline HeapWord* HeapRegion::block_start(const void* p) {$/;"	f	class:HeapRegion
block_start_const	g1BlockOffsetTable.inline.hpp	/^inline HeapWord* G1BlockOffsetTablePart::block_start_const(const void* addr) const {$/;"	f	class:G1BlockOffsetTablePart
block_start_const	heapRegion.inline.hpp	/^inline HeapWord* HeapRegion::block_start_const(const void* p) const {$/;"	f	class:HeapRegion
blocks_scanned	g1RemSet.cpp	/^  size_t blocks_scanned() const { return _blocks_scanned; }$/;"	f	class:G1ScanHRForRegionClosure
bm	heapRegionRemSet.hpp	/^  BitMap* bm() { return &_bm; }$/;"	f	class:PerRegionTable
borrow_old_region_for_gc	heterogeneousHeapRegionManager.cpp	/^HeapRegion* HeterogeneousHeapRegionManager::borrow_old_region_for_gc() {$/;"	f	class:HeterogeneousHeapRegionManager
bot	g1CollectedHeap.hpp	/^  G1BlockOffsetTable* bot() const { return _bot; }$/;"	f	class:G1CollectedHeap
bottom	heapRegion.hpp	/^  HeapWord* bottom() const         { return _bottom; }$/;"	f	class:HeapRegion
bottom_addr_for_region	g1CollectedHeap.inline.hpp	/^inline HeapWord* G1CollectedHeap::bottom_addr_for_region(uint index) const {$/;"	f	class:G1CollectedHeap
bottom_address_mapped	g1BiasedArray.hpp	/^  HeapWord* bottom_address_mapped() const {$/;"	f	class:G1BiasedMappedArray
bounded_end_addr	g1PageBasedVirtualSpace.cpp	/^char* G1PageBasedVirtualSpace::bounded_end_addr(size_t end_page) const {$/;"	f	class:G1PageBasedVirtualSpace
buffers_to_cards	g1ConcurrentRefine.cpp	/^static size_t buffers_to_cards(size_t value) {$/;"	f	file:
build	g1CollectionSetChooser.cpp	/^G1CollectionSetCandidates* G1CollectionSetChooser::build(WorkGang* workers, uint max_num_regions) {$/;"	f	class:G1CollectionSetChooser
bulk_free	heapRegionRemSet.hpp	/^  static void bulk_free(PerRegionTable* prt, PerRegionTable* last) {$/;"	f	class:PerRegionTable
bulk_remove	heapRegionSet.hpp	/^  void bulk_remove(const uint removed) {$/;"	f	class:HeapRegionSet
byte_offset_of_buf	g1DirtyCardQueue.hpp	/^  static ByteSize byte_offset_of_buf() {$/;"	f	class:G1DirtyCardQueue
byte_offset_of_index	g1DirtyCardQueue.hpp	/^  static ByteSize byte_offset_of_index() {$/;"	f	class:G1DirtyCardQueue
bytes_freed	g1CollectedHeap.cpp	/^  size_t bytes_freed() const {$/;"	f	class:G1FreeHumongousRegionClosure
bytes_to_mb	g1ConcurrentMark.hpp	/^  static double bytes_to_mb(size_t val) {$/;"	f	class:G1PrintRegionLivenessInfoClosure
bytes_used	g1EvacuationInfo.hpp	/^  size_t bytes_used()                { return _bytes_used; }$/;"	f	class:G1EvacuationInfo
bytes_used_before	g1CollectionSet.hpp	/^  size_t bytes_used_before() const {$/;"	f	class:G1CollectionSet
calc_active_marking_workers	g1ConcurrentMark.cpp	/^uint G1ConcurrentMark::calc_active_marking_workers() {$/;"	f	class:G1ConcurrentMark
calc_active_workers	g1FullCollector.cpp	/^uint G1FullCollector::calc_active_workers() {$/;"	f	class:G1FullCollector
calc_gc_efficiency	heapRegion.cpp	/^void HeapRegion::calc_gc_efficiency() {$/;"	f	class:HeapRegion
calc_init_green_zone	g1ConcurrentRefine.cpp	/^static size_t calc_init_green_zone() {$/;"	f	file:
calc_init_red_zone	g1ConcurrentRefine.cpp	/^static size_t calc_init_red_zone(size_t green, size_t yellow) {$/;"	f	file:
calc_init_yellow_zone	g1ConcurrentRefine.cpp	/^static size_t calc_init_yellow_zone(size_t green, size_t min_size) {$/;"	f	file:
calc_max_old_cset_length	g1Policy.cpp	/^uint G1Policy::calc_max_old_cset_length() const {$/;"	f	class:G1Policy
calc_min_old_cset_length	g1Policy.cpp	/^uint G1Policy::calc_min_old_cset_length() const {$/;"	f	class:G1Policy
calc_min_yellow_zone_size	g1ConcurrentRefine.cpp	/^static size_t calc_min_yellow_zone_size() {$/;"	f	file:
calc_new_green_zone	g1ConcurrentRefine.cpp	/^static size_t calc_new_green_zone(size_t green,$/;"	f	file:
calc_new_red_zone	g1ConcurrentRefine.cpp	/^static size_t calc_new_red_zone(size_t green, size_t yellow) {$/;"	f	file:
calc_new_yellow_zone	g1ConcurrentRefine.cpp	/^static size_t calc_new_yellow_zone(size_t green, size_t min_yellow_size) {$/;"	f	file:
calc_survivor_alignment_bytes	g1Allocator.cpp	/^uint G1PLABAllocator::calc_survivor_alignment_bytes() {$/;"	f	class:G1PLABAllocator
calc_thresholds	g1ConcurrentRefine.cpp	/^static Thresholds calc_thresholds(size_t green_zone,$/;"	f	file:
calculate_collection_set	g1CollectedHeap.cpp	/^void G1CollectedHeap::calculate_collection_set(G1EvacuationInfo& evacuation_info, double target_pause_time_ms) {$/;"	f	class:G1CollectedHeap
calculate_default_max_length	g1YoungGenSizer.cpp	/^uint G1YoungGenSizer::calculate_default_max_length(uint new_number_of_heap_regions) {$/;"	f	class:G1YoungGenSizer
calculate_default_min_length	g1YoungGenSizer.cpp	/^uint G1YoungGenSizer::calculate_default_min_length(uint new_number_of_heap_regions) {$/;"	f	class:G1YoungGenSizer
calculate_gc_time	g1MMUTracker.cpp	/^double G1MMUTrackerQueue::calculate_gc_time(double current_time) {$/;"	f	class:G1MMUTrackerQueue
calculate_heap_alignment	g1Arguments.cpp	/^static size_t calculate_heap_alignment(size_t space_alignment) {$/;"	f	file:
calculate_old_collection_set_regions	g1Policy.cpp	/^void G1Policy::calculate_old_collection_set_regions(G1CollectionSetCandidates* candidates,$/;"	f	class:G1Policy
calculate_optional_collection_set_regions	g1Policy.cpp	/^void G1Policy::calculate_optional_collection_set_regions(G1CollectionSetCandidates* candidates,$/;"	f	class:G1Policy
calculate_reasonable_max_memory_for_young	g1Arguments.cpp	/^static size_t calculate_reasonable_max_memory_for_young(FormatBuffer<100> &calc_str, double max_ram_fraction_for_young) {$/;"	f	file:
calculate_work_chunk_size	g1CollectionSetChooser.cpp	/^uint G1CollectionSetChooser::calculate_work_chunk_size(uint num_workers, uint num_regions) {$/;"	f	class:G1CollectionSetChooser
calculate_young_list_desired_max_length	g1Policy.cpp	/^uint G1Policy::calculate_young_list_desired_max_length() const {$/;"	f	class:G1Policy
calculate_young_list_desired_min_length	g1Policy.cpp	/^uint G1Policy::calculate_young_list_desired_min_length(uint base_min_length) const {$/;"	f	class:G1Policy
calculate_young_list_target_length	g1Policy.cpp	/^uint G1Policy::calculate_young_list_target_length(size_t rs_length,$/;"	f	class:G1Policy
can_expand_young_list	g1Policy.cpp	/^bool G1Policy::can_expand_young_list() const {$/;"	f	class:G1Policy
cancel_scan	g1ConcurrentMark.cpp	/^void G1CMRootMemRegions::cancel_scan() {$/;"	f	class:G1CMRootMemRegions
cancel_wait_impl	g1StringDedupQueue.cpp	/^void G1StringDedupQueue::cancel_wait_impl() {$/;"	f	class:G1StringDedupQueue
candidates	g1CollectionSet.hpp	/^  G1CollectionSetCandidates* candidates() { return _candidates; }$/;"	f	class:G1CollectionSet
capacity	g1CollectedHeap.cpp	/^size_t G1CollectedHeap::capacity() const {$/;"	f	class:G1CollectedHeap
capacity	g1ConcurrentMark.hpp	/^  size_t capacity() const  { return _chunk_capacity; }$/;"	f	class:G1CMMarkStack
capacity	heapRegion.hpp	/^  size_t capacity()     const { return byte_size(bottom(), end()); }$/;"	f	class:HeapRegion
capacity	sparsePRT.hpp	/^  size_t capacity() const      { return _capacity; }$/;"	f	class:RSHashTable
capacity_alignment	g1ConcurrentMark.cpp	/^size_t G1CMMarkStack::capacity_alignment() {$/;"	f	class:G1CMMarkStack
capacity_mask	sparsePRT.hpp	/^  size_t capacity_mask() const { return _capacity_mask;  }$/;"	f	class:RSHashTable
card	sparsePRT.hpp	/^  inline CardIdx_t card(int i) const {$/;"	f	class:SparsePRTEntry
card_addr	g1BarrierSetRuntime.cpp	/^  G1ThreadLocalData::dirty_card_queue(thread).enqueue(card_addr);$/;"	v
card_array_alignment	sparsePRT.hpp	/^  static const size_t card_array_alignment = sizeof(int) \/ sizeof(card_elem_t);$/;"	m	class:SparsePRTEntry
card_elem_t	sparsePRT.hpp	/^  typedef uint16_t card_elem_t;$/;"	t	class:SparsePRTEntry
card_num_2_ptr	g1CardCounts.hpp	/^  CardValue* card_num_2_ptr(size_t card_num) {$/;"	f	class:G1CardCounts
card_table	g1CollectedHeap.hpp	/^  G1CardTable* card_table() const {$/;"	f	class:G1CollectedHeap
card_within_region	heapRegionRemSet.cpp	/^CardIdx_t OtherRegionsTable::card_within_region(OopOrNarrowOopStar within_region, HeapRegion* hr) {$/;"	f	class:OtherRegionsTable
cards	sparsePRT.hpp	/^  card_elem_t* cards() { return _cards; }$/;"	f	class:SparsePRTEntry
cards_dirty	g1RemSet.cpp	/^    size_t cards_dirty() const { return _cards_dirty; }$/;"	f	class:G1MergeHeapRootsTask::G1MergeCardSetClosure
cards_dirty	g1RemSet.cpp	/^    size_t cards_dirty() const { return _cards_dirty; }$/;"	f	class:G1MergeHeapRootsTask::G1MergeLogBufferCardsClosure
cards_dirty	g1RemSet.cpp	/^    size_t cards_dirty() const { return _cl.cards_dirty(); }$/;"	f	class:G1MergeHeapRootsTask::G1FlushHumongousCandidateRemSets
cards_num	sparsePRT.hpp	/^  static int cards_num() {$/;"	f	class:SparsePRTEntry
cards_occupied	g1RemSetSummary.cpp	/^  size_t cards_occupied() const { return _cards_occupied; }$/;"	f	class:RegionTypeCounter
cards_occupied_percent_of	g1RemSetSummary.cpp	/^  double cards_occupied_percent_of(size_t total) {$/;"	f	class:RegionTypeCounter	file:
cards_scanned	g1RemSet.cpp	/^  size_t cards_scanned() const { return _cards_scanned; }$/;"	f	class:G1ScanHRForRegionClosure
cards_skipped	g1RemSet.cpp	/^    size_t cards_skipped() const { return _cards_skipped; }$/;"	f	class:G1MergeHeapRootsTask::G1MergeLogBufferCardsClosure
check_all_cards	g1BlockOffsetTable.cpp	/^void G1BlockOffsetTablePart::check_all_cards(size_t start_card, size_t end_card) const {$/;"	f	class:G1BlockOffsetTablePart
check_archive_addresses	g1CollectedHeap.cpp	/^bool G1CollectedHeap::check_archive_addresses(MemRegion* ranges, size_t count) {$/;"	f	class:G1CollectedHeap
check_bitmaps	g1HeapVerifier.cpp	/^void G1HeapVerifier::check_bitmaps(const char* caller) {$/;"	f	class:G1HeapVerifier
check_bitmaps	g1HeapVerifier.cpp	/^void G1HeapVerifier::check_bitmaps(const char* caller, HeapRegion* hr) {$/;"	f	class:G1HeapVerifier
check_bounds	g1FromCardCache.hpp	/^  static void check_bounds(uint worker_id, uint region_idx) {$/;"	f	class:G1FromCardCache
check_card_ptr	g1RemSet.cpp	/^inline void check_card_ptr(CardTable::CardValue* card_ptr, G1CardTable* ct) {$/;"	f
check_for_periodic_gc	g1ServiceThread.cpp	/^void G1ServiceThread::check_for_periodic_gc(){$/;"	f	class:G1ServiceThread
check_index	g1BlockOffsetTable.cpp	/^void G1BlockOffsetTable::check_index(size_t index, const char* msg) const {$/;"	f	class:G1BlockOffsetTable
check_limits	g1ConcurrentMark.hpp	/^  void check_limits() {$/;"	f	class:G1CMTask
check_mark	g1ConcurrentMarkBitMap.cpp	/^void G1CMBitMap::check_mark(HeapWord* addr) {$/;"	f	class:G1CMBitMap
check_mt_safety	g1CollectedHeap.cpp	/^  void check_mt_safety() {$/;"	f	class:ArchiveRegionSetChecker
check_mt_safety	g1CollectedHeap.cpp	/^  void check_mt_safety() {$/;"	f	class:HumongousRegionSetChecker
check_mt_safety	g1CollectedHeap.cpp	/^  void check_mt_safety() {$/;"	f	class:OldRegionSetChecker
check_mt_safety	heapRegionManager.cpp	/^  void check_mt_safety() {$/;"	f	class:MasterFreeRegionListChecker
check_mt_safety	heapRegionSet.hpp	/^  void check_mt_safety() {$/;"	f	class:HeapRegionSetBase
check_obj_during_refinement	g1OopClosures.inline.hpp	/^inline static void check_obj_during_refinement(T* p, oop const obj) {$/;"	f
check_offset	g1BlockOffsetTable.hpp	/^  void check_offset(size_t offset, const char* msg) const {$/;"	f	class:G1BlockOffsetTable
check_region_attr_table	g1HeapVerifier.cpp	/^bool G1HeapVerifier::check_region_attr_table() {$/;"	f	class:G1HeapVerifier
check_young_list_empty	g1CollectedHeap.cpp	/^bool G1CollectedHeap::check_young_list_empty() {$/;"	f	class:G1CollectedHeap
chunk_needs_scan	g1RemSet.cpp	/^  bool chunk_needs_scan(uint const region_idx, uint const card_in_region) const {$/;"	f	class:G1RemSetScanState
chunk_size	g1ConcurrentMark.cpp	/^  static size_t chunk_size() { return M; }$/;"	f	class:G1ClearBitMapTask
chunk_size	g1PageBasedVirtualSpace.cpp	/^  static size_t chunk_size() { return PreTouchParallelChunkSize; }$/;"	f	class:G1PretouchTask
chunk_size	g1RemSet.cpp	/^    static size_t chunk_size() { return M; }$/;"	f	class:G1RemSetScanState::G1DirtyRegions
chunk_size	g1RemSet.cpp	/^    static uint chunk_size() { return M; }$/;"	f	class:G1RemSetScanState::G1ClearCardTableTask
chunks_claimed	g1RemSet.cpp	/^  size_t chunks_claimed() const { return _chunks_claimed; }$/;"	f	class:G1ScanHRForRegionClosure
chunks_do	g1OopStarChunkedList.inline.hpp	/^size_t G1OopStarChunkedList::chunks_do(ChunkedList<T*, mtGC>* head, OopClosure* cl) {$/;"	f	class:G1OopStarChunkedList
claim_cards_to_scan	g1RemSet.cpp	/^  uint claim_cards_to_scan(uint region, uint increment) {$/;"	f	class:G1RemSetScanState
claim_chunk	g1CollectionSetChooser.cpp	/^    void claim_chunk(uint& from, uint& to) {$/;"	f	class:G1BuildCandidateRegionsTask::G1BuildCandidateArray
claim_cleaning_task	g1ParallelCleaning.cpp	/^bool JVMCICleaningTask::claim_cleaning_task() {$/;"	f	class:JVMCICleaningTask
claim_collection_set_region	g1RemSet.cpp	/^  inline bool claim_collection_set_region(uint region) {$/;"	f	class:G1RemSetScanState
claim_next	g1ConcurrentMark.cpp	/^const MemRegion* G1CMRootMemRegions::claim_next() {$/;"	f	class:G1CMRootMemRegions
claim_par_id	g1FreeIdSet.cpp	/^uint G1FreeIdSet::claim_par_id() {$/;"	f	class:G1FreeIdSet
claim_region	g1ConcurrentMark.cpp	/^G1ConcurrentMark::claim_region(uint worker_id) {$/;"	f	class:G1ConcurrentMark
claim_region	heapRegionManager.cpp	/^bool HeapRegionClaimer::claim_region(uint region_index) {$/;"	f	class:HeapRegionClaimer
cld_closure	g1FullGCMarker.hpp	/^  CLDToOopClosure*      cld_closure()   { return &_cld_closure; }$/;"	f	class:G1FullGCMarker
clean	g1CodeCacheRemSet.cpp	/^void G1CodeRootSet::clean(HeapRegion* owner) {$/;"	f	class:G1CodeRootSet
clean_card_before_refine	g1RemSet.cpp	/^bool G1RemSet::clean_card_before_refine(CardValue** const card_ptr_addr) {$/;"	f	class:G1RemSet
clean_cards	g1DirtyCardQueue.cpp	/^  size_t clean_cards() {$/;"	f	class:G1RefineBufferedCards	file:
clean_strong_code_roots	heapRegionRemSet.cpp	/^void HeapRegionRemSet::clean_strong_code_roots(HeapRegion* hr) {$/;"	f	class:HeapRegionRemSet
cleanup	g1ConcurrentMark.cpp	/^void G1ConcurrentMark::cleanup() {$/;"	f	class:G1ConcurrentMark
cleanup	g1HRPrinter.hpp	/^  void cleanup(HeapRegion* hr) {$/;"	f	class:G1HRPrinter
cleanup	g1RemSet.cpp	/^  void cleanup(WorkGang* workers) {$/;"	f	class:G1RemSetScanState
cleanup_after_scan_heap_roots	g1RemSet.cpp	/^void G1RemSet::cleanup_after_scan_heap_roots() {$/;"	f	class:G1RemSet
cleanup_for_next_mark	g1ConcurrentMark.cpp	/^void G1ConcurrentMark::cleanup_for_next_mark() {$/;"	f	class:G1ConcurrentMark
clear	g1BiasedArray.hpp	/^  void clear() {$/;"	f	class:G1BiasedMappedArray
clear	g1CodeCacheRemSet.cpp	/^void G1CodeRootSet::clear() {$/;"	f	class:G1CodeRootSet
clear	g1CollectedHeap.hpp	/^    void clear() { G1BiasedMappedArray<bool>::clear(); }$/;"	f	class:G1CollectedHeap::HumongousReclaimCandidates
clear	g1CollectionSet.cpp	/^void G1CollectionSet::clear() {$/;"	f	class:G1CollectionSet
clear	g1EdenRegions.hpp	/^  void clear() {$/;"	f	class:G1EdenRegions
clear	g1FromCardCache.cpp	/^void G1FromCardCache::clear(uint region_idx) {$/;"	f	class:G1FromCardCache
clear	g1HeapRegionAttr.hpp	/^  void clear() { G1BiasedMappedArray<G1HeapRegionAttr>::clear(); }$/;"	f	class:G1HeapRegionAttrBiasedMappedArray
clear	g1HeapRegionAttr.hpp	/^  void clear(const HeapRegion* hr) { return set_by_index(hr->hrm_index(), G1HeapRegionAttr(G1HeapRegionAttr::NotInCSet)); }$/;"	f	class:G1HeapRegionAttrBiasedMappedArray
clear	g1NUMAStats.cpp	/^void G1NUMAStats::NodeDataArray::clear() {$/;"	f	class:G1NUMAStats::NodeDataArray
clear	g1NUMAStats.cpp	/^void G1NUMAStats::clear(G1NUMAStats::NodeDataItems phase) {$/;"	f	class:G1NUMAStats
clear	g1RegionMarkStatsCache.hpp	/^    void clear() {$/;"	f	struct:G1RegionMarkStatsCache::G1RegionMarkStatsCacheEntry
clear	g1RegionMarkStatsCache.hpp	/^  void clear() {$/;"	f	struct:G1RegionMarkStats
clear	g1RegionsOnNodes.cpp	/^void G1RegionsOnNodes::clear() {$/;"	f	class:G1RegionsOnNodes
clear	g1SurvivorRegions.cpp	/^void G1SurvivorRegions::clear() {$/;"	f	class:G1SurvivorRegions
clear	heapRegion.cpp	/^void HeapRegion::clear(bool mangle_space) {$/;"	f	class:HeapRegion
clear	heapRegionRemSet.cpp	/^void HeapRegionRemSet::clear(bool only_cardset) {$/;"	f	class:HeapRegionRemSet
clear	heapRegionRemSet.cpp	/^void OtherRegionsTable::clear() {$/;"	f	class:OtherRegionsTable
clear	heapRegionSet.cpp	/^void FreeRegionList::NodeInfo::clear() {$/;"	f	class:FreeRegionList::NodeInfo
clear	heapRegionSet.cpp	/^void FreeRegionList::clear() {$/;"	f	class:FreeRegionList
clear	sparsePRT.cpp	/^void RSHashTable::clear() {$/;"	f	class:RSHashTable
clear	sparsePRT.cpp	/^void SparsePRT::clear() {$/;"	f	class:SparsePRT
clear_all	g1CardCounts.cpp	/^void G1CardCounts::clear_all() {$/;"	f	class:G1CardCounts
clear_and_activate_derived_pointers	g1FullCollector.cpp	/^static void clear_and_activate_derived_pointers() {$/;"	f	file:
clear_bitmap	g1ConcurrentMark.cpp	/^void G1ConcurrentMark::clear_bitmap(G1CMBitMap* bitmap, WorkGang* workers, bool may_yield) {$/;"	f	class:G1ConcurrentMark
clear_candidates	g1CollectionSet.cpp	/^void G1CollectionSet::clear_candidates() {$/;"	f	class:G1CollectionSet
clear_card_table	g1RemSet.cpp	/^  void clear_card_table(WorkGang* workers) {$/;"	f	class:G1RemSetScanState	file:
clear_cardtable	heapRegion.cpp	/^void HeapRegion::clear_cardtable() {$/;"	f	class:HeapRegion
clear_collection_set_candidates	g1Policy.cpp	/^void G1Policy::clear_collection_set_candidates() {$/;"	f	class:G1Policy
clear_during_overflow	g1RegionMarkStatsCache.hpp	/^  void clear_during_overflow() {$/;"	f	struct:G1RegionMarkStats
clear_fcc	heapRegionRemSet.cpp	/^void HeapRegionRemSet::clear_fcc() {$/;"	f	class:HeapRegionRemSet
clear_has_aborted	g1ConcurrentMark.hpp	/^  void clear_has_aborted()      { _has_aborted = false; }$/;"	f	class:G1CMTask
clear_has_overflown	g1ConcurrentMark.hpp	/^  void clear_has_overflown()     { _has_overflown = false; }$/;"	f	class:G1ConcurrentMark
clear_humongous	g1HeapRegionAttr.hpp	/^  void clear_humongous()               {$/;"	f	struct:G1HeapRegionAttr
clear_humongous	g1HeapRegionAttr.hpp	/^  void clear_humongous(uintptr_t index) {$/;"	f	class:G1HeapRegionAttrBiasedMappedArray
clear_humongous	heapRegion.cpp	/^void HeapRegion::clear_humongous() {$/;"	f	class:HeapRegion
clear_index_in_opt_cset	heapRegion.hpp	/^  void clear_index_in_opt_cset() { _index_in_opt_cset = InvalidCSetIndex; }$/;"	f	class:HeapRegion
clear_locked	heapRegionRemSet.cpp	/^void HeapRegionRemSet::clear_locked(bool only_cardset) {$/;"	f	class:HeapRegionRemSet
clear_mark_if_set	g1ConcurrentMark.cpp	/^static void clear_mark_if_set(G1CMBitMap* bitmap, HeapWord* addr) {$/;"	f	file:
clear_mark_stats_cache	g1ConcurrentMark.cpp	/^void G1CMTask::clear_mark_stats_cache(uint region_idx) {$/;"	f	class:G1CMTask
clear_prev_bitmap	g1ConcurrentMark.cpp	/^void G1ConcurrentMark::clear_prev_bitmap(WorkGang* workers) {$/;"	f	class:G1ConcurrentMark
clear_range	g1CardCounts.cpp	/^void G1CardCounts::clear_range(MemRegion mr) {$/;"	f	class:G1CardCounts
clear_range	g1CardCounts.cpp	/^void G1CardCounts::clear_range(size_t from_card_num, size_t to_card_num) {$/;"	f	class:G1CardCounts
clear_range_archive	g1Allocator.inline.hpp	/^inline void G1ArchiveAllocator::clear_range_archive(MemRegion range) {$/;"	f	class:G1ArchiveAllocator
clear_range_in_prev_bitmap	g1ConcurrentMark.cpp	/^void G1ConcurrentMark::clear_range_in_prev_bitmap(MemRegion mr) {$/;"	f	class:G1ConcurrentMark
clear_ratio_check_data	g1HeapSizingPolicy.cpp	/^void G1HeapSizingPolicy::clear_ratio_check_data() {$/;"	f	class:G1HeapSizingPolicy
clear_region	g1CardCounts.cpp	/^void G1CardCounts::clear_region(HeapRegion* hr) {$/;"	f	class:G1CardCounts
clear_region	g1ConcurrentMarkBitMap.cpp	/^void G1CMBitMap::clear_region(HeapRegion* region) {$/;"	f	class:G1CMBitMap
clear_region_attr	g1CollectedHeap.hpp	/^  void clear_region_attr() {$/;"	f	class:G1CollectedHeap
clear_region_attr	g1CollectedHeap.hpp	/^  void clear_region_attr(const HeapRegion* hr) {$/;"	f	class:G1CollectedHeap
clear_region_fields	g1ConcurrentMark.cpp	/^void G1CMTask::clear_region_fields() {$/;"	f	class:G1CMTask
clear_scan_top	g1RemSet.cpp	/^  void clear_scan_top(uint region_idx) {$/;"	f	class:G1RemSetScanState
clear_statistics	g1ConcurrentMark.cpp	/^void G1ConcurrentMark::clear_statistics(HeapRegion* r) {$/;"	f	class:G1ConcurrentMark
clear_statistics_in_region	g1ConcurrentMark.cpp	/^void G1ConcurrentMark::clear_statistics_in_region(uint region_idx) {$/;"	f	class:G1ConcurrentMark
clear_used	g1Allocator.hpp	/^  void clear_used() {$/;"	f	class:G1ArchiveAllocator
clear_young_index_in_cset	heapRegion.hpp	/^  void clear_young_index_in_cset() { _young_index_in_cset = 0; }$/;"	f	class:HeapRegion
clearing_next_bitmap	g1CollectorState.hpp	/^  bool clearing_next_bitmap() const { return _clearing_next_bitmap; }$/;"	f	class:G1CollectorState
clipped_sub	g1ConcurrentRefineStats.cpp	/^static T clipped_sub(T x, T y) {$/;"	f	file:
closures	g1ParScanThreadState.hpp	/^  G1EvacuationRootClosures* closures() { return _closures; }$/;"	f	class:G1ParScanThreadState
cm	g1ConcurrentMarkThread.hpp	/^  G1ConcurrentMark* cm()   { return _cm; }$/;"	f	class:G1ConcurrentMarkThread
cm_thread	g1ConcurrentMark.hpp	/^  G1ConcurrentMarkThread* cm_thread() { return _cm_thread; }$/;"	f	class:G1ConcurrentMark
code_root_elems	g1RemSetSummary.cpp	/^  size_t code_root_elems() const { return _code_root_elems; }$/;"	f	class:RegionTypeCounter
code_root_elems_percent_of	g1RemSetSummary.cpp	/^  double code_root_elems_percent_of(size_t total) {$/;"	f	class:RegionTypeCounter	file:
code_root_mem_size	g1RemSetSummary.cpp	/^  size_t code_root_mem_size() const { return _code_root_mem_size; }$/;"	f	class:RegionTypeCounter
code_root_mem_size_percent_of	g1RemSetSummary.cpp	/^  double code_root_mem_size_percent_of(size_t total) {$/;"	f	class:RegionTypeCounter	file:
collect	g1CollectedHeap.cpp	/^void G1CollectedHeap::collect(GCCause::Cause cause) {$/;"	f	class:G1CollectedHeap
collect	g1FullCollector.cpp	/^void G1FullCollector::collect() {$/;"	f	class:G1FullCollector
collection_set	g1CollectedHeap.hpp	/^  G1CollectionSet* collection_set() { return &_collection_set; }$/;"	f	class:G1CollectedHeap
collection_set	g1CollectedHeap.hpp	/^  const G1CollectionSet* collection_set() const { return &_collection_set; }$/;"	f	class:G1CollectedHeap
collection_set_iterate_all	g1CollectedHeap.cpp	/^void G1CollectedHeap::collection_set_iterate_all(HeapRegionClosure* cl) {$/;"	f	class:G1CollectedHeap
collection_set_iterate_increment_from	g1CollectedHeap.cpp	/^void G1CollectedHeap::collection_set_iterate_increment_from(HeapRegionClosure *cl, HeapRegionClaimer* hr_claimer, uint worker_id) {$/;"	f	class:G1CollectedHeap
collection_set_iterate_increment_from	g1CollectedHeap.hpp	/^  void collection_set_iterate_increment_from(HeapRegionClosure *blk, uint worker_id) {$/;"	f	class:G1CollectedHeap
collection_set_par_iterate_all	g1CollectedHeap.cpp	/^void G1CollectedHeap::collection_set_par_iterate_all(HeapRegionClosure* cl, HeapRegionClaimer* hr_claimer, uint worker_id) {$/;"	f	class:G1CollectedHeap
collectionset_regions	g1EvacuationInfo.hpp	/^  uint   collectionset_regions()     { return _collectionset_regions; }$/;"	f	class:G1EvacuationInfo
collectionset_used_after	g1EvacuationInfo.hpp	/^  size_t collectionset_used_after()  { return _collectionset_used_after; }$/;"	f	class:G1EvacuationInfo
collectionset_used_before	g1EvacuationInfo.hpp	/^  size_t collectionset_used_before() { return _collectionset_used_before; }$/;"	f	class:G1EvacuationInfo
collector	g1FullGCTask.hpp	/^  G1FullCollector* collector() { return _collector; }$/;"	f	class:G1FullGCTask
collector_state	g1CollectedHeap.hpp	/^  G1CollectorState* collector_state() { return &_collector_state; }$/;"	f	class:G1CollectedHeap
collector_state	g1CollectedHeap.hpp	/^  const G1CollectorState* collector_state() const { return &_collector_state; }$/;"	f	class:G1CollectedHeap
collector_state	g1CollectionSet.cpp	/^G1CollectorState* G1CollectionSet::collector_state() const {$/;"	f	class:G1CollectionSet
collector_state	g1Policy.cpp	/^G1CollectorState* G1Policy::collector_state() const { return _g1h->collector_state(); }$/;"	f	class:G1Policy
collision_list_next	heapRegionRemSet.hpp	/^  PerRegionTable* collision_list_next() const {$/;"	f	class:PerRegionTable
collision_list_next_addr	heapRegionRemSet.hpp	/^  PerRegionTable** collision_list_next_addr() {$/;"	f	class:PerRegionTable
commit	g1HRPrinter.hpp	/^  void commit(HeapRegion* hr) {$/;"	f	class:G1HRPrinter
commit	g1PageBasedVirtualSpace.cpp	/^bool G1PageBasedVirtualSpace::commit(size_t start_page, size_t size_in_pages) {$/;"	f	class:G1PageBasedVirtualSpace
commit_and_set_special	g1PageBasedVirtualSpace.cpp	/^void G1PageBasedVirtualSpace::commit_and_set_special() {$/;"	f	class:G1PageBasedVirtualSpace
commit_and_set_special	g1RegionToSpaceMapper.cpp	/^void G1RegionToSpaceMapper::commit_and_set_special() {$/;"	f	class:G1RegionToSpaceMapper
commit_internal	g1PageBasedVirtualSpace.cpp	/^void G1PageBasedVirtualSpace::commit_internal(size_t start_page, size_t end_page) {$/;"	f	class:G1PageBasedVirtualSpace
commit_preferred_pages	g1PageBasedVirtualSpace.cpp	/^void G1PageBasedVirtualSpace::commit_preferred_pages(size_t start, size_t num_pages) {$/;"	f	class:G1PageBasedVirtualSpace
commit_regions	g1RegionToSpaceMapper.cpp	/^  virtual void commit_regions(uint start_idx, size_t num_regions, WorkGang* pretouch_gang) {$/;"	f	class:G1RegionsLargerThanCommitSizeMapper
commit_regions	g1RegionToSpaceMapper.cpp	/^  virtual void commit_regions(uint start_idx, size_t num_regions, WorkGang* pretouch_gang) {$/;"	f	class:G1RegionsSmallerThanCommitSizeMapper
commit_regions	g1RegionToSpaceMapper.cpp	/^void G1RegionToHeteroSpaceMapper::commit_regions(uint start_idx, size_t num_regions, WorkGang* pretouch_gang) {$/;"	f	class:G1RegionToHeteroSpaceMapper
commit_regions	heapRegionManager.cpp	/^void HeapRegionManager::commit_regions(uint index, size_t num_regions, WorkGang* pretouch_gang) {$/;"	f	class:HeapRegionManager
commit_tail	g1PageBasedVirtualSpace.cpp	/^void G1PageBasedVirtualSpace::commit_tail() {$/;"	f	class:G1PageBasedVirtualSpace
committed_size	g1PageBasedVirtualSpace.cpp	/^size_t G1PageBasedVirtualSpace::committed_size() const {$/;"	f	class:G1PageBasedVirtualSpace
committed_size	g1RegionToSpaceMapper.hpp	/^  size_t committed_size() { return _storage.committed_size(); }$/;"	f	class:G1RegionToSpaceMapper
compact_region	g1FullGCCompactTask.cpp	/^void G1FullGCCompactTask::compact_region(HeapRegion* hr) {$/;"	f	class:G1FullGCCompactTask
compaction_point	g1FullCollector.hpp	/^  G1FullGCCompactionPoint* compaction_point(uint id) { return _compaction_points[id]; }$/;"	f	class:G1FullCollector
compaction_top	heapRegion.hpp	/^  HeapWord* compaction_top() const { return _compaction_top; }$/;"	f	class:HeapRegion
compare_card	g1DirtyCardQueue.cpp	/^  static inline int compare_card(const CardTable::CardValue* p1,$/;"	f	class:G1RefineBufferedCards	file:
compare_region_idx	g1CollectionSet.cpp	/^static int compare_region_idx(const uint a, const uint b) {$/;"	f	file:
complete_archive	g1Allocator.cpp	/^void G1ArchiveAllocator::complete_archive(GrowableArray<MemRegion>* ranges,$/;"	f	class:G1ArchiveAllocator
complete_cleaning	g1CollectedHeap.cpp	/^void G1CollectedHeap::complete_cleaning(BoolObjectClosure* is_alive,$/;"	f	class:G1CollectedHeap
complete_collection	g1FullCollector.cpp	/^void G1FullCollector::complete_collection() {$/;"	f	class:G1FullCollector
complete_compaction	heapRegion.inline.hpp	/^inline void HeapRegion::complete_compaction() {$/;"	f	class:HeapRegion
complete_marking	g1FullGCMarker.cpp	/^void G1FullGCMarker::complete_marking(OopQueueSet* oop_stacks,$/;"	f	class:G1FullGCMarker
compute_desired_plab_sz	g1EvacStats.cpp	/^size_t G1EvacStats::compute_desired_plab_sz() {$/;"	f	class:G1EvacStats
compute_hash	g1CodeRootSetTable.hpp	/^  unsigned int compute_hash(nmethod* nm) {$/;"	f	class:G1CodeRootSetTable
compute_new_sizes	g1ConcurrentMark.cpp	/^void G1ConcurrentMark::compute_new_sizes() {$/;"	f	class:G1ConcurrentMark
compute_pause_time_ratios	g1Analytics.cpp	/^void G1Analytics::compute_pause_time_ratios(double end_time_sec, double pause_time_ms) {$/;"	f	class:G1Analytics
compute_size	g1BlockOffsetTable.hpp	/^  static size_t compute_size(size_t mem_region_words) {$/;"	f	class:G1BlockOffsetTable
compute_size	g1CardCounts.cpp	/^size_t G1CardCounts::compute_size(size_t mem_region_size_in_words) {$/;"	f	class:G1CardCounts
compute_size	g1CardTable.hpp	/^  static size_t compute_size(size_t mem_region_size_in_words) {$/;"	f	class:G1CardTable
conc_collection_counters	g1MonitoringSupport.hpp	/^  CollectorCounters* conc_collection_counters() {$/;"	f	class:G1MonitoringSupport
concatenate_logs	g1DirtyCardQueue.cpp	/^void G1DirtyCardQueueSet::concatenate_logs() {$/;"	f	class:G1DirtyCardQueueSet
concurrent	g1ConcurrentMark.hpp	/^  bool                concurrent()   { return _concurrent; }$/;"	f	class:G1ConcurrentMark
concurrent_cycle_abort	g1ConcurrentMark.cpp	/^void G1ConcurrentMark::concurrent_cycle_abort() {$/;"	f	class:G1ConcurrentMark
concurrent_cycle_end	g1ConcurrentMark.cpp	/^void G1ConcurrentMark::concurrent_cycle_end() {$/;"	f	class:G1ConcurrentMark
concurrent_cycle_start	g1ConcurrentMark.cpp	/^void G1ConcurrentMark::concurrent_cycle_start() {$/;"	f	class:G1ConcurrentMark
concurrent_mark	g1CollectedHeap.hpp	/^  G1ConcurrentMark* concurrent_mark() const { return _cm; }$/;"	f	class:G1CollectedHeap
concurrent_refine	g1CollectedHeap.hpp	/^  G1ConcurrentRefine* concurrent_refine() const { return _cr; }$/;"	f	class:G1CollectedHeap
conservative_max_heap_alignment	g1Arguments.cpp	/^size_t G1Arguments::conservative_max_heap_alignment() {$/;"	f	class:G1Arguments
constant_other_time_ms	g1Policy.cpp	/^double G1Policy::constant_other_time_ms(double pause_time_ms) const {$/;"	f	class:G1Policy
constant_other_time_ms_defaults	g1Analytics.cpp	/^static double constant_other_time_ms_defaults[] = {$/;"	v	file:
containing_set	heapRegion.hpp	/^  HeapRegionSetBase* containing_set() { return _containing_set; }$/;"	f	class:HeapRegion
contains	g1CodeCacheRemSet.cpp	/^bool G1CodeRootSet::contains(nmethod* method) {$/;"	f	class:G1CodeRootSet
contains	g1CodeCacheRemSet.cpp	/^bool G1CodeRootSetTable::contains(nmethod* nm) {$/;"	f	class:G1CodeRootSetTable
contains	g1PageBasedVirtualSpace.cpp	/^bool G1PageBasedVirtualSpace::contains(const void* p) const {$/;"	f	class:G1PageBasedVirtualSpace
contains	heapRegionSet.hpp	/^  bool contains(HeapRegion* hr) const {$/;"	f	class:FreeRegionList
contains_card	sparsePRT.cpp	/^bool RSHashTable::contains_card(RegionIdx_t region_index, CardIdx_t card_index) const {$/;"	f	class:RSHashTable
contains_card	sparsePRT.cpp	/^bool SparsePRTEntry::contains_card(CardIdx_t card_index) const {$/;"	f	class:SparsePRTEntry
contains_card	sparsePRT.inline.hpp	/^inline bool SparsePRT::contains_card(RegionIdx_t region_id, CardIdx_t card_index) const {$/;"	f	class:SparsePRT
contains_cards_to_process	g1RemSet.cpp	/^  bool contains_cards_to_process(uint const region_idx) const {$/;"	f	class:G1RemSetScanState
contains_or_replace	g1FromCardCache.hpp	/^  static bool contains_or_replace(uint worker_id, uint region_idx, uintptr_t card) {$/;"	f	class:G1FromCardCache
contains_reference	heapRegionRemSet.cpp	/^bool OtherRegionsTable::contains_reference(OopOrNarrowOopStar from) const {$/;"	f	class:OtherRegionsTable
contains_reference	heapRegionRemSet.hpp	/^  bool contains_reference(OopOrNarrowOopStar from) const {$/;"	f	class:HeapRegionRemSet
contains_reference	heapRegionRemSet.hpp	/^  bool contains_reference(OopOrNarrowOopStar from) const {$/;"	f	class:PerRegionTable
contains_reference_locked	heapRegionRemSet.cpp	/^bool OtherRegionsTable::contains_reference_locked(OopOrNarrowOopStar from) const {$/;"	f	class:OtherRegionsTable
convert_to_eden	g1SurvivorRegions.cpp	/^void G1SurvivorRegions::convert_to_eden() {$/;"	f	class:G1SurvivorRegions
copy	g1NUMAStats.cpp	/^void G1NUMAStats::NodeDataArray::copy(uint req_index, size_t* stat) {$/;"	f	class:G1NUMAStats::NodeDataArray
copy	g1NUMAStats.cpp	/^void G1NUMAStats::copy(G1NUMAStats::NodeDataItems phase,$/;"	f	class:G1NUMAStats
copy_cards	sparsePRT.cpp	/^void SparsePRTEntry::copy_cards(SparsePRTEntry* e) const {$/;"	f	class:SparsePRTEntry
copy_cards	sparsePRT.cpp	/^void SparsePRTEntry::copy_cards(card_elem_t* cards) const {$/;"	f	class:SparsePRTEntry
copy_statistics	g1NUMA.cpp	/^void G1NUMA::copy_statistics(G1NUMAStats::NodeDataItems phase,$/;"	f	class:G1NUMA
copy_to	g1CodeCacheRemSet.cpp	/^void G1CodeRootSetTable::copy_to(G1CodeRootSetTable* new_table) {$/;"	f	class:G1CodeRootSetTable
copy_to_survivor_space	g1ParScanThreadState.cpp	/^oop G1ParScanThreadState::copy_to_survivor_space(G1HeapRegionAttr region_attr,$/;"	f	class:G1ParScanThreadState
cost_per_byte_ms_defaults	g1Analytics.cpp	/^static double cost_per_byte_ms_defaults[] = {$/;"	v	file:
cost_per_logged_card_ms_defaults	g1Analytics.cpp	/^static double cost_per_logged_card_ms_defaults[] = {$/;"	v	file:
count	g1AllocRegion.hpp	/^  uint count() { return _count; }$/;"	f	class:G1AllocRegion
count	g1HeapVerifier.cpp	/^  int count() { return _count; }$/;"	f	class:YoungRefCounterClosure
count	g1RegionsOnNodes.cpp	/^uint G1RegionsOnNodes::count(uint node_index) const {$/;"	f	class:G1RegionsOnNodes
create	g1ConcurrentRefine.cpp	/^G1ConcurrentRefine* G1ConcurrentRefine::create(jint* ecode) {$/;"	f	class:G1ConcurrentRefine
create	g1HeapSizingPolicy.cpp	/^G1HeapSizingPolicy* G1HeapSizingPolicy::create(const G1CollectedHeap* g1h, const G1Analytics* analytics) {$/;"	f	class:G1HeapSizingPolicy
create	g1NUMA.cpp	/^G1NUMA* G1NUMA::create() {$/;"	f	class:G1NUMA
create	g1ThreadLocalData.hpp	/^  static void create(Thread* thread) {$/;"	f	class:G1ThreadLocalData
create_allocator	g1Allocator.cpp	/^G1ArchiveAllocator* G1ArchiveAllocator::create_allocator(G1CollectedHeap* g1h, bool open) {$/;"	f	class:G1ArchiveAllocator
create_aux_memory_mapper	g1CollectedHeap.cpp	/^G1RegionToSpaceMapper* G1CollectedHeap::create_aux_memory_mapper(const char* description,$/;"	f	class:G1CollectedHeap
create_g1_evac_summary	g1CollectedHeap.cpp	/^G1EvacSummary G1CollectedHeap::create_g1_evac_summary(G1EvacStats* stats) {$/;"	f	class:G1CollectedHeap
create_g1_evacstats	g1Trace.cpp	/^create_g1_evacstats(unsigned gcid, const G1EvacSummary& summary) {$/;"	f	file:
create_g1_heap_summary	g1CollectedHeap.cpp	/^G1HeapSummary G1CollectedHeap::create_g1_heap_summary() {$/;"	f	class:G1CollectedHeap
create_gen_sizer	g1YoungGenSizer.cpp	/^G1YoungGenSizer* G1YoungGenSizer::create_gen_sizer() {$/;"	f	class:G1YoungGenSizer
create_heap	g1Arguments.cpp	/^CollectedHeap* G1Arguments::create_heap() {$/;"	f	class:G1Arguments
create_heap_mapper	g1RegionToSpaceMapper.cpp	/^G1RegionToSpaceMapper* G1RegionToSpaceMapper::create_heap_mapper(ReservedSpace rs,$/;"	f	class:G1RegionToSpaceMapper
create_hit_rate	g1NUMAStats.cpp	/^void G1NUMAStats::NodeDataArray::create_hit_rate(Stat* result) const {$/;"	f	class:G1NUMAStats::NodeDataArray
create_hit_rate	g1NUMAStats.cpp	/^void G1NUMAStats::NodeDataArray::create_hit_rate(Stat* result, uint req_index) const {$/;"	f	class:G1NUMAStats::NodeDataArray
create_ihop_control	g1Policy.cpp	/^G1IHOPControl* G1Policy::create_ihop_control(const G1OldGenAllocationTracker* old_gen_alloc_tracker,$/;"	f	class:G1Policy
create_manager	heapRegionManager.cpp	/^HeapRegionManager* HeapRegionManager::create_manager(G1CollectedHeap* heap) {$/;"	f	class:HeapRegionManager
create_mapper	g1RegionToSpaceMapper.cpp	/^G1RegionToSpaceMapper* G1RegionToSpaceMapper::create_mapper(ReservedSpace rs,$/;"	f	class:G1RegionToSpaceMapper
create_new_base_array	g1BiasedArray.cpp	/^address G1BiasedMappedArrayBase::create_new_base_array(size_t length, size_t elem_size) {$/;"	f	class:G1BiasedMappedArrayBase
create_policy	g1Policy.cpp	/^G1Policy* G1Policy::create_policy(STWGCTimer* gc_timer_stw) {$/;"	f	class:G1Policy
create_refinement_thread	g1ConcurrentRefine.cpp	/^G1ConcurrentRefineThread* G1ConcurrentRefineThreadControl::create_refinement_thread(uint worker_id, bool initializing) {$/;"	f	class:G1ConcurrentRefineThreadControl
create_root_closures	g1RootClosures.cpp	/^G1EvacuationRootClosures* G1EvacuationRootClosures::create_root_closures(G1ParScanThreadState* pss, G1CollectedHeap* g1h) {$/;"	f	class:G1EvacuationRootClosures
cross_threshold	heapRegion.cpp	/^HeapWord* HeapRegion::cross_threshold(HeapWord* start, HeapWord* end) {$/;"	f	class:HeapRegion
cset	g1HRPrinter.hpp	/^  void cset(HeapRegion* hr) {$/;"	f	class:G1HRPrinter
cset_regions_freed	g1Policy.hpp	/^  void cset_regions_freed() {$/;"	f	class:G1Policy
ct	g1ParScanThreadState.hpp	/^  G1CardTable* ct()                              { return _ct; }$/;"	f	class:G1ParScanThreadState
cur_addr_aligned	g1RemSet.cpp	/^  bool cur_addr_aligned() const {$/;"	f	class:G1CardTableScanner	file:
cur_card_is_dirty	g1RemSet.cpp	/^  bool cur_card_is_dirty() const {$/;"	f	class:G1CardTableScanner	file:
cur_clear_ct_time_ms	g1GCPhaseTimes.hpp	/^  double cur_clear_ct_time_ms() {$/;"	f	class:G1GCPhaseTimes
cur_collection_par_time_ms	g1GCPhaseTimes.hpp	/^  double cur_collection_par_time_ms() {$/;"	f	class:G1GCPhaseTimes
cur_collection_start_sec	g1GCPhaseTimes.hpp	/^  double cur_collection_start_sec() {$/;"	f	class:G1GCPhaseTimes
cur_expand_heap_time_ms	g1GCPhaseTimes.hpp	/^  double cur_expand_heap_time_ms() {$/;"	f	class:G1GCPhaseTimes
cur_idx	g1CollectionSetCandidates.hpp	/^  uint cur_idx() const { return _front_idx; }$/;"	f	class:G1CollectionSetCandidates
cur_length	g1CollectionSet.hpp	/^  size_t cur_length() const { return _collection_set_cur_length; }$/;"	f	class:G1CollectionSet
cur_word_of_cards_all_dirty_cards	g1RemSet.cpp	/^  bool cur_word_of_cards_all_dirty_cards() const {$/;"	f	class:G1CardTableScanner	file:
cur_word_of_cards_contains_any_dirty_card	g1RemSet.cpp	/^  bool cur_word_of_cards_contains_any_dirty_card() const {$/;"	f	class:G1CardTableScanner	file:
current_node_index	g1Allocator.inline.hpp	/^inline uint G1Allocator::current_node_index() const {$/;"	f	class:G1Allocator
current_region	g1FullGCCompactionPoint.cpp	/^HeapRegion* G1FullGCCompactionPoint::current_region() {$/;"	f	class:G1FullGCCompactionPoint
cycle_already_in_progress	g1VMOperations.hpp	/^  bool cycle_already_in_progress() const { return _cycle_already_in_progress; }$/;"	f	class:VM_G1TryInitiateConcMark
data	g1ConcurrentMark.hpp	/^    G1TaskQueueEntry data[EntriesPerChunk];$/;"	m	struct:G1CMMarkStack::TaskQueueEntryChunk
data	g1ThreadLocalData.hpp	/^  static G1ThreadLocalData* data(Thread* thread) {$/;"	f	class:G1ThreadLocalData
deactivate_derived_pointers	g1FullCollector.cpp	/^static void deactivate_derived_pointers() {$/;"	f	file:
deactivation_level	g1ConcurrentRefine.cpp	/^inline size_t deactivation_level(const Thresholds& t) { return t.second; }$/;"	f
deactivation_threshold	g1ConcurrentRefine.cpp	/^size_t G1ConcurrentRefine::deactivation_threshold(uint worker_id) const {$/;"	f	class:G1ConcurrentRefine
deal_with_reference	g1ConcurrentMark.inline.hpp	/^inline bool G1CMTask::deal_with_reference(T* p) {$/;"	f	class:G1CMTask
dealloc_archive_regions	g1CollectedHeap.cpp	/^void G1CollectedHeap::dealloc_archive_regions(MemRegion* ranges, size_t count) {$/;"	f	class:G1CollectedHeap
debug_phase	g1GCPhaseTimes.cpp	/^void G1GCPhaseTimes::debug_phase(WorkerDataArray<double>* phase, uint extra_indent) const {$/;"	f	class:G1GCPhaseTimes
debug_time	g1GCPhaseTimes.cpp	/^void G1GCPhaseTimes::debug_time(const char* name, double value) const {$/;"	f	class:G1GCPhaseTimes
debug_time_for_reference	g1GCPhaseTimes.cpp	/^void G1GCPhaseTimes::debug_time_for_reference(const char* name, double value) const {$/;"	f	class:G1GCPhaseTimes
decide_on_conc_mark_initiation	g1Policy.cpp	/^void G1Policy::decide_on_conc_mark_initiation() {$/;"	f	class:G1Policy
decrease_length	heapRegionSet.inline.hpp	/^inline void FreeRegionList::NodeInfo::decrease_length(uint node_index) {$/;"	f	class:FreeRegionList::NodeInfo
decrease_length	heapRegionSet.inline.hpp	/^inline void FreeRegionList::decrease_length(uint node_index) {$/;"	f	class:FreeRegionList
decrease_limits	g1ConcurrentMark.cpp	/^void G1CMTask::decrease_limits() {$/;"	f	class:G1CMTask
decrease_used	g1CollectedHeap.cpp	/^void G1CollectedHeap::decrease_used(size_t bytes) {$/;"	f	class:G1CollectedHeap
decrement_summary_bytes	g1CollectedHeap.cpp	/^void G1CollectedHeap::decrement_summary_bytes(size_t bytes) {$/;"	f	class:G1CollectedHeap
deduped	g1StringDedupStat.cpp	/^void G1StringDedupStat::deduped(oop obj, uintx bytes) {$/;"	f	class:G1StringDedupStat
deduplicate_string	g1CollectedHeap.cpp	/^void G1CollectedHeap::deduplicate_string(oop str) {$/;"	f	class:G1CollectedHeap
default_use_cache	g1HotCardCache.hpp	/^  static bool default_use_cache() {$/;"	f	class:G1HotCardCache
default_value	g1Allocator.hpp	/^  uint8_t default_value() const { return NoArchive; }$/;"	f	class:G1ArchiveRegionMap
default_value	g1CollectedHeap.hpp	/^    bool default_value() const { return false; }$/;"	f	class:G1CollectedHeap::HumongousReclaimCandidates
default_value	g1HeapRegionAttr.hpp	/^  G1HeapRegionAttr default_value() const { return G1HeapRegionAttr(G1HeapRegionAttr::NotInCSet); }$/;"	f	class:G1HeapRegionAttrBiasedMappedArray
default_value	heapRegionManager.hpp	/^  virtual HeapRegion* default_value() const { return NULL; }$/;"	f	class:G1HeapRegionTable
delay_to_keep_mmu	g1ConcurrentMarkThread.cpp	/^void G1ConcurrentMarkThread::delay_to_keep_mmu(G1Policy* g1_policy, bool remark) {$/;"	f	class:G1ConcurrentMarkThread
delete_entry	sparsePRT.cpp	/^bool RSHashTable::delete_entry(RegionIdx_t region_ind) {$/;"	f	class:RSHashTable
delete_entry	sparsePRT.cpp	/^bool SparsePRT::delete_entry(RegionIdx_t region_id) {$/;"	f	class:SparsePRT
delete_list	g1OopStarChunkedList.inline.hpp	/^void G1OopStarChunkedList::delete_list(ChunkedList<T*, mtGC>* c) {$/;"	f	class:G1OopStarChunkedList
delete_region_table	heapRegionRemSet.cpp	/^PerRegionTable* OtherRegionsTable::delete_region_table(size_t& added_by_deleted) {$/;"	f	class:OtherRegionsTable
desired_plab_sz	g1CollectedHeap.inline.hpp	/^size_t G1CollectedHeap::desired_plab_sz(G1HeapRegionAttr dest) {$/;"	f	class:G1CollectedHeap
desired_survivor_size	g1Policy.cpp	/^size_t G1Policy::desired_survivor_size(uint max_regions) const {$/;"	f	class:G1Policy
dest	g1ParScanThreadState.hpp	/^  G1HeapRegionAttr dest(G1HeapRegionAttr original) const {$/;"	f	class:G1ParScanThreadState
destroy	g1ThreadLocalData.hpp	/^  static void destroy(Thread* thread) {$/;"	f	class:G1ThreadLocalData
details	g1GCPhaseTimes.cpp	/^void G1GCPhaseTimes::details(T* phase, const char* indent_str) const {$/;"	f	class:G1GCPhaseTimes
direct_allocated	g1EvacStats.hpp	/^  size_t direct_allocated() const { return _direct_allocated; }$/;"	f	class:G1EvacStats
dirtied_cards	g1ConcurrentRefineStats.hpp	/^  size_t dirtied_cards() const { return _dirtied_cards; }$/;"	f	class:G1ConcurrentRefineStats
dirty_card_qset	g1DirtyCardQueue.hpp	/^inline G1DirtyCardQueueSet* G1DirtyCardQueue::dirty_card_qset() const {$/;"	f	class:G1DirtyCardQueue
dirty_card_queue	g1ThreadLocalData.hpp	/^  static G1DirtyCardQueue& dirty_card_queue(Thread* thread) {$/;"	f	class:G1ThreadLocalData
dirty_card_queue_buffer_offset	g1ThreadLocalData.hpp	/^  static ByteSize dirty_card_queue_buffer_offset() {$/;"	f	class:G1ThreadLocalData
dirty_card_queue_index_offset	g1ThreadLocalData.hpp	/^  static ByteSize dirty_card_queue_index_offset() {$/;"	f	class:G1ThreadLocalData
dirty_card_queue_offset	g1ThreadLocalData.hpp	/^  static ByteSize dirty_card_queue_offset() {$/;"	f	class:G1ThreadLocalData
dirty_card_queue_set	g1BarrierSet.hpp	/^  static G1DirtyCardQueueSet& dirty_card_queue_set() {$/;"	f	class:G1BarrierSet
dirty_young_block	g1CollectedHeap.inline.hpp	/^G1CollectedHeap::dirty_young_block(HeapWord* start, size_t word_size) {$/;"	f	class:G1CollectedHeap
discard_entry	g1SATBMarkQueueSet.cpp	/^static inline bool discard_entry(const void* entry, G1CollectedHeap* g1h) {$/;"	f	file:
discard_max_cards_padding	g1DirtyCardQueue.cpp	/^void G1DirtyCardQueueSet::discard_max_cards_padding() {$/;"	f	class:G1DirtyCardQueueSet
dispatch_task	g1ParScanThreadState.cpp	/^void G1ParScanThreadState::dispatch_task(ScannerTask task) {$/;"	f	class:G1ParScanThreadState
distribute_marked_bytes	g1ConcurrentMark.cpp	/^    void distribute_marked_bytes(HeapRegion* hr, size_t marked_words) {$/;"	f	class:G1UpdateRemSetTrackingBeforeRebuildTask::G1UpdateRemSetTrackingBeforeRebuild	file:
do_addr	g1ConcurrentMark.cpp	/^bool G1CMBitMapClosure::do_addr(HeapWord* const addr) {$/;"	f	class:G1CMBitMapClosure
do_buffer	g1ConcurrentMark.cpp	/^  virtual void do_buffer(void** buffer, size_t size) {$/;"	f	class:G1CMSATBBufferClosure
do_card_block	g1RemSet.cpp	/^  ALWAYSINLINE void do_card_block(uint const region_idx, size_t const first_card, size_t const num_cards) {$/;"	f	class:G1ScanHRForRegionClosure	file:
do_card_ptr	g1CollectedHeap.cpp	/^  void do_card_ptr(CardValue* card_ptr, uint worker_id) {$/;"	f	class:RedirtyLoggedCardTableEntryClosure
do_card_ptr	g1RemSet.cpp	/^    void do_card_ptr(CardValue* card_ptr, uint worker_id) {$/;"	f	class:G1MergeHeapRootsTask::G1MergeLogBufferCardsClosure
do_claimed_block	g1RemSet.cpp	/^  void do_claimed_block(uint const region_idx_for_card, size_t const first_card, size_t const num_cards) {$/;"	f	class:G1ScanHRForRegionClosure	file:
do_cld	g1FullGCOopClosures.inline.hpp	/^inline void G1MarkAndPushClosure::do_cld(ClassLoaderData* cld) {$/;"	f	class:G1MarkAndPushClosure
do_cld	g1HeapVerifier.cpp	/^  void do_cld(ClassLoaderData* cld) {$/;"	f	class:VerifyCLDClosure
do_cld	g1OopClosures.cpp	/^void G1CLDScanClosure::do_cld(ClassLoaderData* cld) {$/;"	f	class:G1CLDScanClosure
do_cld_barrier	g1OopClosures.inline.hpp	/^void G1ParCopyHelper::do_cld_barrier(oop new_obj) {$/;"	f	class:G1ParCopyHelper
do_code_blob	g1CodeBlobClosure.cpp	/^void G1CodeBlobClosure::do_code_blob(CodeBlob* cb) {$/;"	f	class:G1CodeBlobClosure
do_code_blob	g1CollectedHeap.cpp	/^  void do_code_blob(CodeBlob* cb) {$/;"	f	class:RebuildStrongCodeRootClosure
do_code_blob	g1HeapVerifier.cpp	/^  void do_code_blob(CodeBlob* cb) {$/;"	f	class:G1VerifyCodeRootBlobClosure
do_code_blob	heapRegion.cpp	/^  void do_code_blob(CodeBlob* cb) {$/;"	f	class:VerifyStrongCodeRootCodeBlobClosure
do_collection_pause	g1CollectedHeap.cpp	/^HeapWord* G1CollectedHeap::do_collection_pause(size_t word_size,$/;"	f	class:G1CollectedHeap
do_collection_pause_at_safepoint	g1CollectedHeap.cpp	/^bool G1CollectedHeap::do_collection_pause_at_safepoint(double target_pause_time_ms) {$/;"	f	class:G1CollectedHeap
do_collection_pause_at_safepoint_helper	g1CollectedHeap.cpp	/^void G1CollectedHeap::do_collection_pause_at_safepoint_helper(double target_pause_time_ms) {$/;"	f	class:G1CollectedHeap
do_concurrent_mark	g1CollectedHeap.cpp	/^void G1CollectedHeap::do_concurrent_mark() {$/;"	f	class:G1CollectedHeap
do_copy_to_survivor_space	g1ParScanThreadState.cpp	/^oop G1ParScanThreadState::do_copy_to_survivor_space(G1HeapRegionAttr const region_attr,$/;"	f	class:G1ParScanThreadState
do_entry	g1ConcurrentMark.cpp	/^  void do_entry(void* entry) const {$/;"	f	class:G1CMSATBBufferClosure	file:
do_evacuation_and_fixup	g1CodeBlobClosure.cpp	/^void G1CodeBlobClosure::do_evacuation_and_fixup(nmethod* nm) {$/;"	f	class:G1CodeBlobClosure
do_full_collection	g1CollectedHeap.cpp	/^bool G1CollectedHeap::do_full_collection(bool explicit_gc,$/;"	f	class:G1CollectedHeap
do_full_collection	g1CollectedHeap.cpp	/^void G1CollectedHeap::do_full_collection(bool clear_all_soft_refs) {$/;"	f	class:G1CollectedHeap
do_heap_region	g1CardCounts.cpp	/^  virtual bool do_heap_region(HeapRegion* r) {$/;"	f	class:G1CardCountsClearClosure
do_heap_region	g1CollectedHeap.cpp	/^    bool do_heap_region(HeapRegion* hr) {$/;"	f	class:VerifyRegionRemSetClosure
do_heap_region	g1CollectedHeap.cpp	/^    virtual bool do_heap_region(HeapRegion* hr) {$/;"	f	class:G1PrepareEvacuationTask::G1PrepareRegionsClosure
do_heap_region	g1CollectedHeap.cpp	/^    virtual bool do_heap_region(HeapRegion* r) {$/;"	f	class:G1FreeCollectionSetTask::FreeCSetClosure
do_heap_region	g1CollectedHeap.cpp	/^  bool do_heap_region(HeapRegion* hr) {$/;"	f	class:PostCompactionPrinterClosure
do_heap_region	g1CollectedHeap.cpp	/^  bool do_heap_region(HeapRegion* r) {$/;"	f	class:IterateObjectClosureRegionClosure
do_heap_region	g1CollectedHeap.cpp	/^  bool do_heap_region(HeapRegion* r) {$/;"	f	class:NoYoungRegionsClosure
do_heap_region	g1CollectedHeap.cpp	/^  bool do_heap_region(HeapRegion* r) {$/;"	f	class:PrintRSetsClosure
do_heap_region	g1CollectedHeap.cpp	/^  bool do_heap_region(HeapRegion* r) {$/;"	f	class:PrintRegionClosure
do_heap_region	g1CollectedHeap.cpp	/^  bool do_heap_region(HeapRegion* r) {$/;"	f	class:RebuildRegionSetsClosure
do_heap_region	g1CollectedHeap.cpp	/^  bool do_heap_region(HeapRegion* r) {$/;"	f	class:SumUsedClosure
do_heap_region	g1CollectedHeap.cpp	/^  bool do_heap_region(HeapRegion* r) {$/;"	f	class:TearDownRegionSetsClosure
do_heap_region	g1CollectedHeap.cpp	/^  virtual bool do_heap_region(HeapRegion* r) {$/;"	f	class:G1AbandonCollectionSetClosure
do_heap_region	g1CollectedHeap.cpp	/^  virtual bool do_heap_region(HeapRegion* r) {$/;"	f	class:G1FreeHumongousRegionClosure
do_heap_region	g1CollectedHeap.cpp	/^  virtual bool do_heap_region(HeapRegion* r) {$/;"	f	class:G1PrintCollectionSetClosure
do_heap_region	g1CollectionSet.cpp	/^  virtual bool do_heap_region(HeapRegion* r) {$/;"	f	class:G1PrintCollectionSetDetailClosure
do_heap_region	g1CollectionSet.cpp	/^  virtual bool do_heap_region(HeapRegion* r) {$/;"	f	class:G1VerifyYoungAgesClosure
do_heap_region	g1CollectionSet.cpp	/^  virtual bool do_heap_region(HeapRegion* r) {$/;"	f	class:G1VerifyYoungCSetIndicesClosure
do_heap_region	g1CollectionSetChooser.cpp	/^    bool do_heap_region(HeapRegion* r) {$/;"	f	class:G1BuildCandidateRegionsTask::G1BuildCandidateRegionsClosure
do_heap_region	g1ConcurrentMark.cpp	/^    bool do_heap_region(HeapRegion *hr) {$/;"	f	class:G1ReclaimEmptyRegionsTask::G1ReclaimEmptyRegionsClosure
do_heap_region	g1ConcurrentMark.cpp	/^    virtual bool do_heap_region(HeapRegion* r) {$/;"	f	class:G1ClearBitMapTask::G1ClearBitmapHRClosure
do_heap_region	g1ConcurrentMark.cpp	/^    virtual bool do_heap_region(HeapRegion* r) {$/;"	f	class:G1UpdateRemSetTrackingBeforeRebuildTask::G1UpdateRemSetTrackingBeforeRebuild
do_heap_region	g1ConcurrentMark.cpp	/^  bool do_heap_region(HeapRegion* r) {$/;"	f	class:NoteStartOfMarkHRClosure
do_heap_region	g1ConcurrentMark.cpp	/^  virtual bool do_heap_region(HeapRegion* r) {$/;"	f	class:G1UpdateRemSetTrackingAfterRebuild
do_heap_region	g1ConcurrentMark.cpp	/^bool G1PrintRegionLivenessInfoClosure::do_heap_region(HeapRegion* r) {$/;"	f	class:G1PrintRegionLivenessInfoClosure
do_heap_region	g1EvacFailure.cpp	/^  bool do_heap_region(HeapRegion *hr) {$/;"	f	class:RemoveSelfForwardPtrHRClosure
do_heap_region	g1FullGCAdjustTask.cpp	/^  bool do_heap_region(HeapRegion* r) {$/;"	f	class:G1AdjustRegionClosure
do_heap_region	g1FullGCCompactTask.cpp	/^  bool do_heap_region(HeapRegion* current) {$/;"	f	class:G1ResetHumongousClosure
do_heap_region	g1FullGCPrepareTask.cpp	/^bool G1FullGCPrepareTask::G1CalculatePointersClosure::do_heap_region(HeapRegion* hr) {$/;"	f	class:G1FullGCPrepareTask::G1CalculatePointersClosure
do_heap_region	g1HeapRegionEventSender.cpp	/^  bool do_heap_region(HeapRegion* r) {$/;"	f	class:DumpEventInfoClosure
do_heap_region	g1HeapTransition.cpp	/^  bool do_heap_region(HeapRegion* r) {$/;"	f	class:DetailedUsageClosure
do_heap_region	g1HeapVerifier.cpp	/^  bool do_heap_region(HeapRegion* hr) {$/;"	f	class:VerifyRegionListsClosure
do_heap_region	g1HeapVerifier.cpp	/^  bool do_heap_region(HeapRegion* r) {$/;"	f	class:VerifyRegionClosure
do_heap_region	g1HeapVerifier.cpp	/^  virtual bool do_heap_region(HeapRegion* hr) {$/;"	f	class:G1CheckRegionAttrTableClosure
do_heap_region	g1HeapVerifier.cpp	/^  virtual bool do_heap_region(HeapRegion* hr) {$/;"	f	class:G1VerifyBitmapClosure
do_heap_region	g1HeapVerifier.cpp	/^  virtual bool do_heap_region(HeapRegion* hr) {$/;"	f	class:VerifyReadyForArchivingRegionClosure
do_heap_region	g1HeapVerifier.cpp	/^  virtual bool do_heap_region(HeapRegion* r) {$/;"	f	class:G1VerifyCardTableCleanup
do_heap_region	g1HeapVerifier.cpp	/^  virtual bool do_heap_region(HeapRegion* r) {$/;"	f	class:G1VerifyDirtyYoungListClosure
do_heap_region	g1HeapVerifier.cpp	/^  virtual bool do_heap_region(HeapRegion* r) {$/;"	f	class:VerifyArchivePointerRegionClosure	file:
do_heap_region	g1NUMA.cpp	/^bool G1NodeIndexCheckClosure::do_heap_region(HeapRegion* hr) {$/;"	f	class:G1NodeIndexCheckClosure
do_heap_region	g1Policy.cpp	/^  virtual bool do_heap_region(HeapRegion* r) {$/;"	f	class:G1ClearCollectionSetCandidateRemSets	file:
do_heap_region	g1RemSet.cpp	/^    bool do_heap_region(HeapRegion* hr) {$/;"	f	class:G1RebuildRemSetTask::G1RebuildRemSetHeapRegionClosure
do_heap_region	g1RemSet.cpp	/^    virtual bool do_heap_region(HeapRegion* r) {$/;"	f	class:G1MergeHeapRootsTask::G1FlushHumongousCandidateRemSets
do_heap_region	g1RemSet.cpp	/^    virtual bool do_heap_region(HeapRegion* r) {$/;"	f	class:G1MergeHeapRootsTask::G1MergeCardSetClosure
do_heap_region	g1RemSet.cpp	/^  bool do_heap_region(HeapRegion* r) {$/;"	f	class:G1ScanCollectionSetRegionClosure
do_heap_region	g1RemSet.cpp	/^  bool do_heap_region(HeapRegion* r) {$/;"	f	class:G1ScanHRForRegionClosure
do_heap_region	g1RemSetSummary.cpp	/^  bool do_heap_region(HeapRegion* r) {$/;"	f	class:HRRSStatsIter
do_heap_region	g1ServiceThread.cpp	/^  virtual bool do_heap_region(HeapRegion* r) {$/;"	f	class:G1YoungRemSetSamplingClosure
do_klass	g1FullGCOopClosures.inline.hpp	/^inline void G1MarkAndPushClosure::do_klass(Klass* k) {$/;"	f	class:G1MarkAndPushClosure
do_load	c1/g1BarrierSetC1.hpp	/^  bool do_load() const { return _do_load; }$/;"	f	class:G1PreBarrierStub
do_marking	g1CodeBlobClosure.cpp	/^void G1CodeBlobClosure::do_marking(nmethod* nm) {$/;"	f	class:G1CodeBlobClosure
do_marking_step	g1ConcurrentMark.cpp	/^void G1CMTask::do_marking_step(double time_target_ms,$/;"	f	class:G1CMTask
do_metadata	g1FullGCOopClosures.inline.hpp	/^inline bool G1MarkAndPushClosure::do_metadata() {$/;"	f	class:G1MarkAndPushClosure
do_object	g1EvacFailure.cpp	/^  void do_object(oop obj) {$/;"	f	class:RemoveSelfForwardPtrObjClosure
do_object	g1HeapVerifier.cpp	/^  void do_object(oop o) {$/;"	f	class:VerifyObjectInArchiveRegionClosure
do_object	g1HeapVerifier.cpp	/^  void do_object(oop o) {$/;"	f	class:VerifyObjsInRegionClosure
do_object_b	g1CollectedHeap.cpp	/^bool G1STWIsAliveClosure::do_object_b(oop p) {$/;"	f	class:G1STWIsAliveClosure
do_object_b	g1CollectedHeap.cpp	/^bool G1STWSubjectToDiscoveryClosure::do_object_b(oop obj) {$/;"	f	class:G1STWSubjectToDiscoveryClosure
do_object_b	g1ConcurrentMark.cpp	/^  bool do_object_b(oop obj) {$/;"	f	class:G1ObjectCountIsAliveClosure
do_object_b	g1ConcurrentMark.inline.hpp	/^inline bool G1CMIsAliveClosure::do_object_b(oop obj) {$/;"	f	class:G1CMIsAliveClosure
do_object_b	g1ConcurrentMark.inline.hpp	/^inline bool G1CMSubjectToDiscoveryClosure::do_object_b(oop obj) {$/;"	f	class:G1CMSubjectToDiscoveryClosure
do_object_b	g1FullCollector.hpp	/^  bool do_object_b(oop p) {$/;"	f	class:G1FullGCSubjectToDiscoveryClosure
do_object_b	g1FullGCOopClosures.inline.hpp	/^inline bool G1IsAliveClosure::do_object_b(oop p) {$/;"	f	class:G1IsAliveClosure
do_oop	g1CodeBlobClosure.cpp	/^void G1CodeBlobClosure::HeapRegionGatheringOopClosure::do_oop(narrowOop* o) {$/;"	f	class:G1CodeBlobClosure::HeapRegionGatheringOopClosure
do_oop	g1CodeBlobClosure.cpp	/^void G1CodeBlobClosure::HeapRegionGatheringOopClosure::do_oop(oop* o) {$/;"	f	class:G1CodeBlobClosure::HeapRegionGatheringOopClosure
do_oop	g1CodeBlobClosure.cpp	/^void G1CodeBlobClosure::MarkingOopClosure::do_oop(narrowOop* o) {$/;"	f	class:G1CodeBlobClosure::MarkingOopClosure
do_oop	g1CodeBlobClosure.cpp	/^void G1CodeBlobClosure::MarkingOopClosure::do_oop(oop* o) {$/;"	f	class:G1CodeBlobClosure::MarkingOopClosure
do_oop	g1CodeCacheRemSet.cpp	/^    void do_oop(narrowOop* o) {$/;"	f	class:CleanCallback::PointsIntoHRDetectionClosure
do_oop	g1CodeCacheRemSet.cpp	/^    void do_oop(oop* o) {$/;"	f	class:CleanCallback::PointsIntoHRDetectionClosure
do_oop	g1CollectedHeap.cpp	/^  virtual void do_oop(      oop* p) { do_oop_work(p); }$/;"	f	class:G1CopyingKeepAliveClosure
do_oop	g1CollectedHeap.cpp	/^  virtual void do_oop(narrowOop* p) { do_oop_work(p); }$/;"	f	class:G1CopyingKeepAliveClosure
do_oop	g1CollectedHeap.cpp	/^  void do_oop(narrowOop* p) { do_oop_work(p); }$/;"	f	class:RegisterNMethodOopClosure
do_oop	g1CollectedHeap.cpp	/^  void do_oop(narrowOop* p) { do_oop_work(p); }$/;"	f	class:UnregisterNMethodOopClosure
do_oop	g1CollectedHeap.cpp	/^  void do_oop(narrowOop* p) { guarantee(false, "Not needed"); }$/;"	f	class:G1KeepAliveClosure
do_oop	g1CollectedHeap.cpp	/^  void do_oop(oop* p)       { do_oop_work(p); }$/;"	f	class:RegisterNMethodOopClosure
do_oop	g1CollectedHeap.cpp	/^  void do_oop(oop* p)       { do_oop_work(p); }$/;"	f	class:UnregisterNMethodOopClosure
do_oop	g1CollectedHeap.cpp	/^  void do_oop(oop* p) {$/;"	f	class:G1KeepAliveClosure
do_oop	g1ConcurrentMark.cpp	/^  virtual void do_oop(      oop* p) { do_oop_work(p); }$/;"	f	class:G1CMKeepAliveAndDrainClosure
do_oop	g1ConcurrentMark.cpp	/^  virtual void do_oop(narrowOop* p) { do_oop_work(p); }$/;"	f	class:G1CMKeepAliveAndDrainClosure
do_oop	g1EvacFailure.cpp	/^  virtual void do_oop(      oop* p) { do_oop_work(p); }$/;"	f	class:UpdateLogBuffersDeferred
do_oop	g1EvacFailure.cpp	/^  virtual void do_oop(narrowOop* p) { do_oop_work(p); }$/;"	f	class:UpdateLogBuffersDeferred
do_oop	g1FullGCOopClosures.cpp	/^void G1FullKeepAliveClosure::do_oop(narrowOop* p) { do_oop_work(p); }$/;"	f	class:G1FullKeepAliveClosure
do_oop	g1FullGCOopClosures.cpp	/^void G1FullKeepAliveClosure::do_oop(oop* p) { do_oop_work(p); }$/;"	f	class:G1FullKeepAliveClosure
do_oop	g1FullGCOopClosures.hpp	/^  void do_oop(narrowOop* p) { do_oop_work(p); }$/;"	f	class:G1VerifyOopClosure
do_oop	g1FullGCOopClosures.hpp	/^  void do_oop(oop* p)       { do_oop_work(p); }$/;"	f	class:G1VerifyOopClosure
do_oop	g1FullGCOopClosures.inline.hpp	/^inline void G1AdjustClosure::do_oop(narrowOop* p) { do_oop_work(p); }$/;"	f	class:G1AdjustClosure
do_oop	g1FullGCOopClosures.inline.hpp	/^inline void G1AdjustClosure::do_oop(oop* p)       { do_oop_work(p); }$/;"	f	class:G1AdjustClosure
do_oop	g1FullGCOopClosures.inline.hpp	/^inline void G1MarkAndPushClosure::do_oop(narrowOop* p) {$/;"	f	class:G1MarkAndPushClosure
do_oop	g1FullGCOopClosures.inline.hpp	/^inline void G1MarkAndPushClosure::do_oop(oop* p) {$/;"	f	class:G1MarkAndPushClosure
do_oop	g1HeapVerifier.cpp	/^  void do_oop(      oop *p) { do_oop_work(p); }$/;"	f	class:VerifyArchiveOopClosure
do_oop	g1HeapVerifier.cpp	/^  void do_oop(      oop *p) { do_oop_work(p); }$/;"	f	class:VerifyLivenessOopClosure
do_oop	g1HeapVerifier.cpp	/^  void do_oop(narrowOop *p) { do_oop_work(p); }$/;"	f	class:VerifyArchiveOopClosure
do_oop	g1HeapVerifier.cpp	/^  void do_oop(narrowOop *p) { do_oop_work(p); }$/;"	f	class:VerifyLivenessOopClosure
do_oop	g1HeapVerifier.cpp	/^  void do_oop(narrowOop* p) { ShouldNotReachHere(); }$/;"	f	class:YoungRefCounterClosure
do_oop	g1HeapVerifier.cpp	/^  void do_oop(narrowOop* p) { do_oop_work(p); }$/;"	f	class:G1VerifyCodeRootOopClosure
do_oop	g1HeapVerifier.cpp	/^  void do_oop(narrowOop* p) { do_oop_work(p); }$/;"	f	class:VerifyRootsClosure
do_oop	g1HeapVerifier.cpp	/^  void do_oop(oop* p)       { do_oop_work(p); }$/;"	f	class:VerifyRootsClosure
do_oop	g1HeapVerifier.cpp	/^  void do_oop(oop* p)       { if (_g1h->is_in_young(*p)) { _count++; } }$/;"	f	class:YoungRefCounterClosure
do_oop	g1HeapVerifier.cpp	/^  void do_oop(oop* p) { do_oop_work(p); }$/;"	f	class:G1VerifyCodeRootOopClosure
do_oop	g1OopClosures.hpp	/^  virtual void do_oop(      oop* p) { do_oop_work(p); }$/;"	f	class:G1CMOopClosure
do_oop	g1OopClosures.hpp	/^  virtual void do_oop(      oop* p) { do_oop_work(p); }$/;"	f	class:G1RootRegionScanClosure
do_oop	g1OopClosures.hpp	/^  virtual void do_oop(narrowOop* p)    { do_oop_work(p); }$/;"	f	class:G1ScanEvacuatedObjClosure
do_oop	g1OopClosures.hpp	/^  virtual void do_oop(narrowOop* p)    { do_oop_work(p); }$/;"	f	class:G1ScanRSForOptionalClosure
do_oop	g1OopClosures.hpp	/^  virtual void do_oop(narrowOop* p) { do_oop_work(p); }$/;"	f	class:G1CMOopClosure
do_oop	g1OopClosures.hpp	/^  virtual void do_oop(narrowOop* p) { do_oop_work(p); }$/;"	f	class:G1ConcurrentRefineOopClosure
do_oop	g1OopClosures.hpp	/^  virtual void do_oop(narrowOop* p) { do_oop_work(p); }$/;"	f	class:G1ParCopyClosure
do_oop	g1OopClosures.hpp	/^  virtual void do_oop(narrowOop* p) { do_oop_work(p); }$/;"	f	class:G1RebuildRemSetClosure
do_oop	g1OopClosures.hpp	/^  virtual void do_oop(narrowOop* p) { do_oop_work(p); }$/;"	f	class:G1RootRegionScanClosure
do_oop	g1OopClosures.hpp	/^  virtual void do_oop(narrowOop* p) { do_oop_work(p); }$/;"	f	class:G1ScanCardClosure
do_oop	g1OopClosures.hpp	/^  virtual void do_oop(oop* p)          { do_oop_work(p); }$/;"	f	class:G1ScanEvacuatedObjClosure
do_oop	g1OopClosures.hpp	/^  virtual void do_oop(oop* p)          { do_oop_work(p); }$/;"	f	class:G1ScanRSForOptionalClosure
do_oop	g1OopClosures.hpp	/^  virtual void do_oop(oop* p)       { do_oop_work(p); }$/;"	f	class:G1ConcurrentRefineOopClosure
do_oop	g1OopClosures.hpp	/^  virtual void do_oop(oop* p)       { do_oop_work(p); }$/;"	f	class:G1ParCopyClosure
do_oop	g1OopClosures.hpp	/^  virtual void do_oop(oop* p)       { do_oop_work(p); }$/;"	f	class:G1RebuildRemSetClosure
do_oop	g1OopClosures.hpp	/^  virtual void do_oop(oop* p)       { do_oop_work(p); }$/;"	f	class:G1ScanCardClosure
do_oop	heapRegion.cpp	/^  virtual inline void do_oop(narrowOop* p) { do_oop_work(p); }$/;"	f	class:G1Mux2Closure
do_oop	heapRegion.cpp	/^  virtual inline void do_oop(oop* p) { do_oop_work(p); }$/;"	f	class:G1Mux2Closure
do_oop	heapRegion.cpp	/^  virtual void do_oop(narrowOop* p) { do_oop_work(p); }$/;"	f	class:VerifyLiveClosure
do_oop	heapRegion.cpp	/^  virtual void do_oop(narrowOop* p) { do_oop_work(p); }$/;"	f	class:VerifyRemSetClosure
do_oop	heapRegion.cpp	/^  virtual void do_oop(oop* p) { do_oop_work(p); }$/;"	f	class:VerifyLiveClosure
do_oop	heapRegion.cpp	/^  virtual void do_oop(oop* p) { do_oop_work(p); }$/;"	f	class:VerifyRemSetClosure
do_oop	heapRegion.cpp	/^  void do_oop(narrowOop* p) { do_oop_work(p); }$/;"	f	class:VerifyStrongCodeRootOopClosure
do_oop	heapRegion.cpp	/^  void do_oop(oop* p)       { do_oop_work(p); }$/;"	f	class:VerifyStrongCodeRootOopClosure
do_oop_evac	g1ParScanThreadState.cpp	/^template <class T> void G1ParScanThreadState::do_oop_evac(T* p) {$/;"	f	class:G1ParScanThreadState
do_oop_work	g1CodeBlobClosure.cpp	/^void G1CodeBlobClosure::HeapRegionGatheringOopClosure::do_oop_work(T* p) {$/;"	f	class:G1CodeBlobClosure::HeapRegionGatheringOopClosure
do_oop_work	g1CodeBlobClosure.cpp	/^void G1CodeBlobClosure::MarkingOopClosure::do_oop_work(T* p) {$/;"	f	class:G1CodeBlobClosure::MarkingOopClosure
do_oop_work	g1CodeCacheRemSet.cpp	/^    void do_oop_work(T* p) {$/;"	f	class:CleanCallback::PointsIntoHRDetectionClosure
do_oop_work	g1CollectedHeap.cpp	/^  template <class T> void do_oop_work(T* p) {$/;"	f	class:G1CopyingKeepAliveClosure
do_oop_work	g1CollectedHeap.cpp	/^  template <class T> void do_oop_work(T* p) {$/;"	f	class:RegisterNMethodOopClosure	file:
do_oop_work	g1CollectedHeap.cpp	/^  template <class T> void do_oop_work(T* p) {$/;"	f	class:UnregisterNMethodOopClosure	file:
do_oop_work	g1ConcurrentMark.cpp	/^  template <class T> void do_oop_work(T* p) {$/;"	f	class:G1CMKeepAliveAndDrainClosure
do_oop_work	g1EvacFailure.cpp	/^  template <class T> void do_oop_work(T* p) {$/;"	f	class:UpdateLogBuffersDeferred
do_oop_work	g1FullGCOopClosures.cpp	/^template <class T> void G1VerifyOopClosure::do_oop_work(T* p) {$/;"	f	class:G1VerifyOopClosure
do_oop_work	g1FullGCOopClosures.hpp	/^  template <class T> void do_oop_work(T* p) { adjust_pointer(p); }$/;"	f	class:G1AdjustClosure
do_oop_work	g1FullGCOopClosures.inline.hpp	/^inline void G1FullKeepAliveClosure::do_oop_work(T* p) {$/;"	f	class:G1FullKeepAliveClosure
do_oop_work	g1FullGCOopClosures.inline.hpp	/^inline void G1MarkAndPushClosure::do_oop_work(T* p) {$/;"	f	class:G1MarkAndPushClosure
do_oop_work	g1HeapVerifier.cpp	/^  template <class T> void do_oop_work(T *p) {$/;"	f	class:VerifyArchiveOopClosure
do_oop_work	g1HeapVerifier.cpp	/^  template <class T> void do_oop_work(T *p) {$/;"	f	class:VerifyLivenessOopClosure
do_oop_work	g1HeapVerifier.cpp	/^  template <class T> void do_oop_work(T* p) {$/;"	f	class:G1VerifyCodeRootOopClosure	file:
do_oop_work	g1HeapVerifier.cpp	/^  template <class T> void do_oop_work(T* p) {$/;"	f	class:VerifyRootsClosure
do_oop_work	g1OopClosures.inline.hpp	/^inline void G1CMOopClosure::do_oop_work(T* p) {$/;"	f	class:G1CMOopClosure
do_oop_work	g1OopClosures.inline.hpp	/^inline void G1ConcurrentRefineOopClosure::do_oop_work(T* p) {$/;"	f	class:G1ConcurrentRefineOopClosure
do_oop_work	g1OopClosures.inline.hpp	/^inline void G1RootRegionScanClosure::do_oop_work(T* p) {$/;"	f	class:G1RootRegionScanClosure
do_oop_work	g1OopClosures.inline.hpp	/^inline void G1ScanCardClosure::do_oop_work(T* p) {$/;"	f	class:G1ScanCardClosure
do_oop_work	g1OopClosures.inline.hpp	/^inline void G1ScanEvacuatedObjClosure::do_oop_work(T* p) {$/;"	f	class:G1ScanEvacuatedObjClosure
do_oop_work	g1OopClosures.inline.hpp	/^inline void G1ScanRSForOptionalClosure::do_oop_work(T* p) {$/;"	f	class:G1ScanRSForOptionalClosure
do_oop_work	g1OopClosures.inline.hpp	/^template <class T> void G1RebuildRemSetClosure::do_oop_work(T* p) {$/;"	f	class:G1RebuildRemSetClosure
do_oop_work	g1OopClosures.inline.hpp	/^void G1ParCopyClosure<barrier, do_mark_object>::do_oop_work(T* p) {$/;"	f	class:G1ParCopyClosure
do_oop_work	heapRegion.cpp	/^  template <class T> inline void do_oop_work(T* p) {$/;"	f	class:G1Mux2Closure
do_oop_work	heapRegion.cpp	/^  template <class T> void do_oop_work(T* p) {$/;"	f	class:VerifyStrongCodeRootOopClosure	file:
do_oop_work	heapRegion.cpp	/^  void do_oop_work(T* p) {$/;"	f	class:VerifyLiveClosure
do_oop_work	heapRegion.cpp	/^  void do_oop_work(T* p) {$/;"	f	class:VerifyRemSetClosure
do_oops_on_memregion_in_humongous	heapRegion.inline.hpp	/^HeapWord* HeapRegion::do_oops_on_memregion_in_humongous(MemRegion mr,$/;"	f	class:HeapRegion
do_partial_array	g1ParScanThreadState.cpp	/^void G1ParScanThreadState::do_partial_array(PartialArrayScanTask task) {$/;"	f	class:G1ParScanThreadState
do_refinement_step	g1ConcurrentRefine.cpp	/^bool G1ConcurrentRefine::do_refinement_step(uint worker_id,$/;"	f	class:G1ConcurrentRefine
do_regular_processing	g1CodeBlobClosure.cpp	/^  void do_regular_processing(nmethod* nm) {$/;"	f	class:G1NmethodProcessor
do_remaining_strong_processing	g1CodeBlobClosure.cpp	/^  void do_remaining_strong_processing(nmethod* nm) {$/;"	f	class:G1NmethodProcessor
do_thread	g1ConcurrentMark.cpp	/^  void do_thread(Thread* thread) {$/;"	f	class:G1RemarkThreadsClosure
do_void	g1CollectedHeap.cpp	/^  void do_void() {$/;"	f	class:G1STWDrainQueueClosure
do_void	g1CollectedHeap.cpp	/^void G1ParEvacuateFollowersClosure::do_void() {$/;"	f	class:G1ParEvacuateFollowersClosure
do_void	g1ConcurrentMark.cpp	/^  void do_void() {$/;"	f	class:G1CMDrainMarkingStackClosure
do_void	g1ConcurrentMarkThread.cpp	/^  void do_void(){$/;"	f	class:CMCleanup
do_void	g1ConcurrentMarkThread.cpp	/^  void do_void(){$/;"	f	class:CMRemark
do_void	g1FullGCOopClosures.cpp	/^void G1FollowStackClosure::do_void() { _marker->drain_stack(); }$/;"	f	class:G1FollowStackClosure
do_yield_check	g1ConcurrentMark.inline.hpp	/^inline bool G1ConcurrentMark::do_yield_check() {$/;"	f	class:G1ConcurrentMark
doit	g1HeapRegionEventSender.cpp	/^  virtual void doit() {$/;"	f	class:VM_G1SendHeapRegionInfoEvents	file:
doit	g1VMOperations.cpp	/^void VM_G1CollectForAllocation::doit() {$/;"	f	class:VM_G1CollectForAllocation
doit	g1VMOperations.cpp	/^void VM_G1CollectFull::doit() {$/;"	f	class:VM_G1CollectFull
doit	g1VMOperations.cpp	/^void VM_G1Concurrent::doit() {$/;"	f	class:VM_G1Concurrent
doit	g1VMOperations.cpp	/^void VM_G1TryInitiateConcMark::doit() {$/;"	f	class:VM_G1TryInitiateConcMark
doit_epilogue	g1VMOperations.cpp	/^void VM_G1Concurrent::doit_epilogue() {$/;"	f	class:VM_G1Concurrent
doit_prologue	g1VMOperations.cpp	/^bool VM_G1Concurrent::doit_prologue() {$/;"	f	class:VM_G1Concurrent
doit_prologue	g1VMOperations.cpp	/^bool VM_G1TryInitiateConcMark::doit_prologue() {$/;"	f	class:VM_G1TryInitiateConcMark
drain	g1HotCardCache.cpp	/^void G1HotCardCache::drain(G1CardTableEntryClosure* cl, uint worker_id) {$/;"	f	class:G1HotCardCache
drain_global_stack	g1ConcurrentMark.cpp	/^void G1CMTask::drain_global_stack(bool partially) {$/;"	f	class:G1CMTask
drain_local_queue	g1ConcurrentMark.cpp	/^void G1CMTask::drain_local_queue(bool partially) {$/;"	f	class:G1CMTask
drain_satb_buffers	g1ConcurrentMark.cpp	/^void G1CMTask::drain_satb_buffers() {$/;"	f	class:G1CMTask
drain_stack	g1FullGCMarker.inline.hpp	/^void G1FullGCMarker::drain_stack() {$/;"	f	class:G1FullGCMarker
duration	g1MMUTracker.hpp	/^  inline double duration()   { return _end_time - _start_time; }$/;"	f	class:G1MMUTrackerQueueElem
during_cycle	g1ConcurrentMarkThread.hpp	/^  bool during_cycle()      { return !idle(); }$/;"	f	class:G1ConcurrentMarkThread
eagerly_reclaim_humongous_regions	g1CollectedHeap.cpp	/^void G1CollectedHeap::eagerly_reclaim_humongous_regions() {$/;"	f	class:G1CollectedHeap
eden_region_length	g1CollectionSet.hpp	/^  uint eden_region_length() const     { return _eden_region_length;     }$/;"	f	class:G1CollectionSet
eden_regions_count	g1CollectedHeap.hpp	/^  uint eden_regions_count() const { return _eden.length(); }$/;"	f	class:G1CollectedHeap
eden_regions_count	g1CollectedHeap.hpp	/^  uint eden_regions_count(uint node_index) const { return _eden.regions_on_node(node_index); }$/;"	f	class:G1CollectedHeap
eden_regions_used_bytes	g1CollectedHeap.hpp	/^  size_t eden_regions_used_bytes() const { return _eden.used_bytes(); }$/;"	f	class:G1CollectedHeap
eden_space_memory_usage	g1MonitoringSupport.cpp	/^MemoryUsage G1MonitoringSupport::eden_space_memory_usage(size_t initial_size, size_t max_size) {$/;"	f	class:G1MonitoringSupport
eden_space_used	g1MonitoringSupport.hpp	/^  size_t eden_space_used()            { return _eden_space_used; }$/;"	f	class:G1MonitoringSupport
eliminate_gc_barrier	c2/g1BarrierSetC2.cpp	/^void G1BarrierSetC2::eliminate_gc_barrier(PhaseMacroExpand* macro, Node* node) const {$/;"	f	class:G1BarrierSetC2
emit_code	c1/g1BarrierSetC1.cpp	/^void G1PostBarrierStub::emit_code(LIR_Assembler* ce) {$/;"	f	class:G1PostBarrierStub
emit_code	c1/g1BarrierSetC1.cpp	/^void G1PreBarrierStub::emit_code(LIR_Assembler* ce) {$/;"	f	class:G1PreBarrierStub
empty_buckets	sparsePRT.cpp	/^static int empty_buckets[] = { RSHashTable::NullEntry };$/;"	v	file:
empty_table	sparsePRT.cpp	/^RSHashTable RSHashTable::empty_table;$/;"	m	class:RSHashTable	file:
empty_table	sparsePRT.hpp	/^  static RSHashTable empty_table;$/;"	m	class:RSHashTable
enable_archive_object_check	g1Allocator.inline.hpp	/^inline void G1ArchiveAllocator::enable_archive_object_check() {$/;"	f	class:G1ArchiveAllocator
enable_verification_type	g1HeapVerifier.cpp	/^void G1HeapVerifier::enable_verification_type(G1VerifyType type) {$/;"	f	class:G1HeapVerifier
end	heapRegion.hpp	/^  HeapWord* end() const            { return _end;    }$/;"	f	class:HeapRegion
end	heapRegionManager.hpp	/^  uint end() const { return _end; }$/;"	f	class:HeapRegionRange
end_address_mapped	g1BiasedArray.hpp	/^  HeapWord* end_address_mapped() const {$/;"	f	class:G1BiasedMappedArray
end_archive_alloc_range	g1CollectedHeap.cpp	/^void G1CollectedHeap::end_archive_alloc_range(GrowableArray<MemRegion>* ranges,$/;"	f	class:G1CollectedHeap
end_index_of_dram	heterogeneousHeapRegionManager.cpp	/^uint HeterogeneousHeapRegionManager::end_index_of_dram() const { return 2*_max_regions - 1; }$/;"	f	class:HeterogeneousHeapRegionManager
end_index_of_nvdimm	heterogeneousHeapRegionManager.cpp	/^uint HeterogeneousHeapRegionManager::end_index_of_nvdimm() const { return _max_regions - 1; }$/;"	f	class:HeterogeneousHeapRegionManager
end_term_time	g1CollectedHeap.hpp	/^  void end_term_time() { _term_time += (os::elapsedTime() - _start_term); }$/;"	f	class:G1ParEvacuateFollowersClosure
end_time	g1MMUTracker.hpp	/^  inline double end_time()   { return _end_time; }$/;"	f	class:G1MMUTrackerQueueElem
end_work	g1CollectedHeap.cpp	/^  virtual void end_work(uint worker_id) { }$/;"	f	class:G1EvacuateRegionsBaseTask
end_work	g1CollectedHeap.cpp	/^  void end_work(uint worker_id) {$/;"	f	class:G1EvacuateRegionsTask	file:
enough_samples_available	g1Analytics.cpp	/^bool G1Analytics::enough_samples_available(TruncatedSeq const* seq) const {$/;"	f	class:G1Analytics
enqueue	g1BarrierSet.cpp	/^void G1BarrierSet::enqueue(oop pre_val) {$/;"	f	class:G1BarrierSet
enqueue	g1SharedDirtyCardQueue.cpp	/^void G1SharedDirtyCardQueue::enqueue(void* card_ptr) {$/;"	f	class:G1SharedDirtyCardQueue
enqueue_all_paused_buffers	g1DirtyCardQueue.cpp	/^void G1DirtyCardQueueSet::enqueue_all_paused_buffers() {$/;"	f	class:G1DirtyCardQueueSet
enqueue_card_if_tracked	g1ParScanThreadState.hpp	/^  template <class T> void enqueue_card_if_tracked(G1HeapRegionAttr region_attr, T* p, oop o) {$/;"	f	class:G1ParScanThreadState
enqueue_completed_buffer	g1DirtyCardQueue.cpp	/^void G1DirtyCardQueueSet::enqueue_completed_buffer(BufferNode* cbn) {$/;"	f	class:G1DirtyCardQueueSet
enqueue_completed_buffer	g1RedirtyCardsQueue.cpp	/^void G1RedirtyCardsQueueBase::LocalQSet::enqueue_completed_buffer(BufferNode* node) {$/;"	f	class:G1RedirtyCardsQueueBase::LocalQSet
enqueue_completed_buffer	g1RedirtyCardsQueue.cpp	/^void G1RedirtyCardsQueueSet::enqueue_completed_buffer(BufferNode* node) {$/;"	f	class:G1RedirtyCardsQueueSet
enqueue_from_evacuation	g1StringDedup.cpp	/^void G1StringDedup::enqueue_from_evacuation(bool from_young, bool to_young, uint worker_id, oop java_string) {$/;"	f	class:G1StringDedup
enqueue_from_mark	g1StringDedup.cpp	/^void G1StringDedup::enqueue_from_mark(oop java_string, uint worker_id) {$/;"	f	class:G1StringDedup
enqueue_if_weak	g1BarrierSet.inline.hpp	/^inline void G1BarrierSet::enqueue_if_weak(DecoratorSet decorators, oop value) {$/;"	f	class:G1BarrierSet
enqueue_paused_buffers_aux	g1DirtyCardQueue.cpp	/^void G1DirtyCardQueueSet::enqueue_paused_buffers_aux(const HeadTail& paused) {$/;"	f	class:G1DirtyCardQueueSet
enqueue_previous_paused_buffers	g1DirtyCardQueue.cpp	/^void G1DirtyCardQueueSet::enqueue_previous_paused_buffers() {$/;"	f	class:G1DirtyCardQueueSet
enter_first_sync_barrier	g1ConcurrentMark.cpp	/^void G1ConcurrentMark::enter_first_sync_barrier(uint worker_id) {$/;"	f	class:G1ConcurrentMark
enter_second_sync_barrier	g1ConcurrentMark.cpp	/^void G1ConcurrentMark::enter_second_sync_barrier(uint worker_id) {$/;"	f	class:G1ConcurrentMark
entry	sparsePRT.hpp	/^  SparsePRTEntry* entry(int i) const {$/;"	f	class:RSHashTable
entry_for_region_ind_create	sparsePRT.cpp	/^RSHashTable::entry_for_region_ind_create(RegionIdx_t region_ind) {$/;"	f	class:RSHashTable
entry_size	g1CodeRootSetTable.hpp	/^  int entry_size() const { return BasicHashtable<mtGC>::entry_size(); }$/;"	f	class:G1CodeRootSetTable
escape_add_to_con_graph	c2/g1BarrierSetC2.cpp	/^bool G1BarrierSetC2::escape_add_to_con_graph(ConnectionGraph* conn_graph, PhaseGVN* gvn, Unique_Node_List* delayed_worklist, Node* n, uint opcode) const {$/;"	f	class:G1BarrierSetC2
evac_failure	g1HRPrinter.hpp	/^  void evac_failure(HeapRegion* hr) {$/;"	f	class:G1HRPrinter
evacuate_initial_collection_set	g1CollectedHeap.cpp	/^void G1CollectedHeap::evacuate_initial_collection_set(G1ParScanThreadStateSet* per_thread_states) {$/;"	f	class:G1CollectedHeap
evacuate_live_objects	g1CollectedHeap.cpp	/^  void evacuate_live_objects(G1ParScanThreadState* pss, uint worker_id) {$/;"	f	class:G1EvacuateOptionalRegionsTask	file:
evacuate_live_objects	g1CollectedHeap.cpp	/^  void evacuate_live_objects(G1ParScanThreadState* pss, uint worker_id) {$/;"	f	class:G1EvacuateRegionsTask	file:
evacuate_live_objects	g1CollectedHeap.cpp	/^  void evacuate_live_objects(G1ParScanThreadState* pss,$/;"	f	class:G1EvacuateRegionsBaseTask
evacuate_next_optional_regions	g1CollectedHeap.cpp	/^void G1CollectedHeap::evacuate_next_optional_regions(G1ParScanThreadStateSet* per_thread_states) {$/;"	f	class:G1CollectedHeap
evacuate_optional_collection_set	g1CollectedHeap.cpp	/^void G1CollectedHeap::evacuate_optional_collection_set(G1ParScanThreadStateSet* per_thread_states) {$/;"	f	class:G1CollectedHeap
evacuate_roots	g1RootProcessor.cpp	/^void G1RootProcessor::evacuate_roots(G1ParScanThreadState* pss, uint worker_id) {$/;"	f	class:G1RootProcessor
evacuation_failed	g1CollectedHeap.hpp	/^  bool evacuation_failed() { return _evacuation_failed; }$/;"	f	class:G1CollectedHeap
evacuation_failed	heapRegion.hpp	/^  bool evacuation_failed() { return _evacuation_failed; }$/;"	f	class:HeapRegion
evacuation_failure_alot_for_gc_type	g1CollectedHeap.inline.hpp	/^G1CollectedHeap::evacuation_failure_alot_for_gc_type(bool for_young_gc,$/;"	f	class:G1CollectedHeap
evacuation_should_fail	g1CollectedHeap.inline.hpp	/^inline bool G1CollectedHeap::evacuation_should_fail() {$/;"	f	class:G1CollectedHeap
evict	g1RegionMarkStatsCache.inline.hpp	/^inline void G1RegionMarkStatsCache::evict(uint idx) {$/;"	f	class:G1RegionMarkStatsCache
evict_all	g1RegionMarkStatsCache.cpp	/^Pair<size_t, size_t> G1RegionMarkStatsCache::evict_all() {$/;"	f	class:G1RegionMarkStatsCache
exclude_region_from_scan	g1RemSet.cpp	/^void G1RemSet::exclude_region_from_scan(uint region_idx) {$/;"	f	class:G1RemSet
execute	g1CollectedHeap.cpp	/^void G1STWRefProcTaskExecutor::execute(ProcessTask& proc_task, uint ergo_workers) {$/;"	f	class:G1STWRefProcTaskExecutor
execute	g1ConcurrentMark.cpp	/^void G1CMRefProcTaskExecutor::execute(ProcessTask& proc_task, uint ergo_workers) {$/;"	f	class:G1CMRefProcTaskExecutor
execute	g1FullGCReferenceProcessorExecutor.cpp	/^void G1FullGCReferenceProcessingExecutor::execute(ProcessTask& proc_task, uint ergo_workers) {$/;"	f	class:G1FullGCReferenceProcessingExecutor
execute	g1FullGCReferenceProcessorExecutor.cpp	/^void G1FullGCReferenceProcessingExecutor::execute(STWGCTimer* timer, G1FullGCTracer* tracer) {$/;"	f	class:G1FullGCReferenceProcessingExecutor
expand	g1CollectedHeap.cpp	/^bool G1CollectedHeap::expand(size_t expand_bytes, WorkGang* pretouch_workers, double* expand_time_ms) {$/;"	f	class:G1CollectedHeap
expand	g1ConcurrentMark.cpp	/^void G1CMMarkStack::expand() {$/;"	f	class:G1CMMarkStack
expand	sparsePRT.cpp	/^void SparsePRT::expand() {$/;"	f	class:SparsePRT
expand_and_allocate	g1CollectedHeap.cpp	/^HeapWord* G1CollectedHeap::expand_and_allocate(size_t word_size) {$/;"	f	class:G1CollectedHeap
expand_and_allocate_humongous	heapRegionManager.cpp	/^HeapRegion* HeapRegionManager::expand_and_allocate_humongous(uint num_regions) {$/;"	f	class:HeapRegionManager
expand_at	heapRegionManager.cpp	/^uint HeapRegionManager::expand_at(uint start, uint num_regions, WorkGang* pretouch_workers) {$/;"	f	class:HeapRegionManager
expand_at	heterogeneousHeapRegionManager.cpp	/^uint HeterogeneousHeapRegionManager::expand_at(uint start, uint num_regions, WorkGang* pretouch_workers) {$/;"	f	class:HeterogeneousHeapRegionManager
expand_by	heapRegionManager.cpp	/^uint HeapRegionManager::expand_by(uint num_regions, WorkGang* pretouch_workers) {$/;"	f	class:HeapRegionManager
expand_by	heterogeneousHeapRegionManager.cpp	/^uint HeterogeneousHeapRegionManager::expand_by(uint num_regions, WorkGang* pretouch_workers) {$/;"	f	class:HeterogeneousHeapRegionManager
expand_dram	heterogeneousHeapRegionManager.cpp	/^uint HeterogeneousHeapRegionManager::expand_dram(uint num_regions, WorkGang* pretouch_workers) {$/;"	f	class:HeterogeneousHeapRegionManager
expand_exact	heapRegionManager.cpp	/^void HeapRegionManager::expand_exact(uint start, uint num_regions, WorkGang* pretouch_workers) {$/;"	f	class:HeapRegionManager
expand_heap_after_young_collection	g1CollectedHeap.cpp	/^void G1CollectedHeap::expand_heap_after_young_collection(){$/;"	f	class:G1CollectedHeap
expand_in_range	heterogeneousHeapRegionManager.cpp	/^uint HeterogeneousHeapRegionManager::expand_in_range(uint start, uint end, uint num_regions, WorkGang* pretouch_gang) {$/;"	f	class:HeterogeneousHeapRegionManager
expand_nvdimm	heterogeneousHeapRegionManager.cpp	/^uint HeterogeneousHeapRegionManager::expand_nvdimm(uint num_regions, WorkGang* pretouch_workers) {$/;"	f	class:HeterogeneousHeapRegionManager
expand_on_preferred_node	heapRegionManager.cpp	/^uint HeapRegionManager::expand_on_preferred_node(uint preferred_index) {$/;"	f	class:HeapRegionManager
expand_single_region	g1CollectedHeap.cpp	/^bool G1CollectedHeap::expand_single_region(uint node_index) {$/;"	f	class:G1CollectedHeap
failure_used	g1EvacStats.hpp	/^  size_t failure_used() const { return _failure_used; }$/;"	f	class:G1EvacStats
failure_waste	g1EvacStats.hpp	/^  size_t failure_waste() const { return _failure_waste; }$/;"	f	class:G1EvacStats
failures	g1FullGCOopClosures.hpp	/^  bool failures() { return _failures; }$/;"	f	class:G1VerifyOopClosure
failures	g1HeapVerifier.cpp	/^  bool failures() const { return _failures; }$/;"	f	class:G1CheckRegionAttrTableClosure
failures	g1HeapVerifier.cpp	/^  bool failures() { return _failures; }$/;"	f	class:G1VerifyBitmapClosure
failures	g1HeapVerifier.cpp	/^  bool failures() { return _failures; }$/;"	f	class:G1VerifyCodeRootOopClosure
failures	g1HeapVerifier.cpp	/^  bool failures() { return _failures; }$/;"	f	class:VerifyRootsClosure
failures	g1HeapVerifier.cpp	/^  bool failures() {$/;"	f	class:G1ParVerifyTask
failures	g1HeapVerifier.cpp	/^  bool failures() {$/;"	f	class:VerifyRegionClosure
failures	heapRegion.cpp	/^  bool failures()           { return _failures; }$/;"	f	class:VerifyStrongCodeRootOopClosure
failures	heapRegion.cpp	/^  bool failures()       { return _failures; }$/;"	f	class:VerifyStrongCodeRootCodeBlobClosure
failures	heapRegion.cpp	/^  bool failures() { return _failures; }$/;"	f	class:G1VerificationClosure
fast_reclaim_humongous_candidates	g1GCPhaseTimes.hpp	/^  size_t fast_reclaim_humongous_candidates() const {$/;"	f	class:G1GCPhaseTimes
fast_reclaim_humongous_time_ms	g1GCPhaseTimes.hpp	/^  double fast_reclaim_humongous_time_ms() {$/;"	f	class:G1GCPhaseTimes
fill_archive_regions	g1CollectedHeap.cpp	/^void G1CollectedHeap::fill_archive_regions(MemRegion* ranges, size_t count) {$/;"	f	class:G1CollectedHeap
fill_in_last_surv_rates	g1SurvRateGroup.cpp	/^void G1SurvRateGroup::fill_in_last_surv_rates() {$/;"	f	class:G1SurvRateGroup
fill_up_remaining_space	g1AllocRegion.cpp	/^size_t G1AllocRegion::fill_up_remaining_space(HeapRegion* alloc_region) {$/;"	f	class:G1AllocRegion
filter	g1SATBMarkQueueSet.cpp	/^void G1SATBMarkQueueSet::filter(SATBMarkQueue* queue) {$/;"	f	class:G1SATBMarkQueueSet
finalize_incremental_building	g1CollectionSet.cpp	/^void G1CollectionSet::finalize_incremental_building() {$/;"	f	class:G1CollectionSet
finalize_initial_collection_set	g1CollectionSet.cpp	/^void G1CollectionSet::finalize_initial_collection_set(double target_pause_time_ms, G1SurvivorRegions* survivor) {$/;"	f	class:G1CollectionSet
finalize_marking	g1ConcurrentMark.cpp	/^void G1ConcurrentMark::finalize_marking() {$/;"	f	class:G1ConcurrentMark
finalize_old_part	g1CollectionSet.cpp	/^void G1CollectionSet::finalize_old_part(double time_remaining_ms) {$/;"	f	class:G1CollectionSet
finalize_optional_for_evacuation	g1CollectionSet.cpp	/^bool G1CollectionSet::finalize_optional_for_evacuation(double remaining_pause_time) {$/;"	f	class:G1CollectionSet
finalize_predictions	g1SurvRateGroup.cpp	/^void G1SurvRateGroup::finalize_predictions(const G1Predictions& predictor) {$/;"	f	class:G1SurvRateGroup
finalize_young_part	g1CollectionSet.cpp	/^double G1CollectionSet::finalize_young_part(double target_pause_time_ms, G1SurvivorRegions* survivors) {$/;"	f	class:G1CollectionSet
find_contiguous	heterogeneousHeapRegionManager.cpp	/^uint HeterogeneousHeapRegionManager::find_contiguous(size_t start, size_t end, size_t num, bool empty_only) {$/;"	f	class:HeterogeneousHeapRegionManager
find_contiguous_allow_expand	heapRegionManager.cpp	/^uint HeapRegionManager::find_contiguous_allow_expand(uint num_regions) {$/;"	f	class:HeapRegionManager
find_contiguous_in_free_list	heapRegionManager.cpp	/^uint HeapRegionManager::find_contiguous_in_free_list(uint num_regions) {$/;"	f	class:HeapRegionManager
find_contiguous_in_range	heapRegionManager.cpp	/^uint HeapRegionManager::find_contiguous_in_range(uint start, uint end, uint num_regions) {$/;"	f	class:HeapRegionManager
find_empty_from_idx_reverse	heapRegionManager.cpp	/^uint HeapRegionManager::find_empty_from_idx_reverse(uint start_idx, uint* res_idx) const {$/;"	f	class:HeapRegionManager
find_empty_in_range_reverse	heterogeneousHeapRegionManager.cpp	/^uint HeterogeneousHeapRegionManager::find_empty_in_range_reverse(uint start_idx, uint end_idx, uint* res_idx) {$/;"	f	class:HeterogeneousHeapRegionManager
find_for_add	g1RegionMarkStatsCache.inline.hpp	/^inline G1RegionMarkStatsCache::G1RegionMarkStatsCacheEntry* G1RegionMarkStatsCache::find_for_add(uint region_idx) {$/;"	f	class:G1RegionMarkStatsCache
find_highest_free	heapRegionManager.cpp	/^uint HeapRegionManager::find_highest_free(bool* expanded) {$/;"	f	class:HeapRegionManager
find_highest_free	heterogeneousHeapRegionManager.cpp	/^uint HeterogeneousHeapRegionManager::find_highest_free(bool* expanded) {$/;"	f	class:HeterogeneousHeapRegionManager
find_next_dirty	g1RemSet.cpp	/^  size_t find_next_dirty() {$/;"	f	class:G1CardTableScanner
find_next_non_dirty	g1RemSet.cpp	/^  size_t find_next_non_dirty() {$/;"	f	class:G1CardTableScanner
find_region_table	heapRegionRemSet.cpp	/^OtherRegionsTable::find_region_table(size_t ind, HeapRegion* hr) const {$/;"	f	class:OtherRegionsTable
find_unavailable_from_idx	heapRegionManager.cpp	/^HeapRegionRange HeapRegionManager::find_unavailable_from_idx(uint index) const {$/;"	f	class:HeapRegionManager
find_unavailable_in_range	heterogeneousHeapRegionManager.cpp	/^uint HeterogeneousHeapRegionManager::find_unavailable_in_range(uint start_idx, uint end_idx, uint* res_idx) const {$/;"	f	class:HeterogeneousHeapRegionManager
finger	g1ConcurrentMark.hpp	/^  HeapWord*           finger()       { return _finger;   }$/;"	f	class:G1ConcurrentMark
finger	g1ConcurrentMark.hpp	/^  HeapWord* finger()            { return _finger; }$/;"	f	class:G1CMTask
fire_on_commit	g1RegionToSpaceMapper.cpp	/^void G1RegionToSpaceMapper::fire_on_commit(uint start_idx, size_t num_regions, bool zero_filled) {$/;"	f	class:G1RegionToSpaceMapper
fl_mem_size	heapRegionRemSet.cpp	/^size_t OtherRegionsTable::fl_mem_size() {$/;"	f	class:OtherRegionsTable
fl_mem_size	heapRegionRemSet.hpp	/^  static size_t fl_mem_size() {$/;"	f	class:HeapRegionRemSet
fl_mem_size	heapRegionRemSet.hpp	/^  static size_t fl_mem_size() {$/;"	f	class:PerRegionTable
flush	g1DirtyCardQueue.cpp	/^void G1DirtyCardQueue::flush() {$/;"	f	class:G1DirtyCardQueue
flush	g1ParScanThreadState.cpp	/^size_t G1ParScanThreadState::flush(size_t* surviving_young_words) {$/;"	f	class:G1ParScanThreadState
flush	g1ParScanThreadState.cpp	/^void G1ParScanThreadStateSet::flush() {$/;"	f	class:G1ParScanThreadStateSet
flush	g1RedirtyCardsQueue.cpp	/^void G1RedirtyCardsQueue::flush() {$/;"	f	class:G1RedirtyCardsQueue
flush	g1RedirtyCardsQueue.cpp	/^void G1RedirtyCardsQueueBase::LocalQSet::flush() {$/;"	f	class:G1RedirtyCardsQueueBase::LocalQSet
flush	g1SharedDirtyCardQueue.cpp	/^void G1SharedDirtyCardQueue::flush() {$/;"	f	class:G1SharedDirtyCardQueue
flush_all_task_caches	g1ConcurrentMark.cpp	/^void G1ConcurrentMark::flush_all_task_caches() {$/;"	f	class:G1ConcurrentMark
flush_and_retire_stats	g1Allocator.cpp	/^void G1PLABAllocator::flush_and_retire_stats() {$/;"	f	class:G1PLABAllocator
flush_mark_stats_cache	g1ConcurrentMark.cpp	/^Pair<size_t, size_t> G1CMTask::flush_mark_stats_cache() {$/;"	f	class:G1CMTask
flush_nmethod	g1CollectedHeap.hpp	/^  virtual void flush_nmethod(nmethod* nm) {}$/;"	f	class:G1CollectedHeap
flush_numa_stats	g1ParScanThreadState.cpp	/^void G1ParScanThreadState::flush_numa_stats() {$/;"	f	class:G1ParScanThreadState
follow_array	g1FullGCMarker.inline.hpp	/^inline void G1FullGCMarker::follow_array(objArrayOop array) {$/;"	f	class:G1FullGCMarker
follow_array_chunk	g1FullGCMarker.inline.hpp	/^void G1FullGCMarker::follow_array_chunk(objArrayOop array, int index) {$/;"	f	class:G1FullGCMarker
follow_cld	g1FullGCMarker.inline.hpp	/^inline void G1FullGCMarker::follow_cld(ClassLoaderData* cld) {$/;"	f	class:G1FullGCMarker
follow_klass	g1FullGCMarker.inline.hpp	/^inline void G1FullGCMarker::follow_klass(Klass* k) {$/;"	f	class:G1FullGCMarker
follow_object	g1FullGCMarker.inline.hpp	/^inline void G1FullGCMarker::follow_object(oop obj) {$/;"	f	class:G1FullGCMarker
force_concurrent_start_if_outside_cycle	g1Policy.cpp	/^bool G1Policy::force_concurrent_start_if_outside_cycle(GCCause::Cause gc_cause) {$/;"	f	class:G1Policy
force_upgrade_to_full	g1HeterogeneousHeapPolicy.cpp	/^bool G1HeterogeneousHeapPolicy::force_upgrade_to_full() {$/;"	f	class:G1HeterogeneousHeapPolicy
force_upgrade_to_full	g1Policy.hpp	/^  virtual bool force_upgrade_to_full() {$/;"	f	class:G1Policy
forward	g1FullGCCompactionPoint.cpp	/^void G1FullGCCompactionPoint::forward(oop object, size_t size) {$/;"	f	class:G1FullGCCompactionPoint
forward_to_block_containing_addr	g1BlockOffsetTable.inline.hpp	/^inline HeapWord* G1BlockOffsetTablePart::forward_to_block_containing_addr(HeapWord* q,$/;"	f	class:G1BlockOffsetTablePart
forward_to_block_containing_addr_const	g1BlockOffsetTable.inline.hpp	/^inline HeapWord* G1BlockOffsetTablePart::forward_to_block_containing_addr_const(HeapWord* q, HeapWord* n,$/;"	f	class:G1BlockOffsetTablePart
forward_to_block_containing_addr_slow	g1BlockOffsetTable.cpp	/^HeapWord* G1BlockOffsetTablePart::forward_to_block_containing_addr_slow(HeapWord* q,$/;"	f	class:G1BlockOffsetTablePart
found	sparsePRT.hpp	/^    found,    \/\/ The card is already in the PRT.$/;"	e	enum:SparsePRT::AddCardResult
free	heapRegion.hpp	/^  size_t free() const { return byte_size(top(), end()); }$/;"	f	class:HeapRegion
free	heapRegionRemSet.hpp	/^  static void free(PerRegionTable* prt) {$/;"	f	class:PerRegionTable
free_collection_set	g1CollectedHeap.cpp	/^void G1CollectedHeap::free_collection_set(G1CollectionSet* collection_set, G1EvacuationInfo& evacuation_info, const size_t* surviving_young_words) {$/;"	f	class:G1CollectedHeap
free_entry	sparsePRT.cpp	/^void RSHashTable::free_entry(int fi) {$/;"	f	class:RSHashTable
free_humongous_region	g1CollectedHeap.cpp	/^void G1CollectedHeap::free_humongous_region(HeapRegion* hr,$/;"	f	class:G1CollectedHeap
free_humongous_region	g1FullGCPrepareTask.cpp	/^void G1FullGCPrepareTask::G1CalculatePointersClosure::free_humongous_region(HeapRegion* hr) {$/;"	f	class:G1FullGCPrepareTask::G1CalculatePointersClosure
free_list_dram_length	heterogeneousHeapRegionManager.cpp	/^uint HeterogeneousHeapRegionManager::free_list_dram_length() const {$/;"	f	class:HeterogeneousHeapRegionManager
free_list_nvdimm_length	heterogeneousHeapRegionManager.cpp	/^uint HeterogeneousHeapRegionManager::free_list_nvdimm_length() const {$/;"	f	class:HeterogeneousHeapRegionManager
free_optional_regions	g1CollectionSet.cpp	/^void G1CollectionSet::free_optional_regions() {$/;"	f	class:G1CollectionSet
free_region	g1CollectedHeap.cpp	/^void G1CollectedHeap::free_region(HeapRegion* hr, FreeRegionList* free_list) {$/;"	f	class:G1CollectedHeap
freed_bytes	g1ConcurrentMark.cpp	/^    size_t freed_bytes() { return _freed_bytes; }$/;"	f	class:G1ReclaimEmptyRegionsTask::G1ReclaimEmptyRegionsClosure
freed_regions	g1FullGCPrepareTask.cpp	/^bool G1FullGCPrepareTask::G1CalculatePointersClosure::freed_regions() {$/;"	f	class:G1FullGCPrepareTask::G1CalculatePointersClosure
from_oop	g1ConcurrentMark.hpp	/^  static G1TaskQueueEntry from_oop(oop obj) { return G1TaskQueueEntry(obj); }$/;"	f	class:G1TaskQueueEntry
from_slice	g1ConcurrentMark.hpp	/^  static G1TaskQueueEntry from_slice(HeapWord* what) { return G1TaskQueueEntry(what); }$/;"	f	class:G1TaskQueueEntry
full_collection_resize_amount	g1HeapSizingPolicy.cpp	/^size_t G1HeapSizingPolicy::full_collection_resize_amount(bool& expand) {$/;"	f	class:G1HeapSizingPolicy
g1_barrier_set	g1BarrierSet.hpp	/^  static G1BarrierSet* g1_barrier_set() {$/;"	f	class:G1BarrierSet
g1_can_remove_post_barrier	c2/g1BarrierSetC2.cpp	/^bool G1BarrierSetC2::g1_can_remove_post_barrier(GraphKit* kit,$/;"	f	class:G1BarrierSetC2
g1_can_remove_pre_barrier	c2/g1BarrierSetC2.cpp	/^bool G1BarrierSetC2::g1_can_remove_pre_barrier(GraphKit* kit,$/;"	f	class:G1BarrierSetC2
g1_card_already_scanned	g1CardTable.hpp	/^    g1_card_already_scanned = 0x1$/;"	e	enum:G1CardTable::G1CardValues
g1_mark_as_young	g1CardTable.cpp	/^void G1CardTable::g1_mark_as_young(const MemRegion& mr) {$/;"	f	class:G1CardTable
g1_mark_card	c2/g1BarrierSetC2.cpp	/^void G1BarrierSetC2::g1_mark_card(GraphKit* kit,$/;"	f	class:G1BarrierSetC2
g1_young_card_val	g1CardTable.hpp	/^  static CardValue g1_young_card_val() { return g1_young_gen; }$/;"	f	class:G1CardTable
g1_young_gen	g1CardTable.hpp	/^    g1_young_gen = CT_MR_BS_last_reserved << 1,$/;"	e	enum:G1CardTable::G1CardValues
g1mm	g1CollectedHeap.hpp	/^  G1MonitoringSupport* g1mm() {$/;"	f	class:G1CollectedHeap
garbage_bytes	heapRegion.hpp	/^  size_t garbage_bytes() {$/;"	f	class:HeapRegion
gc_counter_less_than	g1CollectedHeap.cpp	/^static bool gc_counter_less_than(uint x, uint y) {$/;"	f	file:
gc_efficiency	heapRegion.hpp	/^  double gc_efficiency() const { return _gc_efficiency;}$/;"	f	class:HeapRegion
gc_epilogue	g1CollectedHeap.cpp	/^void G1CollectedHeap::gc_epilogue(bool full) {$/;"	f	class:G1CollectedHeap
gc_prologue	g1CollectedHeap.cpp	/^void G1CollectedHeap::gc_prologue(bool full) {$/;"	f	class:G1CollectedHeap
gc_succeeded	g1VMOperations.hpp	/^  bool gc_succeeded() const { return _gc_succeeded; }$/;"	f	class:VM_G1CollectForAllocation
gc_succeeded	g1VMOperations.hpp	/^  bool gc_succeeded() const { return _gc_succeeded; }$/;"	f	class:VM_G1CollectFull
gc_succeeded	g1VMOperations.hpp	/^  bool gc_succeeded() const { return _gc_succeeded; }$/;"	f	class:VM_G1TryInitiateConcMark
gc_threads_do	g1CollectedHeap.cpp	/^void G1CollectedHeap::gc_threads_do(ThreadClosure* tc) const {$/;"	f	class:G1CollectedHeap
gc_timer_cm	g1ConcurrentMark.hpp	/^  ConcurrentGCTimer* gc_timer_cm() const { return _gc_timer_cm; }$/;"	f	class:G1ConcurrentMark
gc_tracer_cm	g1ConcurrentMark.hpp	/^  G1OldTracer* gc_tracer_cm() const { return _gc_tracer_cm; }$/;"	f	class:G1ConcurrentMark
gc_tracer_stw	g1CollectedHeap.hpp	/^  G1NewTracer* gc_tracer_stw() const { return _gc_tracer_stw; }$/;"	f	class:G1CollectedHeap
generate_c1_runtime_stubs	c1/g1BarrierSetC1.cpp	/^void G1BarrierSetC1::generate_c1_runtime_stubs(BufferBlob* buffer_blob) {$/;"	f	class:G1BarrierSetC1
generate_code	c1/g1BarrierSetC1.cpp	/^  virtual OopMapSet* generate_code(StubAssembler* sasm) {$/;"	f	class:C1G1PostBarrierCodeGenClosure	file:
generate_code	c1/g1BarrierSetC1.cpp	/^  virtual OopMapSet* generate_code(StubAssembler* sasm) {$/;"	f	class:C1G1PreBarrierCodeGenClosure	file:
get	g1AllocRegion.hpp	/^  HeapRegion* get() const {$/;"	f	class:G1AllocRegion
get	g1NUMAStats.cpp	/^size_t G1NUMAStats::NodeDataArray::get(uint req_index, uint alloc_index) {$/;"	f	class:G1NUMAStats::NodeDataArray
get	heapRegionType.hpp	/^  Tag get() const {$/;"	f	class:HeapRegionType
get_and_advance_pos	g1RemSet.cpp	/^  size_t get_and_advance_pos() {$/;"	f	class:G1CardTableScanner	file:
get_and_reset_refinement_stats	g1ConcurrentRefine.cpp	/^G1ConcurrentRefineStats G1ConcurrentRefine::get_and_reset_refinement_stats() {$/;"	f	class:G1ConcurrentRefine
get_and_reset_refinement_stats	g1DirtyCardQueue.cpp	/^G1ConcurrentRefineStats G1DirtyCardQueueSet::get_and_reset_refinement_stats() {$/;"	f	class:G1DirtyCardQueueSet
get_auxiliary_data_memory_usage	g1CollectedHeap.hpp	/^  MemoryUsage get_auxiliary_data_memory_usage() const {$/;"	f	class:G1CollectedHeap
get_auxiliary_data_memory_usage	heapRegionManager.cpp	/^MemoryUsage HeapRegionManager::get_auxiliary_data_memory_usage() const {$/;"	f	class:HeapRegionManager
get_by_address	g1BiasedArray.hpp	/^  T get_by_address(HeapWord* value) const {$/;"	f	class:G1BiasedMappedArray
get_by_index	g1BiasedArray.hpp	/^  T get_by_index(idx_t index) const {$/;"	f	class:G1BiasedMappedArray
get_chunks_per_region	g1RemSet.cpp	/^  static uint get_chunks_per_region(uint log_region_size) {$/;"	f	class:G1RemSetScanState	file:
get_cm_oop_closure_ref_processor	g1ConcurrentMark.cpp	/^static ReferenceProcessor* get_cm_oop_closure_ref_processor(G1CollectedHeap* g1h) {$/;"	f	file:
get_completed_buffer	g1DirtyCardQueue.cpp	/^BufferNode* G1DirtyCardQueueSet::get_completed_buffer() {$/;"	f	class:G1DirtyCardQueueSet
get_conc_mark_start_threshold	g1IHOPControl.cpp	/^size_t G1AdaptiveIHOPControl::get_conc_mark_start_threshold() {$/;"	f	class:G1AdaptiveIHOPControl
get_conc_mark_start_threshold	g1IHOPControl.hpp	/^  size_t get_conc_mark_start_threshold() {$/;"	f	class:G1StaticIHOPControl
get_description	g1CollectedHeap.cpp	/^  const char* get_description() { return "Archive Regions"; }$/;"	f	class:ArchiveRegionSetChecker
get_description	g1CollectedHeap.cpp	/^  const char* get_description() { return "Humongous Regions"; }$/;"	f	class:HumongousRegionSetChecker
get_description	g1CollectedHeap.cpp	/^  const char* get_description() { return "Old Regions"; }$/;"	f	class:OldRegionSetChecker
get_description	heapRegionManager.cpp	/^  const char* get_description() { return "Free Regions"; }$/;"	f	class:MasterFreeRegionListChecker
get_dummy_region	heapRegionManager.hpp	/^  virtual HeapRegion* get_dummy_region() { return new_heap_region(0); }$/;"	f	class:HeapRegionManager
get_dummy_region	heterogeneousHeapRegionManager.cpp	/^HeapRegion* HeterogeneousHeapRegionManager::get_dummy_region() {$/;"	f	class:HeterogeneousHeapRegionManager
get_entries_from_global_stack	g1ConcurrentMark.cpp	/^bool G1CMTask::get_entries_from_global_stack() {$/;"	f	class:G1CMTask
get_entry	sparsePRT.cpp	/^SparsePRTEntry* RSHashTable::get_entry(RegionIdx_t region_ind) const {$/;"	f	class:RSHashTable
get_entry	sparsePRT.cpp	/^SparsePRTEntry* SparsePRT::get_entry(RegionIdx_t region_id) {$/;"	f	class:SparsePRT
get_index_by_address	g1BiasedArray.hpp	/^  idx_t get_index_by_address(HeapWord* value) const {$/;"	f	class:G1BiasedMappedArray
get_memory_usage	g1MemoryPool.cpp	/^MemoryUsage G1EdenPool::get_memory_usage() {$/;"	f	class:G1EdenPool
get_memory_usage	g1MemoryPool.cpp	/^MemoryUsage G1OldGenPool::get_memory_usage() {$/;"	f	class:G1OldGenPool
get_memory_usage	g1MemoryPool.cpp	/^MemoryUsage G1SurvivorPool::get_memory_usage() {$/;"	f	class:G1SurvivorPool
get_next	heapRegionSet.hpp	/^  HeapRegion* get_next() {$/;"	f	class:FreeRegionListIterator
get_ref_by_index	g1BiasedArray.hpp	/^  T* get_ref_by_index(uintptr_t index) const {$/;"	f	class:G1BiasedMappedArray
get_short_state_str	heapRegionRemSet.hpp	/^  const char* get_short_state_str() const { return _short_state_strings[_state]; }$/;"	f	class:HeapRegionRemSet
get_short_str	heapRegionType.cpp	/^const char* HeapRegionType::get_short_str() const {$/;"	f	class:HeapRegionType
get_short_type_str	heapRegion.hpp	/^  const char* get_short_type_str() const { return _type.get_short_str(); }$/;"	f	class:HeapRegion
get_sorted_candidates	g1CollectionSetChooser.cpp	/^  G1CollectionSetCandidates* get_sorted_candidates() {$/;"	f	class:G1BuildCandidateRegionsTask
get_state_str	heapRegionRemSet.hpp	/^  const char* get_state_str() const { return _state_strings[_state]; }$/;"	f	class:HeapRegionRemSet
get_str	heapRegionType.cpp	/^const char* HeapRegionType::get_str() const {$/;"	f	class:HeapRegionType
get_thread_work_item	g1GCPhaseTimes.cpp	/^size_t G1GCPhaseTimes::get_thread_work_item(GCParPhases phase, uint worker_id, uint index) {$/;"	f	class:G1GCPhaseTimes
get_time_secs	g1GCPhaseTimes.cpp	/^double G1GCPhaseTimes::get_time_secs(GCParPhases phase, uint worker_id) {$/;"	f	class:G1GCPhaseTimes
get_trace_type	heapRegion.hpp	/^  G1HeapRegionTraceType::Type get_trace_type() { return _type.get_trace_type(); }$/;"	f	class:HeapRegion
get_trace_type	heapRegionType.cpp	/^G1HeapRegionTraceType::Type HeapRegionType::get_trace_type() {$/;"	f	class:HeapRegionType
get_type_str	g1HeapRegionAttr.hpp	/^  const char* get_type_str() const {$/;"	f	struct:G1HeapRegionAttr
get_type_str	heapRegion.hpp	/^  const char* get_type_str() const { return _type.get_str(); }$/;"	f	class:HeapRegion
giveup_current_region	g1ConcurrentMark.cpp	/^void G1CMTask::giveup_current_region() {$/;"	f	class:G1CMTask
green_zone	g1ConcurrentRefine.hpp	/^  size_t green_zone() const      { return _green_zone;  }$/;"	f	class:G1ConcurrentRefine
guarantee_heap_region_set	heapRegionSet.hpp	37;"	d
handle_completed_buffer	g1DirtyCardQueue.cpp	/^void G1DirtyCardQueue::handle_completed_buffer() {$/;"	f	class:G1DirtyCardQueue
handle_completed_buffer	g1DirtyCardQueue.cpp	/^void G1DirtyCardQueueSet::handle_completed_buffer(BufferNode* new_node,$/;"	f	class:G1DirtyCardQueueSet
handle_completed_buffer	g1RedirtyCardsQueue.cpp	/^void G1RedirtyCardsQueue::handle_completed_buffer() {$/;"	f	class:G1RedirtyCardsQueue
handle_evacuated_region	g1CollectedHeap.cpp	/^    void handle_evacuated_region(HeapRegion* r) {$/;"	f	class:G1FreeCollectionSetTask::FreeCSetClosure	file:
handle_evacuation_failure	heapRegion.cpp	/^void HeapRegion::handle_evacuation_failure() {$/;"	f	class:HeapRegion
handle_evacuation_failure_par	g1ParScanThreadState.cpp	/^oop G1ParScanThreadState::handle_evacuation_failure_par(oop old, markWord m) {$/;"	f	class:G1ParScanThreadState
handle_failed_region	g1CollectedHeap.cpp	/^    void handle_failed_region(HeapRegion* r) {$/;"	f	class:G1FreeCollectionSetTask::FreeCSetClosure	file:
handle_non_cset_obj_common	g1OopClosures.inline.hpp	/^inline void G1ScanClosureBase::handle_non_cset_obj_common(G1HeapRegionAttr const region_attr, T* p, oop const obj) {$/;"	f	class:G1ScanClosureBase
handle_refined_buffer	g1DirtyCardQueue.cpp	/^void G1DirtyCardQueueSet::handle_refined_buffer(BufferNode* node,$/;"	f	class:G1DirtyCardQueueSet
handle_zero_index_for_thread	g1DirtyCardQueue.cpp	/^void G1DirtyCardQueueSet::handle_zero_index_for_thread(Thread* t) {$/;"	f	class:G1DirtyCardQueueSet
handle_zero_index_for_thread	g1SATBMarkQueueSet.cpp	/^void G1SATBMarkQueueSet::handle_zero_index_for_thread(Thread* t) {$/;"	f	class:G1SATBMarkQueueSet
has_aborted	g1ConcurrentMark.hpp	/^  bool has_aborted()            { return _has_aborted; }$/;"	f	class:G1CMTask
has_aborted	g1ConcurrentMark.hpp	/^  bool has_aborted()      { return _has_aborted; }$/;"	f	class:G1ConcurrentMark
has_borrowed_regions	heterogeneousHeapRegionManager.cpp	/^bool HeterogeneousHeapRegionManager::has_borrowed_regions() const {$/;"	f	class:HeterogeneousHeapRegionManager
has_cards_to_scan	g1RemSet.cpp	/^  bool has_cards_to_scan(uint region) {$/;"	f	class:G1RemSetScanState
has_count_table	g1CardCounts.hpp	/^  bool has_count_table() {$/;"	f	class:G1CardCounts
has_freed_regions	g1FullGCPrepareTask.cpp	/^bool G1FullGCPrepareTask::has_freed_regions() {$/;"	f	class:G1FullGCPrepareTask
has_holes	g1HeapVerifier.cpp	/^  bool has_holes() {return _has_holes;}$/;"	f	class:VerifyReadyForArchivingRegionClosure
has_humongous	g1HeapVerifier.cpp	/^  bool has_humongous() {return _has_humongous;}$/;"	f	class:VerifyReadyForArchivingRegionClosure
has_index_in_opt_cset	heapRegion.hpp	/^  bool has_index_in_opt_cset() const { return _index_in_opt_cset != InvalidCSetIndex; }$/;"	f	class:HeapRegion
has_more_regions	g1CollectedHeap.cpp	/^bool G1CollectedHeap::has_more_regions(G1HeapRegionAttr dest) {$/;"	f	class:G1CollectedHeap
has_mutator_alloc_region	g1Allocator.cpp	/^bool G1Allocator::has_mutator_alloc_region() {$/;"	f	class:G1Allocator
has_next	g1RemSet.cpp	/^      bool has_next() const {$/;"	f	class:G1RebuildRemSetTask::G1RebuildRemSetHeapRegionClosure::LiveObjIterator
has_next	g1RemSet.cpp	/^  bool has_next() {$/;"	f	class:G1CardTableChunkClaimer
has_next	sparsePRT.cpp	/^bool RSHashTableBucketIter::has_next(SparsePRTEntry*& entry) {$/;"	f	class:RSHashTableBucketIter
has_next	sparsePRT.hpp	/^  bool has_next(SparsePRTEntry*& entry) {$/;"	f	class:SparsePRTBucketIter
has_oops_in_region	heapRegion.cpp	/^  bool has_oops_in_region() { return _has_oops_in_region; }$/;"	f	class:VerifyStrongCodeRootOopClosure
has_overflown	g1ConcurrentMark.hpp	/^  bool has_overflown()           { return _has_overflown; }$/;"	f	class:G1ConcurrentMark
has_regions	g1FullGCCompactionPoint.cpp	/^bool G1FullGCCompactionPoint::has_regions() {$/;"	f	class:G1FullGCCompactionPoint
has_regions_left_for_allocation	g1CollectedHeap.hpp	/^  bool has_regions_left_for_allocation() const {$/;"	f	class:G1CollectedHeap
has_reserved_count_table	g1CardCounts.hpp	/^  bool has_reserved_count_table() { return _card_counts != NULL; }$/;"	f	class:G1CardCounts
has_result	g1ConcurrentStartToMixedTimeTracker.hpp	/^  bool has_result() const { return _mixed_start_time > 0.0 && _concurrent_start_end_time > 0.0; }$/;"	f	class:G1ConcurrentStartToMixedTimeTracker
has_surv_rate_group	heapRegion.inline.hpp	/^inline bool HeapRegion::has_surv_rate_group() const {$/;"	f	class:HeapRegion
has_unexpected_holes	g1HeapVerifier.cpp	/^  bool has_unexpected_holes() {return _has_unexpected_holes;}$/;"	f	class:VerifyReadyForArchivingRegionClosure
has_valid_age_in_surv_rate	heapRegion.inline.hpp	/^inline bool HeapRegion::has_valid_age_in_surv_rate() const {$/;"	f	class:HeapRegion
hash	g1RegionMarkStatsCache.hpp	/^  uint hash(uint idx) {$/;"	f	class:G1RegionMarkStatsCache
have_enough_data_for_prediction	g1IHOPControl.cpp	/^bool G1AdaptiveIHOPControl::have_enough_data_for_prediction() const {$/;"	f	class:G1AdaptiveIHOPControl
head_index	g1FreeIdSet.cpp	/^uint G1FreeIdSet::head_index(uintx head) const {$/;"	f	class:G1FreeIdSet
heap	g1CollectedHeap.hpp	/^  static G1CollectedHeap* heap() {$/;"	f	class:G1CollectedHeap
heap_bottom	heapRegionManager.hpp	/^  HeapWord* heap_bottom() const { return _regions.bottom_address_mapped(); }$/;"	f	class:HeapRegionManager
heap_end	heapRegionManager.hpp	/^  HeapWord* heap_end() const {return _regions.end_address_mapped(); }$/;"	f	class:HeapRegionManager
heap_locking_asserts_params	g1CollectedHeap.hpp	322;"	d
heap_map_factor	g1BlockOffsetTable.hpp	/^  static size_t heap_map_factor() {$/;"	f	class:G1BlockOffsetTable
heap_map_factor	g1CardCounts.cpp	/^size_t G1CardCounts::heap_map_factor() {$/;"	f	class:G1CardCounts
heap_map_factor	g1CardTable.hpp	/^  static size_t heap_map_factor() { return card_size; }$/;"	f	class:G1CardTable
heap_max_size_bytes	g1Arguments.cpp	/^size_t G1Arguments::heap_max_size_bytes() {$/;"	f	class:G1Arguments
heap_region_containing	g1CollectedHeap.inline.hpp	/^inline HeapRegion* G1CollectedHeap::heap_region_containing(const T addr) const {$/;"	f	class:G1CollectedHeap
heap_region_containing_or_null	g1CollectedHeap.inline.hpp	/^inline HeapRegion* G1CollectedHeap::heap_region_containing_or_null(const T addr) const {$/;"	f	class:G1CollectedHeap
heap_region_iterate	g1CollectedHeap.cpp	/^void G1CollectedHeap::heap_region_iterate(HeapRegionClosure* cl) const {$/;"	f	class:G1CollectedHeap
heap_region_par_iterate_from_start	g1CollectedHeap.cpp	/^void G1CollectedHeap::heap_region_par_iterate_from_start(HeapRegionClosure* cl,$/;"	f	class:G1CollectedHeap
heap_region_par_iterate_from_worker_offset	g1CollectedHeap.cpp	/^void G1CollectedHeap::heap_region_par_iterate_from_worker_offset(HeapRegionClosure* cl,$/;"	f	class:G1CollectedHeap
heap_reserved_size_bytes	g1Arguments.cpp	/^size_t G1Arguments::heap_reserved_size_bytes() {$/;"	f	class:G1Arguments
heap_size_changed	g1HeterogeneousHeapYoungGenSizer.cpp	/^void G1HeterogeneousHeapYoungGenSizer::heap_size_changed(uint new_number_of_heap_regions) {$/;"	f	class:G1HeterogeneousHeapYoungGenSizer
heap_size_changed	g1YoungGenSizer.cpp	/^void G1YoungGenSizer::heap_size_changed(uint new_number_of_heap_regions) {$/;"	f	class:G1YoungGenSizer
heap_transition	g1FullGCScope.cpp	/^G1HeapTransition* G1FullGCScope::heap_transition() {$/;"	f	class:G1FullGCScope
hits	g1RegionMarkStatsCache.hpp	/^  size_t hits() const { return _cache_hits; }$/;"	f	class:G1RegionMarkStatsCache
hot_card_cache	g1CollectedHeap.hpp	/^  G1HotCardCache* hot_card_cache() const { return _hot_card_cache; }$/;"	f	class:G1CollectedHeap
hr	heapRegionRemSet.hpp	/^  HeapRegion* hr() const { return Atomic::load_acquire(&_hr); }$/;"	f	class:PerRegionTable
hr_clear	heapRegion.cpp	/^void HeapRegion::hr_clear(bool clear_space) {$/;"	f	class:HeapRegion
hr_printer	g1CollectedHeap.hpp	/^  G1HRPrinter* hr_printer() { return &_hr_printer; }$/;"	f	class:G1CollectedHeap
hrm	g1CollectedHeap.hpp	/^  HeapRegionManager* hrm() const { return _hrm; }$/;"	f	class:G1CollectedHeap
hrm_index	heapRegion.hpp	/^  uint hrm_index() const { return _hrm_index; }$/;"	f	class:HeapRegion
hrt_assert_is_valid	heapRegionType.hpp	30;"	d
humongous_candidates	g1CollectedHeap.cpp	/^  size_t humongous_candidates() {$/;"	f	class:G1PrepareEvacuationTask
humongous_obj_allocate	g1CollectedHeap.cpp	/^HeapWord* G1CollectedHeap::humongous_obj_allocate(size_t word_size) {$/;"	f	class:G1CollectedHeap
humongous_obj_allocate_initialize_regions	g1CollectedHeap.cpp	/^G1CollectedHeap::humongous_obj_allocate_initialize_regions(HeapRegion* first_hr,$/;"	f	class:G1CollectedHeap
humongous_obj_size_in_regions	g1CollectedHeap.cpp	/^size_t G1CollectedHeap::humongous_obj_size_in_regions(size_t word_size) {$/;"	f	class:G1CollectedHeap
humongous_object_eagerly_reclaimed	g1ConcurrentMark.cpp	/^void G1ConcurrentMark::humongous_object_eagerly_reclaimed(HeapRegion* r) {$/;"	f	class:G1ConcurrentMark
humongous_objects_reclaimed	g1CollectedHeap.cpp	/^  uint humongous_objects_reclaimed() {$/;"	f	class:G1FreeHumongousRegionClosure
humongous_region_is_candidate	g1CollectedHeap.cpp	/^    bool humongous_region_is_candidate(HeapRegion* region) const {$/;"	f	class:G1PrepareEvacuationTask::G1PrepareRegionsClosure	file:
humongous_regions_count	g1CollectedHeap.hpp	/^  uint humongous_regions_count() const { return _humongous_set.length(); }$/;"	f	class:G1CollectedHeap
humongous_regions_reclaimed	g1CollectedHeap.cpp	/^  uint humongous_regions_reclaimed() {$/;"	f	class:G1FreeHumongousRegionClosure
humongous_regions_removed	g1ConcurrentMark.cpp	/^    const uint humongous_regions_removed() { return _humongous_regions_removed; }$/;"	f	class:G1ReclaimEmptyRegionsTask::G1ReclaimEmptyRegionsClosure
humongous_start_region	heapRegion.hpp	/^  HeapRegion* humongous_start_region() const {$/;"	f	class:HeapRegion
humongous_threshold_for	g1CollectedHeap.hpp	/^  static size_t humongous_threshold_for(size_t region_size) {$/;"	f	class:G1CollectedHeap
humongous_total	g1CollectedHeap.cpp	/^  size_t humongous_total() {$/;"	f	class:G1PrepareEvacuationTask
idle	g1ConcurrentMarkThread.hpp	/^  bool idle()              { return _state == Idle; }$/;"	f	class:G1ConcurrentMarkThread
idx_t	g1BiasedArray.hpp	/^  typedef G1BiasedMappedArrayBase::idx_t idx_t;$/;"	t	class:G1BiasedMappedArray
idx_t	g1BiasedArray.hpp	/^  typedef size_t idx_t;$/;"	t	class:G1BiasedMappedArrayBase
in_closed_archive_range	g1Allocator.inline.hpp	/^inline bool G1ArchiveAllocator::in_closed_archive_range(oop object) {$/;"	f	class:G1ArchiveAllocator
in_collection_set	heapRegion.inline.hpp	/^inline bool HeapRegion::in_collection_set() const {$/;"	f	class:HeapRegion
in_concurrent_start_gc	g1CollectorState.hpp	/^  bool in_concurrent_start_gc() const { return _in_concurrent_start_gc; }$/;"	f	class:G1CollectorState
in_full_gc	g1CollectorState.hpp	/^  bool in_full_gc() const { return _in_full_gc; }$/;"	f	class:G1CollectorState
in_mixed_phase	g1CollectorState.hpp	/^  bool in_mixed_phase() const { return !in_young_only_phase() && !_in_full_gc; }$/;"	f	class:G1CollectorState
in_open_archive_range	g1Allocator.inline.hpp	/^inline bool G1ArchiveAllocator::in_open_archive_range(oop object) {$/;"	f	class:G1ArchiveAllocator
in_progress	g1ConcurrentMarkThread.hpp	/^  bool in_progress()       { return _state == InProgress; }$/;"	f	class:G1ConcurrentMarkThread
in_young_gc_before_mixed	g1CollectorState.hpp	/^  bool in_young_gc_before_mixed() const { return _in_young_gc_before_mixed; }$/;"	f	class:G1CollectorState
in_young_only_phase	g1CollectorState.hpp	/^  bool in_young_only_phase() const { return _in_young_only_phase && !_in_full_gc; }$/;"	f	class:G1CollectorState
inc_dirtied_cards	g1ConcurrentRefineStats.hpp	/^  void inc_dirtied_cards(size_t cards) { _dirtied_cards += cards; }$/;"	f	class:G1ConcurrentRefineStats
inc_external_accounted_time_ms	g1GCPhaseTimes.hpp	/^  void inc_external_accounted_time_ms(double time_ms) {$/;"	f	class:G1GCPhaseTimes
inc_precleaned_cards	g1ConcurrentRefineStats.hpp	/^  void inc_precleaned_cards(size_t cards) { _precleaned_cards += cards; }$/;"	f	class:G1ConcurrentRefineStats
inc_refined_cards	g1ConcurrentRefineStats.hpp	/^  void inc_refined_cards(size_t cards) { _refined_cards += cards; }$/;"	f	class:G1ConcurrentRefineStats
inc_refinement_time	g1ConcurrentRefineStats.hpp	/^  void inc_refinement_time(Tickspan t) { _refinement_time += t; }$/;"	f	class:G1ConcurrentRefineStats
increase	g1NUMAStats.cpp	/^void G1NUMAStats::NodeDataArray::increase(uint req_index, uint alloc_index) {$/;"	f	class:G1NUMAStats::NodeDataArray
increase_length	heapRegionSet.inline.hpp	/^inline void FreeRegionList::NodeInfo::increase_length(uint node_index) {$/;"	f	class:FreeRegionList::NodeInfo
increase_length	heapRegionSet.inline.hpp	/^inline void FreeRegionList::increase_length(uint node_index) {$/;"	f	class:FreeRegionList
increase_used	g1CollectedHeap.cpp	/^void G1CollectedHeap::increase_used(size_t bytes) {$/;"	f	class:G1CollectedHeap
increment_collectionset_used_after	g1EvacuationInfo.hpp	/^  void increment_collectionset_used_after(size_t used) {$/;"	f	class:G1EvacuationInfo
increment_length	g1CollectionSet.hpp	/^  size_t increment_length() const { return _collection_set_cur_length - _inc_part_start; }$/;"	f	class:G1CollectionSet
increment_old_marking_cycles_completed	g1CollectedHeap.cpp	/^void G1CollectedHeap::increment_old_marking_cycles_completed(bool concurrent,$/;"	f	class:G1CollectedHeap
increment_old_marking_cycles_started	g1CollectedHeap.cpp	/^void G1CollectedHeap::increment_old_marking_cycles_started() {$/;"	f	class:G1CollectedHeap
increment_refs_reached	g1ConcurrentMark.hpp	/^  void increment_refs_reached() { ++_refs_reached; }$/;"	f	class:G1CMTask
indent	g1GCPhaseTimes.cpp	/^static const char* indent(uint level) {$/;"	f	file:
index_for	g1BlockOffsetTable.inline.hpp	/^inline size_t G1BlockOffsetTable::index_for(const void* p) const {$/;"	f	class:G1BlockOffsetTable
index_for_cardvalue	g1CardTable.hpp	/^  size_t index_for_cardvalue(CardValue const* p) const {$/;"	f	class:G1CardTable
index_for_raw	g1BlockOffsetTable.inline.hpp	/^inline size_t G1BlockOffsetTable::index_for_raw(const void* p) const {$/;"	f	class:G1BlockOffsetTable
index_for_region	g1NUMA.cpp	/^uint G1NUMA::index_for_region(HeapRegion* hr) const {$/;"	f	class:G1NUMA
index_in_opt_cset	heapRegion.hpp	/^  uint index_in_opt_cset() const {$/;"	f	class:HeapRegion
index_of_address	g1NUMA.cpp	/^uint G1NUMA::index_of_address(HeapWord *address) const {$/;"	f	class:G1NUMA
index_of_current_thread	g1NUMA.cpp	/^uint G1NUMA::index_of_current_thread() const {$/;"	f	class:G1NUMA
index_of_node_id	g1NUMA.cpp	/^uint G1NUMA::index_of_node_id(int node_id) const {$/;"	f	class:G1NUMA
info	c1/g1BarrierSetC1.hpp	/^  CodeEmitInfo* info() const { return _info; }$/;"	f	class:G1PreBarrierStub
info_time	g1GCPhaseTimes.cpp	/^void G1GCPhaseTimes::info_time(const char* name, double value) const {$/;"	f	class:G1GCPhaseTimes
init	g1AllocRegion.cpp	/^void G1AllocRegion::init() {$/;"	f	class:G1AllocRegion
init	g1AllocRegion.cpp	/^void MutatorAllocRegion::init() {$/;"	f	class:MutatorAllocRegion
init	g1HeterogeneousHeapPolicy.cpp	/^void G1HeterogeneousHeapPolicy::init(G1CollectedHeap* g1h, G1CollectionSet* collection_set) {$/;"	f	class:G1HeterogeneousHeapPolicy
init	g1Policy.cpp	/^void G1Policy::init(G1CollectedHeap* g1h, G1CollectionSet* collection_set) {$/;"	f	class:G1Policy
init	heapRegionRemSet.inline.hpp	/^inline void PerRegionTable::init(HeapRegion* hr, bool clear_links_to_all_list) {$/;"	f	class:PerRegionTable
init	sparsePRT.cpp	/^void SparsePRTEntry::init(RegionIdx_t region_ind) {$/;"	f	class:SparsePRTEntry
init_gc_alloc_regions	g1Allocator.cpp	/^void G1Allocator::init_gc_alloc_regions(G1EvacuationInfo& evacuation_info) {$/;"	f	class:G1Allocator
init_hash_seed	g1ConcurrentMark.hpp	/^    init_hash_seed                = 17$/;"	e	enum:G1CMTask::PrivateConstants
init_mutator_alloc_regions	g1Allocator.cpp	/^void G1Allocator::init_mutator_alloc_regions() {$/;"	f	class:G1Allocator
init_region_lengths	g1CollectionSet.cpp	/^void G1CollectionSet::init_region_lengths(uint eden_cset_region_length,$/;"	f	class:G1CollectionSet
init_top_at_mark_start	heapRegion.hpp	/^  void init_top_at_mark_start() {$/;"	f	class:HeapRegion
initialize	g1Arguments.cpp	/^void G1Arguments::initialize() {$/;"	f	class:G1Arguments
initialize	g1BiasedArray.hpp	/^  void initialize(HeapWord* bottom, HeapWord* end, size_t target_elem_size_in_bytes, size_t mapping_granularity_in_bytes) {$/;"	f	class:G1BiasedMappedArrayBase
initialize	g1BiasedArray.hpp	/^  void initialize(MemRegion region, size_t mapping_granularity) {$/;"	f	class:G1BiasedMappedArray
initialize	g1CardCounts.cpp	/^void G1CardCounts::initialize(G1RegionToSpaceMapper* mapper) {$/;"	f	class:G1CardCounts
initialize	g1CardTable.cpp	/^void G1CardTable::initialize(G1RegionToSpaceMapper* mapper) {$/;"	f	class:G1CardTable
initialize	g1CardTable.hpp	/^  void initialize() {}$/;"	f	class:G1CardTable
initialize	g1CollectedHeap.cpp	/^jint G1CollectedHeap::initialize() {$/;"	f	class:G1CollectedHeap
initialize	g1CollectionSet.cpp	/^void G1CollectionSet::initialize(uint max_region_length) {$/;"	f	class:G1CollectionSet
initialize	g1ConcurrentMark.cpp	/^bool G1CMMarkStack::initialize(size_t initial_capacity, size_t max_capacity) {$/;"	f	class:G1CMMarkStack
initialize	g1ConcurrentMarkBitMap.cpp	/^void G1CMBitMap::initialize(MemRegion heap, G1RegionToSpaceMapper* storage) {$/;"	f	class:G1CMBitMap
initialize	g1ConcurrentRefine.cpp	/^jint G1ConcurrentRefine::initialize() {$/;"	f	class:G1ConcurrentRefine
initialize	g1ConcurrentRefine.cpp	/^jint G1ConcurrentRefineThreadControl::initialize(G1ConcurrentRefine* cr, uint num_max_threads) {$/;"	f	class:G1ConcurrentRefineThreadControl
initialize	g1FromCardCache.cpp	/^void G1FromCardCache::initialize(uint num_par_rem_sets, uint max_num_regions) {$/;"	f	class:G1FromCardCache
initialize	g1FullGCCompactionPoint.cpp	/^void G1FullGCCompactionPoint::initialize(HeapRegion* hr, bool init_threshold) {$/;"	f	class:G1FullGCCompactionPoint
initialize	g1HotCardCache.cpp	/^void G1HotCardCache::initialize(G1RegionToSpaceMapper* card_counts_storage) {$/;"	f	class:G1HotCardCache
initialize	g1NUMA.cpp	/^void G1NUMA::initialize(bool use_numa) {$/;"	f	class:G1NUMA
initialize	g1RegionToSpaceMapper.cpp	/^bool G1RegionToHeteroSpaceMapper::initialize() {$/;"	f	class:G1RegionToHeteroSpaceMapper
initialize	g1RemSet.cpp	/^  void initialize(size_t max_regions) {$/;"	f	class:G1RemSetScanState
initialize	g1RemSet.cpp	/^void G1RemSet::initialize(uint max_regions) {$/;"	f	class:G1RemSet
initialize	g1StringDedup.cpp	/^void G1StringDedup::initialize() {$/;"	f	class:G1StringDedup
initialize	g1Trace.cpp	/^void G1NewTracer::initialize() {$/;"	f	class:G1NewTracer
initialize	heapRegion.cpp	/^void HeapRegion::initialize(bool clear_space, bool mangle_space) {$/;"	f	class:HeapRegion
initialize	heapRegionManager.cpp	/^void HeapRegionManager::initialize(G1RegionToSpaceMapper* heap_storage,$/;"	f	class:HeapRegionManager
initialize	heterogeneousHeapRegionManager.cpp	/^void HeterogeneousHeapRegionManager::initialize(G1RegionToSpaceMapper* heap_storage,$/;"	f	class:HeterogeneousHeapRegionManager
initialize_alignments	g1Arguments.cpp	/^void G1Arguments::initialize_alignments() {$/;"	f	class:G1Arguments
initialize_base	g1BiasedArray.hpp	/^  void initialize_base(address base, size_t length, size_t bias, size_t elem_size, uint shift_by) {$/;"	f	class:G1BiasedMappedArrayBase
initialize_concurrent_refinement	g1CollectedHeap.cpp	/^jint G1CollectedHeap::initialize_concurrent_refinement() {$/;"	f	class:G1CollectedHeap
initialize_heap_flags_and_sizes	g1Arguments.cpp	/^void G1Arguments::initialize_heap_flags_and_sizes() {$/;"	f	class:G1Arguments
initialize_heterogeneous	g1Arguments.cpp	/^void G1Arguments::initialize_heterogeneous() {$/;"	f	class:G1Arguments
initialize_mark_stack_size	g1Arguments.cpp	/^void G1Arguments::initialize_mark_stack_size() {$/;"	f	class:G1Arguments
initialize_numa_stats	g1ParScanThreadState.cpp	/^void G1ParScanThreadState::initialize_numa_stats() {$/;"	f	class:G1ParScanThreadState
initialize_service_thread	g1CollectedHeap.cpp	/^jint G1CollectedHeap::initialize_service_thread() {$/;"	f	class:G1CollectedHeap
initialize_serviceability	g1CollectedHeap.cpp	/^void G1CollectedHeap::initialize_serviceability() {$/;"	f	class:G1CollectedHeap
initialize_serviceability	g1MonitoringSupport.cpp	/^void G1MonitoringSupport::initialize_serviceability() {$/;"	f	class:G1MonitoringSupport
initialize_threshold	g1BlockOffsetTable.cpp	/^HeapWord* G1BlockOffsetTablePart::initialize_threshold() {$/;"	f	class:G1BlockOffsetTablePart
initialize_threshold	heapRegion.cpp	/^HeapWord* HeapRegion::initialize_threshold() {$/;"	f	class:HeapRegion
initialize_threshold_raw	g1BlockOffsetTable.cpp	/^HeapWord* G1BlockOffsetTablePart::initialize_threshold_raw() {$/;"	f	class:G1BlockOffsetTablePart
initialize_values	g1FullGCCompactionPoint.cpp	/^void G1FullGCCompactionPoint::initialize_values(bool init_threshold) {$/;"	f	class:G1FullGCCompactionPoint
initialize_verification_types	g1Arguments.cpp	/^void G1Arguments::initialize_verification_types() {$/;"	f	class:G1Arguments
initialize_with_page_size	g1PageBasedVirtualSpace.cpp	/^void G1PageBasedVirtualSpace::initialize_with_page_size(ReservedSpace rs, size_t used_size, size_t page_size) {$/;"	f	class:G1PageBasedVirtualSpace
initialize_without_numa	g1NUMA.cpp	/^void G1NUMA::initialize_without_numa() {$/;"	f	class:G1NUMA
initiate_conc_mark	g1Policy.cpp	/^void G1Policy::initiate_conc_mark() {$/;"	f	class:G1Policy
initiate_conc_mark_if_possible	g1CollectorState.hpp	/^  bool initiate_conc_mark_if_possible() const { return _initiate_conc_mark_if_possible; }$/;"	f	class:G1CollectorState
insert	g1HotCardCache.cpp	/^CardTable::CardValue* G1HotCardCache::insert(CardValue* card_ptr) {$/;"	f	class:G1HotCardCache
insert_into_free_list	heapRegionManager.inline.hpp	/^inline void HeapRegionManager::insert_into_free_list(HeapRegion* hr) {$/;"	f	class:HeapRegionManager
insert_list_into_free_list	heapRegionManager.hpp	/^  void insert_list_into_free_list(FreeRegionList* list) {$/;"	f	class:HeapRegionManager
insert_pre_barrier	c2/g1BarrierSetC2.cpp	/^void G1BarrierSetC2::insert_pre_barrier(GraphKit* kit, Node* base_oop, Node* offset,$/;"	f	class:G1BarrierSetC2
install_surv_rate_group	heapRegion.inline.hpp	/^inline void HeapRegion::install_surv_rate_group(G1SurvRateGroup* surv_rate_group) {$/;"	f	class:HeapRegion
invalidate	g1BarrierSet.cpp	/^void G1BarrierSet::invalidate(MemRegion mr) {$/;"	f	class:G1BarrierSet
invalidate	g1FromCardCache.cpp	/^void G1FromCardCache::invalidate(uint start_idx, size_t new_num_regions) {$/;"	f	class:G1FromCardCache
invalidate_from_card_cache	heapRegionRemSet.hpp	/^  static void invalidate_from_card_cache(uint start_idx, size_t num_regions) {$/;"	f	class:HeapRegionRemSet
is_active	g1HRPrinter.hpp	/^  const bool is_active() { return log_is_enabled(Trace, gc, region); }$/;"	f	class:G1HRPrinter
is_after_last_page	g1PageBasedVirtualSpace.cpp	/^bool G1PageBasedVirtualSpace::is_after_last_page(size_t index) const {$/;"	f	class:G1PageBasedVirtualSpace
is_archive	heapRegion.hpp	/^  bool is_archive()        const { return _type.is_archive(); }$/;"	f	class:HeapRegion
is_archive	heapRegionType.hpp	/^  bool is_archive()        const { return (get() & ArchiveMask) != 0; }$/;"	f	class:HeapRegionType
is_archive_alloc_too_large	g1CollectedHeap.cpp	/^bool G1CollectedHeap::is_archive_alloc_too_large(size_t word_size) {$/;"	f	class:G1CollectedHeap
is_archived_object	g1Allocator.inline.hpp	/^inline bool G1ArchiveAllocator::is_archived_object(oop object) {$/;"	f	class:G1ArchiveAllocator
is_area_committed	g1PageBasedVirtualSpace.cpp	/^bool G1PageBasedVirtualSpace::is_area_committed(size_t start_page, size_t size_in_pages) const {$/;"	f	class:G1PageBasedVirtualSpace
is_area_uncommitted	g1PageBasedVirtualSpace.cpp	/^bool G1PageBasedVirtualSpace::is_area_uncommitted(size_t start_page, size_t size_in_pages) const {$/;"	f	class:G1PageBasedVirtualSpace
is_array_slice	g1ConcurrentMark.hpp	/^  bool is_array_slice() const { return ((uintptr_t)_holder & ArraySliceBit) != 0; }$/;"	f	class:G1TaskQueueEntry
is_available	heapRegionManager.cpp	/^bool HeapRegionManager::is_available(uint region) const {$/;"	f	class:HeapRegionManager
is_below_finger	g1ConcurrentMark.inline.hpp	/^inline bool G1CMTask::is_below_finger(oop obj, HeapWord* global_finger) const {$/;"	f	class:G1CMTask
is_below_tams	g1RemSet.cpp	/^      bool is_below_tams() const {$/;"	f	class:G1RebuildRemSetTask::G1RebuildRemSetHeapRegionClosure::LiveObjIterator	file:
is_candidate	g1CollectedHeap.hpp	/^    bool is_candidate(uint region) {$/;"	f	class:G1CollectedHeap::HumongousReclaimCandidates
is_candidate_from_evacuation	g1StringDedup.cpp	/^bool G1StringDedup::is_candidate_from_evacuation(bool from_young, bool to_young, oop obj) {$/;"	f	class:G1StringDedup
is_candidate_from_mark	g1StringDedup.cpp	/^bool G1StringDedup::is_candidate_from_mark(oop obj) {$/;"	f	class:G1StringDedup
is_card_boundary	g1BlockOffsetTable.cpp	/^bool G1BlockOffsetTable::is_card_boundary(HeapWord* p) const {$/;"	f	class:G1BlockOffsetTable
is_clear	g1RegionMarkStatsCache.hpp	/^    bool is_clear() const {$/;"	f	struct:G1RegionMarkStatsCache::G1RegionMarkStatsCacheEntry
is_clear	g1RegionMarkStatsCache.hpp	/^  bool is_clear() const { return _live_words == 0; }$/;"	f	struct:G1RegionMarkStats
is_closed_archive	heapRegion.hpp	/^  bool is_closed_archive() const { return _type.is_closed_archive(); }$/;"	f	class:HeapRegion
is_closed_archive	heapRegionType.hpp	/^  bool is_closed_archive() const { return get() == ClosedArchiveTag; }$/;"	f	class:HeapRegionType
is_closed_archive_object	g1Allocator.inline.hpp	/^inline bool G1ArchiveAllocator::is_closed_archive_object(oop object) {$/;"	f	class:G1ArchiveAllocator
is_complete	g1ConcurrentMark.cpp	/^  bool is_complete() {$/;"	f	class:G1ClearBitMapTask
is_complete	heapRegion.hpp	/^  bool is_complete() { return _is_complete; }$/;"	f	class:HeapRegionClosure
is_complete	heapRegionRemSet.hpp	/^  bool is_complete() { return _state == Complete; }$/;"	f	class:HeapRegionRemSet
is_concurrent_start_pause	g1Policy.cpp	/^bool G1Policy::is_concurrent_start_pause(PauseKind kind) {$/;"	f	class:G1Policy
is_continues_humongous	heapRegion.hpp	/^  bool is_continues_humongous() const { return _type.is_continues_humongous();   }$/;"	f	class:HeapRegion
is_continues_humongous	heapRegionType.hpp	/^  bool is_continues_humongous() const { return get() == ContinuesHumongousTag; }$/;"	f	class:HeapRegionType
is_correct_type	g1CollectedHeap.cpp	/^  bool is_correct_type(HeapRegion* hr) { return hr->is_archive(); }$/;"	f	class:ArchiveRegionSetChecker
is_correct_type	g1CollectedHeap.cpp	/^  bool is_correct_type(HeapRegion* hr) { return hr->is_humongous(); }$/;"	f	class:HumongousRegionSetChecker
is_correct_type	g1CollectedHeap.cpp	/^  bool is_correct_type(HeapRegion* hr) { return hr->is_old(); }$/;"	f	class:OldRegionSetChecker
is_correct_type	heapRegionManager.cpp	/^  bool is_correct_type(HeapRegion* hr) { return hr->is_free(); }$/;"	f	class:MasterFreeRegionListChecker
is_default	g1HeapRegionAttr.hpp	/^  bool is_default() const              { return type() == NotInCSet; }$/;"	f	struct:G1HeapRegionAttr
is_double_geq	g1MMUTracker.cpp	36;"	d	file:
is_double_leq	g1MMUTracker.cpp	35;"	d	file:
is_double_leq_0	g1MMUTracker.cpp	34;"	d	file:
is_eden	heapRegion.hpp	/^  bool is_eden()     const { return _type.is_eden();     }$/;"	f	class:HeapRegion
is_eden	heapRegionType.hpp	/^  bool is_eden()     const { return get() == EdenTag;  }$/;"	f	class:HeapRegionType
is_empty	g1CodeCacheRemSet.hpp	/^  bool is_empty() {$/;"	f	class:G1CodeRootSet
is_empty	g1CollectionSetCandidates.hpp	/^  bool is_empty() { return num_remaining() == 0; }$/;"	f	class:G1CollectionSetCandidates
is_empty	g1ConcurrentMark.hpp	/^  bool is_empty() const { return _chunk_list == NULL; }$/;"	f	class:G1CMMarkStack
is_empty	g1FullGCMarker.inline.hpp	/^inline bool G1FullGCMarker::is_empty() {$/;"	f	class:G1FullGCMarker
is_empty	heapRegion.hpp	/^  bool is_empty() const { return used() == 0; }$/;"	f	class:HeapRegion
is_empty	heapRegionRemSet.cpp	/^bool OtherRegionsTable::is_empty() const {$/;"	f	class:OtherRegionsTable
is_empty	heapRegionRemSet.hpp	/^  bool is_empty() const {$/;"	f	class:HeapRegionRemSet
is_empty	heapRegionSet.hpp	/^  bool is_empty() { return _length == 0; }$/;"	f	class:HeapRegionSetBase
is_enabled	g1NUMA.cpp	/^bool G1NUMA::is_enabled() const { return num_active_nodes() > 1; }$/;"	f	class:G1NUMA
is_explicit_gc	g1FullGCScope.cpp	/^bool G1FullGCScope::is_explicit_gc() {$/;"	f	class:G1FullGCScope
is_free	heapRegion.hpp	/^  bool is_free() const { return _type.is_free(); }$/;"	f	class:HeapRegion
is_free	heapRegionManager.cpp	/^bool HeapRegionManager::is_free(HeapRegion* hr) const {$/;"	f	class:HeapRegionManager
is_free	heapRegionType.hpp	/^  bool is_free() const { return get() == FreeTag; }$/;"	f	class:HeapRegionType
is_gc_barrier_node	c2/g1BarrierSetC2.cpp	/^bool G1BarrierSetC2::is_gc_barrier_node(Node* node) const {$/;"	f	class:G1BarrierSetC2
is_heterogeneous_heap	g1Arguments.cpp	/^bool G1Arguments::is_heterogeneous_heap() {$/;"	f	class:G1Arguments
is_heterogeneous_heap	g1CollectedHeap.cpp	/^bool G1CollectedHeap::is_heterogeneous_heap() const {$/;"	f	class:G1CollectedHeap
is_hot	g1CardCounts.cpp	/^bool G1CardCounts::is_hot(uint count) {$/;"	f	class:G1CardCounts
is_humongous	g1CollectedHeap.hpp	/^  static bool is_humongous(size_t word_size) {$/;"	f	class:G1CollectedHeap
is_humongous	g1HeapRegionAttr.hpp	/^  bool is_humongous() const            { return type() == Humongous; }$/;"	f	struct:G1HeapRegionAttr
is_humongous	heapRegion.hpp	/^  bool is_humongous() const { return _type.is_humongous(); }$/;"	f	class:HeapRegion
is_humongous	heapRegionType.hpp	/^  bool is_humongous()           const { return (get() & HumongousMask) != 0;   }$/;"	f	class:HeapRegionType
is_humongous_live	g1RemSet.cpp	/^    bool is_humongous_live(oop const humongous_obj, const G1CMBitMap* const bitmap, HeapWord* tams, HeapWord* tars) const {$/;"	f	class:G1RebuildRemSetTask::G1RebuildRemSetHeapRegionClosure	file:
is_humongous_reclaim_candidate	g1CollectedHeap.inline.hpp	/^inline bool G1CollectedHeap::is_humongous_reclaim_candidate(uint region) {$/;"	f	class:G1CollectedHeap
is_in	g1CollectedHeap.cpp	/^bool G1CollectedHeap::is_in(const void* p) const {$/;"	f	class:G1CollectedHeap
is_in	heapRegion.hpp	/^  bool is_in(const void* p) const {$/;"	f	class:HeapRegion
is_in	heapRegion.hpp	/^  bool is_in(oop obj) const {$/;"	f	class:HeapRegion
is_in_cset	g1CollectedHeap.inline.hpp	/^bool G1CollectedHeap::is_in_cset(const HeapRegion* hr) {$/;"	f	class:G1CollectedHeap
is_in_cset	g1CollectedHeap.inline.hpp	/^inline bool G1CollectedHeap::is_in_cset(HeapWord* addr) {$/;"	f	class:G1CollectedHeap
is_in_cset	g1CollectedHeap.inline.hpp	/^inline bool G1CollectedHeap::is_in_cset(oop obj) {$/;"	f	class:G1CollectedHeap
is_in_cset	g1HeapRegionAttr.hpp	/^  bool is_in_cset() const              { return type() >= Young; }$/;"	f	struct:G1HeapRegionAttr
is_in_cset	g1HeapRegionAttr.hpp	/^  bool is_in_cset(HeapWord* addr) const { return at(addr).is_in_cset(); }$/;"	f	class:G1HeapRegionAttrBiasedMappedArray
is_in_cset	g1HeapRegionAttr.hpp	/^  bool is_in_cset(const HeapRegion* hr) const { return get_by_index(hr->hrm_index()).is_in_cset(); }$/;"	f	class:G1HeapRegionAttrBiasedMappedArray
is_in_cset_or_humongous	g1CollectedHeap.inline.hpp	/^bool G1CollectedHeap::is_in_cset_or_humongous(const oop obj) {$/;"	f	class:G1CollectedHeap
is_in_cset_or_humongous	g1HeapRegionAttr.hpp	/^  bool is_in_cset_or_humongous() const { return is_in_cset() || is_humongous(); }$/;"	f	struct:G1HeapRegionAttr
is_in_cset_or_humongous	g1HeapRegionAttr.hpp	/^  bool is_in_cset_or_humongous(HeapWord* addr) const { return at(addr).is_in_cset_or_humongous(); }$/;"	f	class:G1HeapRegionAttrBiasedMappedArray
is_in_dram	heterogeneousHeapRegionManager.cpp	/^bool HeterogeneousHeapRegionManager::is_in_dram(uint index) const {$/;"	f	class:HeterogeneousHeapRegionManager
is_in_exact	g1CollectedHeap.cpp	/^bool G1CollectedHeap::is_in_exact(const void* p) const {$/;"	f	class:G1CollectedHeap
is_in_nvdimm	heterogeneousHeapRegionManager.cpp	/^bool HeterogeneousHeapRegionManager::is_in_nvdimm(uint index) const {$/;"	f	class:HeterogeneousHeapRegionManager
is_in_reserved	g1CollectedHeap.hpp	/^  bool is_in_reserved(const void* addr) const {$/;"	f	class:G1CollectedHeap
is_in_reserved	heapRegion.hpp	/^  bool is_in_reserved(const void* p) const { return _bottom <= p && p < _end; }$/;"	f	class:HeapRegion
is_in_same_region	heapRegion.hpp	/^  static bool is_in_same_region(T* p, oop obj) {$/;"	f	class:HeapRegion
is_in_young	g1CardTable.cpp	/^bool G1CardTable::is_in_young(oop obj) const {$/;"	f	class:G1CardTable
is_in_young	g1CollectedHeap.inline.hpp	/^inline bool G1CollectedHeap::is_in_young(const oop obj) {$/;"	f	class:G1CollectedHeap
is_initialized	g1FullGCCompactionPoint.cpp	/^bool G1FullGCCompactionPoint::is_initialized() {$/;"	f	class:G1FullGCCompactionPoint
is_last_page	g1PageBasedVirtualSpace.hpp	/^  bool is_last_page(size_t index) const { return index == (_committed.size() - 1); }$/;"	f	class:G1PageBasedVirtualSpace
is_last_page_partial	g1PageBasedVirtualSpace.hpp	/^  bool is_last_page_partial() const { return !is_aligned(_high_boundary, _page_size); }$/;"	f	class:G1PageBasedVirtualSpace
is_last_young_pause	g1Policy.cpp	/^bool G1Policy::is_last_young_pause(PauseKind kind) {$/;"	f	class:G1Policy
is_live	g1RemSet.cpp	/^      bool is_live(HeapWord* obj) const {$/;"	f	class:G1RebuildRemSetTask::G1RebuildRemSetHeapRegionClosure::LiveObjIterator	file:
is_marked_in_next_bitmap	g1ConcurrentMark.inline.hpp	/^bool G1ConcurrentMark::is_marked_in_next_bitmap(oop p) const {$/;"	f	class:G1ConcurrentMark
is_marked_in_prev_bitmap	g1ConcurrentMark.inline.hpp	/^bool G1ConcurrentMark::is_marked_in_prev_bitmap(oop p) const {$/;"	f	class:G1ConcurrentMark
is_marked_next	g1CollectedHeap.inline.hpp	/^inline bool G1CollectedHeap::is_marked_next(oop obj) const {$/;"	f	class:G1CollectedHeap
is_maximal_no_gc	g1CollectedHeap.hpp	/^  virtual bool is_maximal_no_gc() const {$/;"	f	class:G1CollectedHeap
is_mixed_pause	g1Policy.cpp	/^bool G1Policy::is_mixed_pause(PauseKind kind) {$/;"	f	class:G1Policy
is_next	g1DirtyCardQueue.cpp	/^bool G1DirtyCardQueueSet::PausedBuffers::PausedList::is_next() const {$/;"	f	class:G1DirtyCardQueueSet::PausedBuffers::PausedList
is_null	g1ConcurrentMark.hpp	/^  bool is_null() const { return _holder == NULL; }$/;"	f	class:G1TaskQueueEntry
is_obj_dead	g1CollectedHeap.hpp	/^  bool is_obj_dead(const oop obj, const HeapRegion* hr) const {$/;"	f	class:G1CollectedHeap
is_obj_dead	g1CollectedHeap.inline.hpp	/^inline bool G1CollectedHeap::is_obj_dead(const oop obj) const {$/;"	f	class:G1CollectedHeap
is_obj_dead	heapRegion.inline.hpp	/^inline bool HeapRegion::is_obj_dead(const oop obj, const G1CMBitMap* const prev_bitmap) const {$/;"	f	class:HeapRegion
is_obj_dead_cond	g1CollectedHeap.cpp	/^bool G1CollectedHeap::is_obj_dead_cond(const oop obj,$/;"	f	class:G1CollectedHeap
is_obj_dead_full	g1CollectedHeap.inline.hpp	/^inline bool G1CollectedHeap::is_obj_dead_full(const oop obj) const {$/;"	f	class:G1CollectedHeap
is_obj_dead_full	g1CollectedHeap.inline.hpp	/^inline bool G1CollectedHeap::is_obj_dead_full(const oop obj, const HeapRegion* hr) const {$/;"	f	class:G1CollectedHeap
is_obj_dead_with_size	heapRegion.inline.hpp	/^inline bool HeapRegion::is_obj_dead_with_size(const oop obj, const G1CMBitMap* const prev_bitmap, size_t* size) const {$/;"	f	class:HeapRegion
is_obj_ill	g1CollectedHeap.hpp	/^  bool is_obj_ill(const oop obj, const HeapRegion* hr) const {$/;"	f	class:G1CollectedHeap
is_obj_ill	g1CollectedHeap.inline.hpp	/^inline bool G1CollectedHeap::is_obj_ill(const oop obj) const {$/;"	f	class:G1CollectedHeap
is_old	g1HeapRegionAttr.hpp	/^  bool is_old() const                  { return type() == Old; }$/;"	f	struct:G1HeapRegionAttr
is_old	heapRegion.hpp	/^  bool is_old() const { return _type.is_old(); }$/;"	f	class:HeapRegion
is_old	heapRegionType.hpp	/^  bool is_old() const { return (get() & OldMask) != 0; }$/;"	f	class:HeapRegionType
is_old_gc_alloc_region	g1CollectedHeap.cpp	/^bool G1CollectedHeap::is_old_gc_alloc_region(HeapRegion* hr) {$/;"	f	class:G1CollectedHeap
is_old_or_humongous	heapRegion.hpp	/^  bool is_old_or_humongous() const { return _type.is_old_or_humongous(); }$/;"	f	class:HeapRegion
is_old_or_humongous	heapRegionType.hpp	/^  bool is_old_or_humongous() const { return (get() & (OldMask | HumongousMask)) != 0; }$/;"	f	class:HeapRegionType
is_old_or_humongous_or_archive	heapRegion.hpp	/^  bool is_old_or_humongous_or_archive() const { return _type.is_old_or_humongous_or_archive(); }$/;"	f	class:HeapRegion
is_old_or_humongous_or_archive	heapRegionType.hpp	/^  bool is_old_or_humongous_or_archive() const { return (get() & (OldMask | HumongousMask | ArchiveMask)) != 0; }$/;"	f	class:HeapRegionType
is_on_master_free_list	g1CollectedHeap.hpp	/^  bool is_on_master_free_list(HeapRegion* hr) {$/;"	f	class:G1CollectedHeap
is_on_preferred_index	heapRegionManager.cpp	/^bool HeapRegionManager::is_on_preferred_index(uint region_index, uint preferred_node_index) {$/;"	f	class:HeapRegionManager
is_oop	g1ConcurrentMark.hpp	/^  bool is_oop() const { return !is_array_slice(); }$/;"	f	class:G1TaskQueueEntry
is_open_archive	heapRegion.hpp	/^  bool is_open_archive()   const { return _type.is_open_archive(); }$/;"	f	class:HeapRegion
is_open_archive	heapRegionType.hpp	/^  bool is_open_archive()   const { return get() == OpenArchiveTag; }$/;"	f	class:HeapRegionType
is_open_archive_object	g1Allocator.inline.hpp	/^inline bool G1ArchiveAllocator::is_open_archive_object(oop object) {$/;"	f	class:G1ArchiveAllocator
is_optional	g1HeapRegionAttr.hpp	/^  bool is_optional() const             { return type() == Optional; }$/;"	f	struct:G1HeapRegionAttr
is_page_committed	g1RegionToSpaceMapper.cpp	/^  bool is_page_committed(size_t page_idx) {$/;"	f	class:G1RegionsSmallerThanCommitSizeMapper	file:
is_pinned	heapRegion.hpp	/^  bool is_pinned() const { return _type.is_pinned(); }$/;"	f	class:HeapRegion
is_pinned	heapRegionType.hpp	/^  bool is_pinned() const { return (get() & PinnedMask) != 0; }$/;"	f	class:HeapRegionType
is_potential_eager_reclaim_candidate	g1CollectedHeap.cpp	/^bool G1CollectedHeap::is_potential_eager_reclaim_candidate(HeapRegion* r) const {$/;"	f	class:G1CollectedHeap
is_region_claimed	heapRegionManager.cpp	/^bool HeapRegionClaimer::is_region_claimed(uint region_index) const {$/;"	f	class:HeapRegionClaimer
is_region_coarsened	heapRegionRemSet.cpp	/^bool OtherRegionsTable::is_region_coarsened(RegionIdx_t from_hrm_ind) const {$/;"	f	class:OtherRegionsTable
is_retained_old_region	g1Allocator.cpp	/^bool G1Allocator::is_retained_old_region(HeapRegion* hr) {$/;"	f	class:G1Allocator
is_starts_humongous	heapRegion.hpp	/^  bool is_starts_humongous() const { return _type.is_starts_humongous(); }$/;"	f	class:HeapRegion
is_starts_humongous	heapRegionType.hpp	/^  bool is_starts_humongous()    const { return get() == StartsHumongousTag;    }$/;"	f	class:HeapRegionType
is_survivor	heapRegion.hpp	/^  bool is_survivor() const { return _type.is_survivor(); }$/;"	f	class:HeapRegion
is_survivor	heapRegionType.hpp	/^  bool is_survivor() const { return get() == SurvTag;  }$/;"	f	class:HeapRegionType
is_tracked	heapRegionRemSet.hpp	/^  bool is_tracked() { return _state != Untracked; }$/;"	f	class:HeapRegionRemSet
is_updating	heapRegionRemSet.hpp	/^  bool is_updating() { return _state == Updating; }$/;"	f	class:HeapRegionRemSet
is_user_requested_concurrent_full_gc	g1CollectedHeap.cpp	/^bool  G1CollectedHeap::is_user_requested_concurrent_full_gc(GCCause::Cause cause) {$/;"	f	class:G1CollectedHeap
is_valid	g1HeapRegionAttr.hpp	/^  bool is_valid() const                { return (type() >= Optional && type() < Num); }$/;"	f	struct:G1HeapRegionAttr
is_valid	heapRegionType.cpp	/^bool HeapRegionType::is_valid(Tag tag) {$/;"	f	class:HeapRegionType
is_valid_age_index	g1SurvRateGroup.hpp	/^  static bool is_valid_age_index(int age) { return age >= 0; }$/;"	f	class:G1SurvRateGroup
is_valid_gen	g1HeapRegionAttr.hpp	/^  bool is_valid_gen() const            { return (type() >= Young && type() <= Old); }$/;"	f	struct:G1HeapRegionAttr
is_young	g1HeapRegionAttr.hpp	/^  bool is_young() const                { return type() == Young; }$/;"	f	struct:G1HeapRegionAttr
is_young	heapRegion.hpp	/^  bool is_young()    const { return _type.is_young();    }$/;"	f	class:HeapRegion
is_young	heapRegionType.hpp	/^  bool is_young()    const { return (get() & YoungMask) != 0; }$/;"	f	class:HeapRegionType
is_young_only_pause	g1Policy.cpp	/^bool G1Policy::is_young_only_pause(PauseKind kind) {$/;"	f	class:G1Policy
iterate	g1CollectionSet.cpp	/^void G1CollectionSet::iterate(HeapRegionClosure* cl) const {$/;"	f	class:G1CollectionSet
iterate	g1CollectionSetCandidates.cpp	/^void G1CollectionSetCandidates::iterate(HeapRegionClosure* cl) {$/;"	f	class:G1CollectionSetCandidates
iterate	g1ConcurrentMark.inline.hpp	/^inline void G1CMMarkStack::iterate(Fn fn) const {$/;"	f	class:G1CMMarkStack
iterate	g1ConcurrentMarkBitMap.inline.hpp	/^inline bool G1CMBitMap::iterate(G1CMBitMapClosure* cl, MemRegion mr) {$/;"	f	class:G1CMBitMap
iterate	heapRegionManager.cpp	/^void HeapRegionManager::iterate(HeapRegionClosure* blk) const {$/;"	f	class:HeapRegionManager
iterate	heapRegionRemSet.inline.hpp	/^void OtherRegionsTable::iterate(Closure& cl) {$/;"	f	class:OtherRegionsTable
iterate_dirty_regions_from	g1RemSet.cpp	/^  void iterate_dirty_regions_from(HeapRegionClosure* cl, uint worker_id) {$/;"	f	class:G1RemSetScanState
iterate_hcc_closure	g1CollectedHeap.cpp	/^void G1CollectedHeap::iterate_hcc_closure(G1CardTableEntryClosure* cl, uint worker_id) {$/;"	f	class:G1CollectedHeap
iterate_incremental_part_from	g1CollectionSet.cpp	/^void G1CollectionSet::iterate_incremental_part_from(HeapRegionClosure* cl,$/;"	f	class:G1CollectionSet
iterate_optional	g1CollectionSet.cpp	/^void G1CollectionSet::iterate_optional(HeapRegionClosure* cl) const {$/;"	f	class:G1CollectionSet
iterate_part_from	g1CollectionSet.cpp	/^void G1CollectionSet::iterate_part_from(HeapRegionClosure* cl,$/;"	f	class:G1CollectionSet
iterate_prts	heapRegionRemSet.inline.hpp	/^inline void HeapRegionRemSet::iterate_prts(Closure& cl) {$/;"	f	class:HeapRegionRemSet
keep_alive	g1CollectedHeap.cpp	/^void G1CollectedHeap::keep_alive(oop obj) {$/;"	f	class:G1CollectedHeap
kind	g1CollectedHeap.hpp	/^  virtual Name kind() const {$/;"	f	class:G1CollectedHeap
lab_undo_waste_words	g1ParScanThreadState.cpp	/^size_t G1ParScanThreadState::lab_undo_waste_words() const {$/;"	f	class:G1ParScanThreadState
lab_waste_words	g1ParScanThreadState.cpp	/^size_t G1ParScanThreadState::lab_waste_words() const {$/;"	f	class:G1ParScanThreadState
last_marking_length_s	g1IHOPControl.hpp	/^  double last_marking_length_s() const { return _last_marking_length_s; }$/;"	f	class:G1StaticIHOPControl
last_marking_length_s	g1IHOPControl.hpp	/^  virtual double last_marking_length_s() const { return _marking_times_s.last(); }$/;"	f	class:G1AdaptiveIHOPControl
last_marking_time	g1ConcurrentStartToMixedTimeTracker.hpp	/^  double last_marking_time() {$/;"	f	class:G1ConcurrentStartToMixedTimeTracker
last_mutator_period_old_allocation_rate	g1IHOPControl.cpp	/^double G1AdaptiveIHOPControl::last_mutator_period_old_allocation_rate() const {$/;"	f	class:G1AdaptiveIHOPControl
last_period_old_gen_bytes	g1OldGenAllocationTracker.hpp	/^  size_t last_period_old_gen_bytes() const { return _last_period_old_gen_bytes; }$/;"	f	class:G1OldGenAllocationTracker
last_period_old_gen_growth	g1OldGenAllocationTracker.hpp	/^  size_t last_period_old_gen_growth() const { return _last_period_old_gen_growth; };$/;"	f	class:G1OldGenAllocationTracker
length	g1BiasedArray.hpp	/^   size_t length() const { return _length; }$/;"	f	class:G1BiasedMappedArrayBase
length	g1CodeCacheRemSet.hpp	/^  size_t length() const { return _length; }$/;"	f	class:G1CodeRootSet
length	g1EdenRegions.hpp	/^  uint length() const { return _length; }$/;"	f	class:G1EdenRegions
length	g1SurvivorRegions.cpp	/^uint G1SurvivorRegions::length() const {$/;"	f	class:G1SurvivorRegions
length	heapRegionManager.hpp	/^  uint length() const { return _end - _start; }$/;"	f	class:HeapRegionRange
length	heapRegionManager.hpp	/^  uint length() const { return _num_committed; }$/;"	f	class:HeapRegionManager
length	heapRegionSet.hpp	/^  uint length() const { return _length; }$/;"	f	class:HeapRegionSetBase
length	heapRegionSet.inline.hpp	/^inline uint FreeRegionList::NodeInfo::length(uint node_index) const {$/;"	f	class:FreeRegionList::NodeInfo
length	heapRegionSet.inline.hpp	/^inline uint FreeRegionList::length(uint node_index) const {$/;"	f	class:FreeRegionList
link_to_all	heapRegionRemSet.cpp	/^void OtherRegionsTable::link_to_all(PerRegionTable* prt) {$/;"	f	class:OtherRegionsTable
live_bytes	g1HeapVerifier.cpp	/^  size_t live_bytes() { return _live_bytes; }$/;"	f	class:VerifyObjsInRegionClosure
live_bytes	heapRegion.hpp	/^  size_t live_bytes() {$/;"	f	class:HeapRegion
liveness	g1ConcurrentMark.hpp	/^  size_t liveness(uint region) const { return _region_mark_stats[region]._live_words; }$/;"	f	class:G1ConcurrentMark
load_acquire_table	g1CodeCacheRemSet.cpp	/^G1CodeRootSetTable* G1CodeRootSet::load_acquire_table() {$/;"	f	class:G1CodeRootSet
load_at_resolved	c1/g1BarrierSetC1.cpp	/^void G1BarrierSetC1::load_at_resolved(LIRAccess& access, LIR_Opr result) {$/;"	f	class:G1BarrierSetC1
load_at_resolved	c2/g1BarrierSetC2.cpp	/^Node* G1BarrierSetC2::load_at_resolved(C2Access& access, const Type* val_type) const {$/;"	f	class:G1BarrierSetC2
log_expansion	g1HeapSizingPolicy.cpp	/^static void log_expansion(double short_term_pause_time_ratio,$/;"	f	file:
log_phase	g1GCPhaseTimes.cpp	/^void G1GCPhaseTimes::log_phase(WorkerDataArray<double>* phase, uint indent_level, outputStream* out, bool print_sum) const {$/;"	f	class:G1GCPhaseTimes
log_plab_allocation	g1EvacStats.cpp	/^void G1EvacStats::log_plab_allocation() {$/;"	f	class:G1EvacStats
log_refinement_stats	g1Policy.cpp	/^static void log_refinement_stats(const char* kind, const G1ConcurrentRefineStats& stats) {$/;"	f	file:
log_regions	g1HeapTransition.cpp	/^static void log_regions(const char* msg, size_t before_length, size_t after_length, size_t capacity,$/;"	f	file:
log_task	g1FullGCTask.cpp	/^void G1FullGCTask::log_task(const char* name, uint worker_id, const Ticks& start, const Ticks& stop) {$/;"	f	class:G1FullGCTask
logged_cards_processing_time	g1Policy.cpp	/^double G1Policy::logged_cards_processing_time() const {$/;"	f	class:G1Policy
long_term_pause_time_ratio	g1Analytics.hpp	/^  double long_term_pause_time_ratio() const {$/;"	f	class:G1Analytics
make_head	g1FreeIdSet.cpp	/^uintx G1FreeIdSet::make_head(uint index, uintx old_head) const {$/;"	f	class:G1FreeIdSet
make_pending_list_reachable	g1CollectedHeap.cpp	/^void G1CollectedHeap::make_pending_list_reachable() {$/;"	f	class:G1CollectedHeap
make_reference_grey	g1ConcurrentMark.inline.hpp	/^inline bool G1CMTask::make_reference_grey(oop obj) {$/;"	f	class:G1CMTask
make_regions_available	heapRegionManager.cpp	/^void HeapRegionManager::make_regions_available(uint start, uint num_regions, WorkGang* pretouch_gang) {$/;"	f	class:HeapRegionManager
manager	heterogeneousHeapRegionManager.cpp	/^HeterogeneousHeapRegionManager* HeterogeneousHeapRegionManager::manager() {$/;"	f	class:HeterogeneousHeapRegionManager
mangle_unused_area	heapRegion.cpp	/^void HeapRegion::mangle_unused_area() {$/;"	f	class:HeapRegion
map_nvdimm_space	g1RegionToSpaceMapper.cpp	/^static bool map_nvdimm_space(ReservedSpace rs) {$/;"	f	file:
mark_and_push	g1FullGCMarker.inline.hpp	/^template <class T> inline void G1FullGCMarker::mark_and_push(T* p) {$/;"	f	class:G1FullGCMarker
mark_as_scanned	g1CardTable.inline.hpp	/^inline void G1CardTable::mark_as_scanned(size_t start_card_index, size_t num_cards) {$/;"	f	class:G1CardTable
mark_bitmap	g1FullCollector.cpp	/^G1CMBitMap* G1FullCollector::mark_bitmap() {$/;"	f	class:G1FullCollector
mark_clean_as_dirty	g1CardTable.inline.hpp	/^inline size_t G1CardTable::mark_clean_as_dirty(size_t card_index) {$/;"	f	class:G1CardTable
mark_closure	g1FullGCMarker.hpp	/^  G1MarkAndPushClosure* mark_closure()  { return &_mark_closure; }$/;"	f	class:G1FullGCMarker
mark_from_roots	g1ConcurrentMark.cpp	/^void G1ConcurrentMark::mark_from_roots() {$/;"	f	class:G1ConcurrentMark
mark_in_next_bitmap	g1ConcurrentMark.inline.hpp	/^inline bool G1ConcurrentMark::mark_in_next_bitmap(uint const worker_id, HeapRegion* const hr, oop const obj) {$/;"	f	class:G1ConcurrentMark
mark_in_next_bitmap	g1ConcurrentMark.inline.hpp	/^inline bool G1ConcurrentMark::mark_in_next_bitmap(uint const worker_id, oop const obj) {$/;"	f	class:G1ConcurrentMark
mark_in_prev_bitmap	g1ConcurrentMark.inline.hpp	/^inline void G1ConcurrentMark::mark_in_prev_bitmap(oop p) {$/;"	f	class:G1ConcurrentMark
mark_object	g1FullGCMarker.inline.hpp	/^inline bool G1FullGCMarker::mark_object(oop obj) {$/;"	f	class:G1FullGCMarker
mark_object	g1OopClosures.inline.hpp	/^void G1ParCopyHelper::mark_object(oop obj) {$/;"	f	class:G1ParCopyHelper
mark_or_rebuild_in_progress	g1CollectorState.hpp	/^  bool mark_or_rebuild_in_progress() const { return _mark_or_rebuild_in_progress; }$/;"	f	class:G1CollectorState
mark_region_dirty	g1CardTable.inline.hpp	/^inline size_t G1CardTable::mark_region_dirty(size_t start_card_index, size_t num_cards) {$/;"	f	class:G1CardTable
mark_stack_empty	g1ConcurrentMark.hpp	/^  bool mark_stack_empty() const                 { return _global_mark_stack.is_empty(); }$/;"	f	class:G1ConcurrentMark
mark_stack_pop	g1ConcurrentMark.hpp	/^  bool mark_stack_pop(G1TaskQueueEntry* arr) {$/;"	f	class:G1ConcurrentMark
mark_stack_push	g1ConcurrentMark.hpp	/^  bool mark_stack_push(G1TaskQueueEntry* arr) {$/;"	f	class:G1ConcurrentMark
mark_stack_size	g1ConcurrentMark.hpp	/^  size_t mark_stack_size() const                { return _global_mark_stack.size(); }$/;"	f	class:G1ConcurrentMark
marked_bytes	g1EvacFailure.cpp	/^  size_t marked_bytes() { return _marked_bytes; }$/;"	f	class:RemoveSelfForwardPtrObjClosure
marked_bytes	heapRegion.hpp	/^  size_t marked_bytes()    { return _prev_marked_bytes; }$/;"	f	class:HeapRegion
marker	g1FullCollector.hpp	/^  G1FullGCMarker*          marker(uint id) { return _markers[id]; }$/;"	f	class:G1FullCollector
materialize_archived_object	g1CollectedHeap.cpp	/^oop G1CollectedHeap::materialize_archived_object(oop obj) {$/;"	f	class:G1CollectedHeap
max_capacity	g1CollectedHeap.cpp	/^size_t G1CollectedHeap::max_capacity() const {$/;"	f	class:G1CollectedHeap
max_cards	g1DirtyCardQueue.cpp	/^size_t G1DirtyCardQueueSet::max_cards() const {$/;"	f	class:G1DirtyCardQueueSet
max_code_root_mem_sz	g1RemSetSummary.cpp	/^  size_t max_code_root_mem_sz() const       { return _max_code_root_mem_sz; }$/;"	f	class:HRRSStatsIter	file:
max_code_root_mem_sz_region	g1RemSetSummary.cpp	/^  HeapRegion* max_code_root_mem_sz_region() const { return _max_code_root_mem_sz_region; }$/;"	f	class:HRRSStatsIter	file:
max_desired_young_length	g1YoungGenSizer.hpp	/^  uint max_desired_young_length() const {$/;"	f	class:G1YoungGenSizer
max_expandable_length	heapRegionManager.hpp	/^  virtual uint max_expandable_length() const { return (uint)_regions.length(); }$/;"	f	class:HeapRegionManager
max_expandable_length	heterogeneousHeapRegionManager.cpp	/^uint HeterogeneousHeapRegionManager::max_expandable_length() const {$/;"	f	class:HeterogeneousHeapRegionManager
max_expandable_regions	g1CollectedHeap.hpp	/^  uint max_expandable_regions() const { return _hrm->max_expandable_length(); }$/;"	f	class:G1CollectedHeap
max_gc_time	g1MMUTracker.hpp	/^  double max_gc_time() const {$/;"	f	class:G1MMUTracker
max_green_zone	g1ConcurrentRefine.cpp	/^const size_t max_green_zone = max_yellow_zone \/ 2;$/;"	v
max_length	heapRegionManager.hpp	/^  uint max_length() const { return (uint)_regions.length(); }$/;"	f	class:HeapRegionManager
max_live_bytes	heapRegion.hpp	/^  size_t max_live_bytes() { return used() - garbage_bytes(); }$/;"	f	class:HeapRegion
max_num_threads	g1ConcurrentRefine.cpp	/^uint G1ConcurrentRefine::max_num_threads() {$/;"	f	class:G1ConcurrentRefine
max_pause_time_ms	g1Policy.hpp	/^  double max_pause_time_ms() const {$/;"	f	class:G1Policy
max_red_zone	g1ConcurrentRefine.cpp	/^const size_t max_red_zone = INT_MAX; \/\/ For dcqs.set_max_cards.$/;"	v
max_region_size	heapRegion.cpp	/^size_t HeapRegion::max_region_size() {$/;"	f	class:HeapRegion
max_regions	g1CollectedHeap.hpp	/^  uint max_regions() const { return _hrm->max_length(); }$/;"	f	class:G1CollectedHeap
max_rs_mem_sz	g1RemSetSummary.cpp	/^  size_t max_rs_mem_sz() const              { return _max_rs_mem_sz; }$/;"	f	class:HRRSStatsIter	file:
max_rs_mem_sz_region	g1RemSetSummary.cpp	/^  HeapRegion* max_rs_mem_sz_region() const  { return _max_rs_mem_sz_region; }$/;"	f	class:HRRSStatsIter	file:
max_search_depth	g1NUMA.cpp	/^uint G1NUMA::max_search_depth() const {$/;"	f	class:G1NUMA
max_size	heapRegionBounds.inline.hpp	/^size_t HeapRegionBounds::max_size() {$/;"	f	class:HeapRegionBounds
max_survivor_regions	g1Policy.hpp	/^  uint max_survivor_regions() {$/;"	f	class:G1Policy
max_tlab_size	g1CollectedHeap.cpp	/^size_t G1CollectedHeap::max_tlab_size() const {$/;"	f	class:G1CollectedHeap
max_yellow_zone	g1ConcurrentRefine.cpp	/^const size_t max_yellow_zone = LP64_ONLY(max_jint) NOT_LP64(max_jshort);$/;"	v
may_throw_away_buffer	g1Allocator.cpp	/^bool G1PLABAllocator::may_throw_away_buffer(size_t const allocation_word_sz, size_t const buffer_size) const {$/;"	f	class:G1PLABAllocator
maybe_activate_more_threads	g1ConcurrentRefine.cpp	/^void G1ConcurrentRefine::maybe_activate_more_threads(uint worker_id, size_t num_cur_cards) {$/;"	f	class:G1ConcurrentRefine
maybe_activate_next	g1ConcurrentRefine.cpp	/^void G1ConcurrentRefineThreadControl::maybe_activate_next(uint cur_worker_id) {$/;"	f	class:G1ConcurrentRefineThreadControl
maybe_deactivate	g1ConcurrentRefineThread.cpp	/^bool G1ConcurrentRefineThread::maybe_deactivate(bool more_work) {$/;"	f	class:G1ConcurrentRefineThread
maybe_start_marking	g1Policy.cpp	/^void G1Policy::maybe_start_marking() {$/;"	f	class:G1Policy
mem_allocate	g1CollectedHeap.cpp	/^G1CollectedHeap::mem_allocate(size_t word_size,$/;"	f	class:G1CollectedHeap
mem_size	g1CodeCacheRemSet.cpp	/^size_t G1CodeRootSet::mem_size() {$/;"	f	class:G1CodeRootSet
mem_size	g1CodeCacheRemSet.cpp	/^size_t G1CodeRootSetTable::mem_size() {$/;"	f	class:G1CodeRootSetTable
mem_size	heapRegionRemSet.cpp	/^size_t OtherRegionsTable::mem_size() const {$/;"	f	class:OtherRegionsTable
mem_size	heapRegionRemSet.hpp	/^  size_t mem_size() const {$/;"	f	class:PerRegionTable
mem_size	heapRegionRemSet.hpp	/^  size_t mem_size() {$/;"	f	class:HeapRegionRemSet
mem_size	sparsePRT.cpp	/^size_t RSHashTable::mem_size() const {$/;"	f	class:RSHashTable
mem_size	sparsePRT.cpp	/^size_t SparsePRT::mem_size() const {$/;"	f	class:SparsePRT
memory_managers	g1CollectedHeap.cpp	/^GrowableArray<GCMemoryManager*> G1CollectedHeap::memory_managers() {$/;"	f	class:G1CollectedHeap
memory_managers	g1MonitoringSupport.cpp	/^GrowableArray<GCMemoryManager*> G1MonitoringSupport::memory_managers() {$/;"	f	class:G1MonitoringSupport
memory_pools	g1CollectedHeap.cpp	/^GrowableArray<MemoryPool*> G1CollectedHeap::memory_pools() {$/;"	f	class:G1CollectedHeap
memory_pools	g1MonitoringSupport.cpp	/^GrowableArray<MemoryPool*> G1MonitoringSupport::memory_pools() {$/;"	f	class:G1MonitoringSupport
memory_usage	g1CollectedHeap.cpp	/^MemoryUsage G1CollectedHeap::memory_usage() {$/;"	f	class:G1CollectedHeap
memory_usage	g1MonitoringSupport.cpp	/^MemoryUsage G1MonitoringSupport::memory_usage() {$/;"	f	class:G1MonitoringSupport
merge	g1FullGCCompactionPoint.cpp	/^void G1FullGCCompactionPoint::merge(G1FullGCCompactionPoint* other) {$/;"	f	class:G1FullGCCompactionPoint
merge	g1RemSet.cpp	/^    void merge(const G1DirtyRegions* other) {$/;"	f	class:G1RemSetScanState::G1DirtyRegions
merge_bufferlist	g1RedirtyCardsQueue.cpp	/^void G1RedirtyCardsQueueSet::merge_bufferlist(LocalQSet* src) {$/;"	f	class:G1RedirtyCardsQueueSet
merge_bufferlists	g1DirtyCardQueue.cpp	/^void G1DirtyCardQueueSet::merge_bufferlists(G1RedirtyCardsQueueSet* src) {$/;"	f	class:G1DirtyCardQueueSet
merge_heap_roots	g1RemSet.cpp	/^void G1RemSet::merge_heap_roots(bool initial_evacuation) {$/;"	f	class:G1RemSet
merge_per_thread_state_info	g1CollectedHeap.cpp	/^void G1CollectedHeap::merge_per_thread_state_info(G1ParScanThreadStateSet* per_thread_states) {$/;"	f	class:G1CollectedHeap
merge_stats	g1CollectedHeap.cpp	/^    void merge_stats(FreeCSetStats* other) {$/;"	f	class:G1FreeCollectionSetTask::FreeCSetStats
merged_coarse	g1RemSet.cpp	/^    size_t merged_coarse() const { return _cl.merged_coarse(); }$/;"	f	class:G1MergeHeapRootsTask::G1FlushHumongousCandidateRemSets
merged_coarse	g1RemSet.cpp	/^    size_t merged_coarse() const { return _merged_coarse; }$/;"	f	class:G1MergeHeapRootsTask::G1MergeCardSetClosure
merged_fine	g1RemSet.cpp	/^    size_t merged_fine() const { return _cl.merged_fine(); }$/;"	f	class:G1MergeHeapRootsTask::G1FlushHumongousCandidateRemSets
merged_fine	g1RemSet.cpp	/^    size_t merged_fine() const { return _merged_fine; }$/;"	f	class:G1MergeHeapRootsTask::G1MergeCardSetClosure
merged_sparse	g1RemSet.cpp	/^    size_t merged_sparse() const { return _cl.merged_sparse(); }$/;"	f	class:G1MergeHeapRootsTask::G1FlushHumongousCandidateRemSets
merged_sparse	g1RemSet.cpp	/^    size_t merged_sparse() const { return _merged_sparse; }$/;"	f	class:G1MergeHeapRootsTask::G1MergeCardSetClosure
messageAll	g1SendMsg.cpp	/^messageAll::messageAll(){$/;"	f	class:messageAll
messageAll	g1SendMsg.hpp	/^class messageAll{$/;"	c
min_desired_young_length	g1YoungGenSizer.hpp	/^  uint min_desired_young_length() const {$/;"	f	class:G1YoungGenSizer
min_region_size_in_words	heapRegion.cpp	/^size_t HeapRegion::min_region_size_in_words() {$/;"	f	class:HeapRegion
min_size	heapRegionBounds.inline.hpp	/^size_t HeapRegionBounds::min_size() {$/;"	f	class:HeapRegionBounds
misses	g1RegionMarkStatsCache.hpp	/^  size_t misses() const { return _cache_misses; }$/;"	f	class:G1RegionMarkStatsCache
mixed_gc_live_threshold_bytes	g1CollectionSetChooser.hpp	/^  static size_t mixed_gc_live_threshold_bytes() {$/;"	f	class:G1CollectionSetChooser
mmu_delay_end	g1ConcurrentMarkThread.cpp	/^double G1ConcurrentMarkThread::mmu_delay_end(G1Policy* g1_policy, bool remark) {$/;"	f	class:G1ConcurrentMarkThread
mmu_tracker	g1Policy.hpp	/^  G1MMUTracker* mmu_tracker() {$/;"	f	class:G1Policy
mmu_tracker	g1Policy.hpp	/^  const G1MMUTracker* mmu_tracker() const {$/;"	f	class:G1Policy
more_available	heapRegionSet.hpp	/^  bool more_available() {$/;"	f	class:FreeRegionListIterator
most_recent_gc_end_time_sec	g1Analytics.cpp	/^double G1Analytics::most_recent_gc_end_time_sec() const {$/;"	f	class:G1Analytics
move_candidates_to_collection_set	g1CollectionSet.cpp	/^void G1CollectionSet::move_candidates_to_collection_set(uint num_old_candidate_regions) {$/;"	f	class:G1CollectionSet
move_entries_to_global_stack	g1ConcurrentMark.cpp	/^void G1CMTask::move_entries_to_global_stack() {$/;"	f	class:G1CMTask
move_finger_to	g1ConcurrentMark.hpp	/^  inline void move_finger_to(HeapWord* new_finger) {$/;"	f	class:G1CMTask
move_if_below_tams	g1RemSet.cpp	/^      void move_if_below_tams() {$/;"	f	class:G1RebuildRemSetTask::G1RebuildRemSetHeapRegionClosure::LiveObjIterator	file:
move_to_large	g1CodeCacheRemSet.cpp	/^void G1CodeRootSet::move_to_large() {$/;"	f	class:G1CodeRootSet
move_to_next	g1RemSet.cpp	/^      void move_to_next() {$/;"	f	class:G1RebuildRemSetTask::G1RebuildRemSetHeapRegionClosure::LiveObjIterator
move_to_old	heapRegion.cpp	/^void HeapRegion::move_to_old() {$/;"	f	class:HeapRegion
msg	g1SendMsg.cpp	/^messageAll msg;$/;"	v
mutator_alloc_region	g1Allocator.inline.hpp	/^inline MutatorAllocRegion* G1Allocator::mutator_alloc_region(uint node_index) {$/;"	f	class:G1Allocator
n_coarsenings	heapRegionRemSet.hpp	/^  static jint n_coarsenings() { return OtherRegionsTable::n_coarsenings(); }$/;"	f	class:HeapRegionRemSet
n_coarsenings	heapRegionRemSet.hpp	/^  static jint n_coarsenings() { return _n_coarsenings; }$/;"	f	class:OtherRegionsTable
n_failures	heapRegion.cpp	/^  int n_failures() { return _n_failures; }$/;"	f	class:G1VerificationClosure
n_regions	heapRegionManager.hpp	/^  inline uint n_regions() const {$/;"	f	class:HeapRegionClaimer
n_workers	g1RootProcessor.cpp	/^uint G1RootProcessor::n_workers() const {$/;"	f	class:G1RootProcessor
name	g1CollectedHeap.hpp	/^  virtual const char* name() const {$/;"	f	class:G1CollectedHeap
name	heapRegionSet.hpp	/^  const char* name() { return _name; }$/;"	f	class:HeapRegionSetBase
need_to_start_conc_mark	g1Policy.cpp	/^bool G1Policy::need_to_start_conc_mark(const char* source, size_t alloc_word_size) {$/;"	f	class:G1Policy
needs_partial_trimming	g1ParScanThreadState.inline.hpp	/^bool G1ParScanThreadState::needs_partial_trimming() const {$/;"	f	class:G1ParScanThreadState
needs_remset_update	g1HeapRegionAttr.hpp	/^  bool needs_remset_update() const     { return _needs_remset_update != 0; }$/;"	f	struct:G1HeapRegionAttr
needs_remset_update_t	g1HeapRegionAttr.hpp	/^  typedef uint8_t needs_remset_update_t;$/;"	t	struct:G1HeapRegionAttr
needs_scan_for_rebuild	g1RemSetTrackingPolicy.cpp	/^bool G1RemSetTrackingPolicy::needs_scan_for_rebuild(HeapRegion* r) const {$/;"	f	class:G1RemSetTrackingPolicy
needs_strong_processing	g1SharedClosures.hpp	/^  static bool needs_strong_processing() {$/;"	f	class:G1SharedClosures
new_alloc_region_and_allocate	g1AllocRegion.cpp	/^HeapWord* G1AllocRegion::new_alloc_region_and_allocate(size_t word_size,$/;"	f	class:G1AllocRegion
new_entry	g1CodeCacheRemSet.cpp	/^G1CodeRootSetTable::Entry* G1CodeRootSetTable::new_entry(nmethod* nm) {$/;"	f	class:G1CodeRootSetTable
new_gc_alloc_region	g1CollectedHeap.cpp	/^HeapRegion* G1CollectedHeap::new_gc_alloc_region(size_t word_size, G1HeapRegionAttr dest, uint node_index) {$/;"	f	class:G1CollectedHeap
new_heap_region	g1CollectedHeap.cpp	/^HeapRegion* G1CollectedHeap::new_heap_region(uint hrs_index,$/;"	f	class:G1CollectedHeap
new_heap_region	heapRegionManager.cpp	/^HeapRegion* HeapRegionManager::new_heap_region(uint hrm_index) {$/;"	f	class:HeapRegionManager
new_mutator_alloc_region	g1CollectedHeap.cpp	/^HeapRegion* G1CollectedHeap::new_mutator_alloc_region(size_t word_size,$/;"	f	class:G1CollectedHeap
new_region	g1CollectedHeap.cpp	/^HeapRegion* G1CollectedHeap::new_region(size_t word_size,$/;"	f	class:G1CollectedHeap
new_val	c1/g1BarrierSetC1.hpp	/^  LIR_Opr new_val() const { return _new_val; }$/;"	f	class:G1PostBarrierStub
next	g1ConcurrentMark.hpp	/^    TaskQueueEntryChunk* next;$/;"	m	struct:G1CMMarkStack::TaskQueueEntryChunk
next	g1RemSet.cpp	/^      oop next() const {$/;"	f	class:G1RebuildRemSetTask::G1RebuildRemSetHeapRegionClosure::LiveObjIterator
next	heapRegion.hpp	/^  HeapRegion* next()              { return _next; }$/;"	f	class:HeapRegion
next	heapRegionRemSet.hpp	/^  PerRegionTable* next() const { return _next; }$/;"	f	class:PerRegionTable
next_age_index	g1SurvRateGroup.hpp	/^  int next_age_index() {$/;"	f	class:G1SurvRateGroup
next_coarse_prt	g1RemSet.cpp	/^    void next_coarse_prt(uint const region_idx) {$/;"	f	class:G1MergeHeapRootsTask::G1MergeCardSetClosure
next_fine_prt	g1RemSet.cpp	/^    void next_fine_prt(uint const region_idx, BitMap* bm) {$/;"	f	class:G1MergeHeapRootsTask::G1MergeCardSetClosure
next_gc_should_be_mixed	g1Policy.cpp	/^bool G1Policy::next_gc_should_be_mixed(const char* true_action_str,$/;"	f	class:G1Policy
next_index	sparsePRT.hpp	/^  int next_index() const { return _next_index; }$/;"	f	class:SparsePRTEntry
next_index_addr	sparsePRT.hpp	/^  int* next_index_addr() { return &_next_index; }$/;"	f	class:SparsePRTEntry
next_live_bytes	heapRegion.hpp	/^  size_t next_live_bytes() {$/;"	f	class:HeapRegion
next_mark_bitmap	g1ConcurrentMark.hpp	/^  G1CMBitMap* next_mark_bitmap() const { return _next_mark_bitmap; }$/;"	f	class:G1ConcurrentMark
next_marked_bytes	heapRegion.hpp	/^  size_t next_marked_bytes() { return _next_marked_bytes; }$/;"	f	class:HeapRegion
next_region	g1FullGCCompactionPoint.cpp	/^HeapRegion* G1FullGCCompactionPoint::next_region() {$/;"	f	class:G1FullGCCompactionPoint
next_region_attr	g1ParScanThreadState.cpp	/^G1HeapRegionAttr G1ParScanThreadState::next_region_attr(G1HeapRegionAttr const region_attr, markWord const m, uint& age) {$/;"	f	class:G1ParScanThreadState
next_region_in_heap	heapRegionManager.cpp	/^HeapRegion* HeapRegionManager::next_region_in_heap(const HeapRegion* r) const {$/;"	f	class:HeapRegionManager
next_region_in_humongous	g1CollectedHeap.inline.hpp	/^inline HeapRegion* G1CollectedHeap::next_region_in_humongous(HeapRegion* hr) const {$/;"	f	class:G1CollectedHeap
next_region_in_humongous	heapRegionManager.inline.hpp	/^inline HeapRegion* HeapRegionManager::next_region_in_humongous(HeapRegion* hr) const {$/;"	f	class:HeapRegionManager
next_sparse_prt	g1RemSet.cpp	/^    void next_sparse_prt(uint const region_idx, SparsePRTEntry::card_elem_t* cards, uint const num_cards) {$/;"	f	class:G1MergeHeapRootsTask::G1MergeCardSetClosure
next_top_at_mark_start	heapRegion.hpp	/^  HeapWord* next_top_at_mark_start() const { return _next_top_at_mark_start; }$/;"	f	class:HeapRegion
nmethods_do	g1CodeCacheRemSet.cpp	/^void G1CodeRootSet::nmethods_do(CodeBlobClosure* blk) const {$/;"	f	class:G1CodeRootSet
nmethods_do	g1CodeCacheRemSet.cpp	/^void G1CodeRootSetTable::nmethods_do(CodeBlobClosure* blk) {$/;"	f	class:G1CodeRootSetTable
node_ids	g1NUMA.cpp	/^const int* G1NUMA::node_ids() const {$/;"	f	class:G1NUMA
node_index	heapRegion.hpp	/^  uint node_index() const { return _node_index; }$/;"	f	class:HeapRegion
non_young_capacity_bytes	g1CollectedHeap.hpp	/^  size_t non_young_capacity_bytes() {$/;"	f	class:G1CollectedHeap
non_young_cset_choice_time_ms	g1GCPhaseTimes.hpp	/^  double non_young_cset_choice_time_ms() {$/;"	f	class:G1GCPhaseTimes
non_young_other_cost_per_region_ms_defaults	g1Analytics.cpp	/^static double non_young_other_cost_per_region_ms_defaults[] = {$/;"	v	file:
non_young_other_time_ms	g1Policy.cpp	/^double G1Policy::non_young_other_time_ms() const {$/;"	f	class:G1Policy
note_end_of_marking	heapRegion.inline.hpp	/^inline void HeapRegion::note_end_of_marking() {$/;"	f	class:HeapRegion
note_gc_end	g1GCPhaseTimes.cpp	/^void G1GCPhaseTimes::note_gc_end() {$/;"	f	class:G1GCPhaseTimes
note_gc_start	g1GCPhaseTimes.cpp	/^void G1GCPhaseTimes::note_gc_start() {$/;"	f	class:G1GCPhaseTimes
note_gc_start	g1Policy.cpp	/^void G1Policy::note_gc_start() {$/;"	f	class:G1Policy
note_self_forwarding_removal_end	heapRegion.cpp	/^void HeapRegion::note_self_forwarding_removal_end(size_t marked_bytes) {$/;"	f	class:HeapRegion
note_self_forwarding_removal_start	heapRegion.cpp	/^void HeapRegion::note_self_forwarding_removal_start(bool during_concurrent_start,$/;"	f	class:HeapRegion
note_start_adding_survivor_regions	g1Policy.hpp	/^  void note_start_adding_survivor_regions() {$/;"	f	class:G1Policy
note_start_of_marking	heapRegion.inline.hpp	/^inline void HeapRegion::note_start_of_marking() {$/;"	f	class:HeapRegion
note_stop_adding_survivor_regions	g1Policy.hpp	/^  void note_stop_adding_survivor_regions() {$/;"	f	class:G1Policy
notify_if_necessary	g1DirtyCardQueue.cpp	/^void G1DirtyCardQueueSet::notify_if_necessary() {$/;"	f	class:G1DirtyCardQueueSet
notify_scan_done	g1ConcurrentMark.cpp	/^void G1CMRootMemRegions::notify_scan_done() {$/;"	f	class:G1CMRootMemRegions
now_max_gc	g1MMUTracker.hpp	/^  inline bool now_max_gc(double current_time) {$/;"	f	class:G1MMUTracker
num_active_nodes	g1NUMA.cpp	/^uint G1NUMA::num_active_nodes() const {$/;"	f	class:G1NUMA
num_alloc_rate_ms	g1Analytics.cpp	/^int G1Analytics::num_alloc_rate_ms() const {$/;"	f	class:G1Analytics
num_cards	g1DirtyCardQueue.hpp	/^  size_t num_cards() const { return _num_cards; }$/;"	f	class:G1DirtyCardQueueSet
num_cards_in_dirty_regions	g1RemSet.cpp	/^  size_t num_cards_in_dirty_regions() const {$/;"	f	class:G1RemSetScanState
num_coarsenings	g1RemSetSummary.hpp	/^  size_t num_coarsenings() const {$/;"	f	class:G1RemSetSummary
num_committed_dram	g1RegionToSpaceMapper.cpp	/^uint G1RegionToHeteroSpaceMapper::num_committed_dram() const {$/;"	f	class:G1RegionToHeteroSpaceMapper
num_committed_dram	heterogeneousHeapRegionManager.cpp	/^uint HeterogeneousHeapRegionManager::num_committed_dram() const {$/;"	f	class:HeterogeneousHeapRegionManager
num_committed_nvram	g1RegionToSpaceMapper.cpp	/^uint G1RegionToHeteroSpaceMapper::num_committed_nvram() const {$/;"	f	class:G1RegionToHeteroSpaceMapper
num_committed_nvram	heterogeneousHeapRegionManager.cpp	/^uint HeterogeneousHeapRegionManager::num_committed_nvram() const {$/;"	f	class:HeterogeneousHeapRegionManager
num_dirtied	g1CollectedHeap.cpp	/^  size_t num_dirtied()   const { return _num_dirtied; }$/;"	f	class:RedirtyLoggedCardTableEntryClosure
num_entries	g1HotCardCache.hpp	/^  size_t num_entries() const {$/;"	f	class:G1HotCardCache
num_entries	sparsePRT.hpp	/^  size_t num_entries() const { return _num_entries; }$/;"	f	class:RSHashTable
num_free_or_available_regions	g1CollectedHeap.hpp	/^  uint num_free_or_available_regions() const { return num_free_regions() + _hrm->available(); }$/;"	f	class:G1CollectedHeap
num_free_regions	g1CollectedHeap.hpp	/^  uint num_free_regions() const { return _hrm->num_free_regions(); }$/;"	f	class:G1CollectedHeap
num_free_regions	heapRegionManager.hpp	/^  uint num_free_regions() const {$/;"	f	class:HeapRegionManager
num_free_regions	heapRegionManager.hpp	/^  uint num_free_regions(uint node_index) const {$/;"	f	class:HeapRegionManager
num_nodes	g1Allocator.hpp	/^  uint num_nodes() { return (uint)_num_alloc_regions; }$/;"	f	class:G1Allocator
num_of_regions_in_range	heapRegionSet.cpp	/^uint FreeRegionList::num_of_regions_in_range(uint start, uint end) const {$/;"	f	class:FreeRegionList
num_par_ids	g1DirtyCardQueue.cpp	/^uint G1DirtyCardQueueSet::num_par_ids() {$/;"	f	class:G1DirtyCardQueueSet
num_par_rem_sets	g1RemSet.cpp	/^uint G1RemSet::num_par_rem_sets() {$/;"	f	class:G1RemSet
num_queues	g1StringDedupQueue.hpp	/^  size_t num_queues() const {$/;"	f	class:G1StringDedupQueue
num_regions	g1CollectedHeap.hpp	/^  uint num_regions() const { return _hrm->length(); }$/;"	f	class:G1CollectedHeap
num_regions	g1CollectionSetCandidates.hpp	/^  uint num_regions() { return _num_regions; }$/;"	f	class:G1CollectionSetCandidates
num_remaining	g1CollectionSetCandidates.hpp	/^  uint num_remaining() { return _num_regions - _front_idx; }$/;"	f	class:G1CollectionSetCandidates
num_root_regions	g1ConcurrentMark.cpp	/^uint G1CMRootMemRegions::num_root_regions() const {$/;"	f	class:G1CMRootMemRegions
num_selected_for_rebuild	g1ConcurrentMark.cpp	/^    uint num_selected_for_rebuild() const { return _num_regions_selected_for_rebuild; }$/;"	f	class:G1UpdateRemSetTrackingBeforeRebuildTask::G1UpdateRemSetTrackingBeforeRebuild
num_task_queues	g1CollectedHeap.cpp	/^uint G1CollectedHeap::num_task_queues() const {$/;"	f	class:G1CollectedHeap
num_used_regions	g1CollectedHeap.hpp	/^  uint num_used_regions() const { return num_regions() - num_free_regions(); }$/;"	f	class:G1CollectedHeap
num_valid_cards	sparsePRT.hpp	/^  inline int num_valid_cards() const { return _next_null; }$/;"	f	class:SparsePRTEntry
num_visited_cards	g1RemSet.cpp	/^  size_t num_visited_cards() const {$/;"	f	class:G1RemSetScanState
numa	g1CollectedHeap.hpp	/^  G1NUMA* numa() const { return _numa; }$/;"	f	class:G1CollectedHeap
numa	g1NUMA.hpp	/^  static G1NUMA* numa() { return _inst; }$/;"	f	class:G1NUMA
numa_id	g1NUMA.cpp	/^int G1NUMA::numa_id(int index) const {$/;"	f	class:G1NUMA
numa_request_on_node	g1RegionToSpaceMapper.cpp	/^  void numa_request_on_node(size_t page_idx) {$/;"	f	class:G1RegionsSmallerThanCommitSizeMapper	file:
number_of_recorded_pause_times	g1Analytics.hpp	/^  uint number_of_recorded_pause_times() const {$/;"	f	class:G1Analytics
obj	g1ConcurrentMark.hpp	/^  oop obj() const {$/;"	f	class:G1TaskQueueEntry
obj_allocated_since_next_marking	heapRegion.hpp	/^  bool obj_allocated_since_next_marking(oop obj) const {$/;"	f	class:HeapRegion
obj_allocated_since_prev_marking	heapRegion.hpp	/^  bool obj_allocated_since_prev_marking(oop obj) const {$/;"	f	class:HeapRegion
objarray_stack	g1FullGCMarker.hpp	/^  ObjArrayTaskQueue* objarray_stack()  { return &_objarray_stack; }$/;"	f	class:G1FullGCMarker
object_iterate	g1CollectedHeap.cpp	/^  virtual void object_iterate(ObjectClosure* cl, uint worker_id) {$/;"	f	class:G1ParallelObjectIterator
object_iterate	g1CollectedHeap.cpp	/^void G1CollectedHeap::object_iterate(ObjectClosure* cl) {$/;"	f	class:G1CollectedHeap
object_iterate	heapRegion.cpp	/^void HeapRegion::object_iterate(ObjectClosure* blk) {$/;"	f	class:HeapRegion
object_iterate_parallel	g1CollectedHeap.cpp	/^void G1CollectedHeap::object_iterate_parallel(ObjectClosure* cl, uint worker_id, HeapRegionClaimer* claimer) {$/;"	f	class:G1CollectedHeap
object_will_fit	g1FullGCCompactionPoint.cpp	/^bool G1FullGCCompactionPoint::object_will_fit(size_t size) {$/;"	f	class:G1FullGCCompactionPoint
occupancy_less_or_equal_than	heapRegionRemSet.cpp	/^bool OtherRegionsTable::occupancy_less_or_equal_than(size_t limit) const {$/;"	f	class:OtherRegionsTable
occupancy_less_or_equal_than	heapRegionRemSet.hpp	/^  bool occupancy_less_or_equal_than(size_t occ) const {$/;"	f	class:HeapRegionRemSet
occupied	heapRegionRemSet.cpp	/^size_t OtherRegionsTable::occupied() const {$/;"	f	class:OtherRegionsTable
occupied	heapRegionRemSet.hpp	/^  jint occupied() const {$/;"	f	class:PerRegionTable
occupied	heapRegionRemSet.hpp	/^  size_t occupied() {$/;"	f	class:HeapRegionRemSet
offer_termination	g1CollectedHeap.cpp	/^bool G1ParEvacuateFollowersClosure::offer_termination() {$/;"	f	class:G1ParEvacuateFollowersClosure
offset_array	g1BlockOffsetTable.inline.hpp	/^u_char G1BlockOffsetTable::offset_array(size_t index) const {$/;"	f	class:G1BlockOffsetTable
offset_for_worker	heapRegionManager.cpp	/^uint HeapRegionClaimer::offset_for_worker(uint worker_id) const {$/;"	f	class:HeapRegionClaimer
old_attempt_allocation	g1Allocator.cpp	/^HeapWord* G1Allocator::old_attempt_allocation(size_t min_word_size,$/;"	f	class:G1Allocator
old_gc_alloc_region	g1Allocator.inline.hpp	/^inline OldGCAllocRegion* G1Allocator::old_gc_alloc_region() {$/;"	f	class:G1Allocator
old_gen_alloc_tracker	g1Policy.hpp	/^  G1OldGenAllocationTracker* old_gen_alloc_tracker() { return &_old_gen_alloc_tracker; }$/;"	f	class:G1Policy
old_gen_committed	g1MonitoringSupport.hpp	/^  size_t old_gen_committed()          { return _old_gen_committed; }$/;"	f	class:G1MonitoringSupport
old_gen_memory_usage	g1MonitoringSupport.cpp	/^MemoryUsage G1MonitoringSupport::old_gen_memory_usage(size_t initial_size, size_t max_size) {$/;"	f	class:G1MonitoringSupport
old_gen_used	g1MonitoringSupport.hpp	/^  size_t old_gen_used()               { return _old_gen_used; }$/;"	f	class:G1MonitoringSupport
old_is_full	g1Allocator.cpp	/^bool G1Allocator::old_is_full() const {$/;"	f	class:G1Allocator
old_marking_cycles_completed	g1CollectedHeap.hpp	/^  uint old_marking_cycles_completed() {$/;"	f	class:G1CollectedHeap
old_region_length	g1CollectionSet.hpp	/^  uint old_region_length() const      { return _old_region_length;      }$/;"	f	class:G1CollectionSet
old_regions_count	g1CollectedHeap.hpp	/^  uint old_regions_count() const { return _old_set.length(); }$/;"	f	class:G1CollectedHeap
old_regions_removed	g1ConcurrentMark.cpp	/^    const uint old_regions_removed() { return _old_regions_removed; }$/;"	f	class:G1ReclaimEmptyRegionsTask::G1ReclaimEmptyRegionsClosure
old_set_add	g1CollectedHeap.inline.hpp	/^inline void G1CollectedHeap::old_set_add(HeapRegion* hr) {$/;"	f	class:G1CollectedHeap
old_set_remove	g1CollectedHeap.inline.hpp	/^inline void G1CollectedHeap::old_set_remove(HeapRegion* hr) {$/;"	f	class:G1CollectedHeap
oldest_known_gc_end_time_sec	g1Analytics.cpp	/^double G1Analytics::oldest_known_gc_end_time_sec() const {$/;"	f	class:G1Analytics
on_commit	g1CardCounts.cpp	/^void G1CardCountsMappingChangedListener::on_commit(uint start_idx, size_t num_regions, bool zero_filled) {$/;"	f	class:G1CardCountsMappingChangedListener
on_commit	g1CardTable.cpp	/^void G1CardTableChangedListener::on_commit(uint start_idx, size_t num_regions, bool zero_filled) {$/;"	f	class:G1CardTableChangedListener
on_commit	g1CollectedHeap.cpp	/^void G1RegionMappingChangedListener::on_commit(uint start_idx, size_t num_regions, bool zero_filled) {$/;"	f	class:G1RegionMappingChangedListener
on_commit	g1ConcurrentMarkBitMap.cpp	/^void G1CMBitMapMappingChangedListener::on_commit(uint start_region, size_t num_regions, bool zero_filled) {$/;"	f	class:G1CMBitMapMappingChangedListener
on_thread_attach	g1BarrierSet.cpp	/^void G1BarrierSet::on_thread_attach(Thread* thread) {$/;"	f	class:G1BarrierSet
on_thread_create	g1BarrierSet.cpp	/^void G1BarrierSet::on_thread_create(Thread* thread) {$/;"	f	class:G1BarrierSet
on_thread_destroy	g1BarrierSet.cpp	/^void G1BarrierSet::on_thread_destroy(Thread* thread) {$/;"	f	class:G1BarrierSet
on_thread_detach	g1BarrierSet.cpp	/^void G1BarrierSet::on_thread_detach(Thread* thread) {$/;"	f	class:G1BarrierSet
on_thread_detach	g1DirtyCardQueue.cpp	/^void G1DirtyCardQueue::on_thread_detach() {$/;"	f	class:G1DirtyCardQueue
oop_load_in_heap	g1BarrierSet.inline.hpp	/^oop_load_in_heap(T* addr) {$/;"	f	class:G1BarrierSet::AccessBarrier
oop_load_in_heap_at	g1BarrierSet.inline.hpp	/^oop_load_in_heap_at(oop base, ptrdiff_t offset) {$/;"	f	class:G1BarrierSet::AccessBarrier
oop_load_not_in_heap	g1BarrierSet.inline.hpp	/^oop_load_not_in_heap(T* addr) {$/;"	f	class:G1BarrierSet::AccessBarrier
oop_queue_set	g1FullCollector.hpp	/^  OopQueueSet*             oop_queue_set() { return &_oop_queue_set; }$/;"	f	class:G1FullCollector
oop_stack	g1FullGCMarker.hpp	/^  OopQueue*          oop_stack()       { return &_oop_stack; }$/;"	f	class:G1FullGCMarker
oop_store_not_in_heap	g1BarrierSet.inline.hpp	/^oop_store_not_in_heap(T* addr, oop new_value) {$/;"	f	class:G1BarrierSet::AccessBarrier
oops_do	g1OopStarChunkedList.cpp	/^size_t G1OopStarChunkedList::oops_do(OopClosure* obj_cl, OopClosure* root_cl) {$/;"	f	class:G1OopStarChunkedList
oops_into_optional_region	g1ParScanThreadState.inline.hpp	/^G1OopStarChunkedList* G1ParScanThreadState::oops_into_optional_region(const HeapRegion* hr) {$/;"	f	class:G1ParScanThreadState
oops_on_memregion_seq_iterate_careful	heapRegion.inline.hpp	/^HeapWord* HeapRegion::oops_on_memregion_seq_iterate_careful(MemRegion mr,$/;"	f	class:HeapRegion
operator ()	g1CodeCacheRemSet.cpp	/^  bool operator() (nmethod* nm) {$/;"	f	class:CleanCallback
operator ()	g1ConcurrentMark.cpp	/^  void operator()(G1TaskQueueEntry task_entry) const {$/;"	f	class:VerifyNoCSetOops
operator ()	g1SATBMarkQueueSet.cpp	/^  bool operator()(const void* entry) const {$/;"	f	class:G1SATBMarkQueueFilterFn
operator +	g1ConcurrentRefineStats.hpp	/^  friend G1ConcurrentRefineStats operator+(G1ConcurrentRefineStats x,$/;"	f	class:G1ConcurrentRefineStats
operator +=	g1ConcurrentRefineStats.cpp	/^G1ConcurrentRefineStats::operator+=(const G1ConcurrentRefineStats& other) {$/;"	f	class:G1ConcurrentRefineStats
operator -	g1ConcurrentRefineStats.hpp	/^  friend G1ConcurrentRefineStats operator-(G1ConcurrentRefineStats x,$/;"	f	class:G1ConcurrentRefineStats
operator -=	g1ConcurrentRefineStats.cpp	/^G1ConcurrentRefineStats::operator-=(const G1ConcurrentRefineStats& other) {$/;"	f	class:G1ConcurrentRefineStats
opt_refs_memory_used	g1RemSet.cpp	/^  size_t opt_refs_memory_used() const { return _opt_refs_memory_used; }$/;"	f	class:G1ScanCollectionSetRegionClosure
opt_refs_scanned	g1RemSet.cpp	/^  size_t opt_refs_scanned() const { return _opt_refs_scanned; }$/;"	f	class:G1ScanCollectionSetRegionClosure
optional_evacuation_fraction	g1Policy.hpp	/^  double optional_evacuation_fraction() { return 0.75; }$/;"	f	class:G1Policy
optional_prediction_fraction	g1Policy.hpp	/^  double optional_prediction_fraction() { return 0.2; }$/;"	f	class:G1Policy
optional_region_length	g1CollectionSet.hpp	/^  uint optional_region_length() const { return _num_optional_regions; }$/;"	f	class:G1CollectionSet
order_regions	g1CollectionSetChooser.cpp	/^static int order_regions(HeapRegion* hr1, HeapRegion* hr2) {$/;"	f	file:
orig	g1BarrierSetRuntime.cpp	/^  G1ThreadLocalData::satb_mark_queue(thread).enqueue(orig);$/;"	v
other_time_ms	g1Policy.cpp	/^double G1Policy::other_time_ms(double pause_time_ms) const {$/;"	f	class:G1Policy
out_of_regions	g1ConcurrentMark.hpp	/^  bool out_of_regions() { return _finger >= _heap.end(); }$/;"	f	class:G1ConcurrentMark
overflow	sparsePRT.hpp	/^    overflow, \/\/ The table is full, could not add the card to the table.$/;"	e	enum:SparsePRT::AddCardResult
pad_capacity	g1MonitoringSupport.hpp	/^  static size_t pad_capacity(size_t size_bytes, size_t mult = 1) {$/;"	f	class:G1MonitoringSupport
page_size	g1NUMA.cpp	/^size_t G1NUMA::page_size() const {$/;"	f	class:G1NUMA
page_size	g1PageBasedVirtualSpace.cpp	/^size_t G1PageBasedVirtualSpace::page_size() const {$/;"	f	class:G1PageBasedVirtualSpace
page_start	g1PageBasedVirtualSpace.cpp	/^char* G1PageBasedVirtualSpace::page_start(size_t index) const {$/;"	f	class:G1PageBasedVirtualSpace
par_allocate	g1AllocRegion.inline.hpp	/^inline HeapWord* G1AllocRegion::par_allocate(HeapRegion* alloc_region, size_t word_size) {$/;"	f	class:G1AllocRegion
par_allocate	g1AllocRegion.inline.hpp	/^inline HeapWord* G1AllocRegion::par_allocate(HeapRegion* alloc_region,$/;"	f	class:G1AllocRegion
par_allocate	heapRegion.inline.hpp	/^inline HeapWord* HeapRegion::par_allocate(size_t min_word_size,$/;"	f	class:HeapRegion
par_allocate	heapRegion.inline.hpp	/^inline HeapWord* HeapRegion::par_allocate(size_t word_size) {$/;"	f	class:HeapRegion
par_allocate_during_gc	g1Allocator.cpp	/^HeapWord* G1Allocator::par_allocate_during_gc(G1HeapRegionAttr dest,$/;"	f	class:G1Allocator
par_allocate_impl	heapRegion.inline.hpp	/^inline HeapWord* HeapRegion::par_allocate_impl(size_t min_word_size,$/;"	f	class:HeapRegion
par_allocate_no_bot_updates	heapRegion.inline.hpp	/^inline HeapWord* HeapRegion::par_allocate_no_bot_updates(size_t min_word_size,$/;"	f	class:HeapRegion
par_apply	g1CollectedHeap.cpp	/^  void par_apply(RedirtyLoggedCardTableEntryClosure* cl, uint worker_id) {$/;"	f	class:G1RedirtyLoggedCardsTask	file:
par_ids_start	g1DirtyCardQueue.cpp	/^static uint par_ids_start() { return 0; }$/;"	f	file:
par_iterate	g1CollectionSet.cpp	/^void G1CollectionSet::par_iterate(HeapRegionClosure* cl,$/;"	f	class:G1CollectionSet
par_iterate	heapRegionManager.cpp	/^void HeapRegionManager::par_iterate(HeapRegionClosure* blk, HeapRegionClaimer* hrclaimer, const uint start_index) const {$/;"	f	class:HeapRegionManager
par_pop_chunk	g1ConcurrentMark.cpp	/^bool G1CMMarkStack::par_pop_chunk(G1TaskQueueEntry* ptr_arr) {$/;"	f	class:G1CMMarkStack
par_push_chunk	g1ConcurrentMark.cpp	/^bool G1CMMarkStack::par_push_chunk(G1TaskQueueEntry* ptr_arr) {$/;"	f	class:G1CMMarkStack
par_scan_state	g1CollectedHeap.cpp	/^  G1ParScanThreadState*   par_scan_state() { return _par_scan_state; }$/;"	f	class:G1STWDrainQueueClosure
par_scan_state	g1CollectedHeap.hpp	/^  G1ParScanThreadState*   par_scan_state() { return _par_scan_state; }$/;"	f	class:G1ParEvacuateFollowersClosure
parallel_object_iterator	g1CollectedHeap.cpp	/^ParallelObjectIterator* G1CollectedHeap::parallel_object_iterator(uint thread_num) {$/;"	f	class:G1CollectedHeap
parse_verification_type	g1Arguments.cpp	/^void G1Arguments::parse_verification_type(const char* type) {$/;"	f	class:G1Arguments
partial_mark_stack_size_target	g1ConcurrentMark.hpp	/^  size_t partial_mark_stack_size_target() const { return _global_mark_stack.capacity() \/ 3; }$/;"	f	class:G1ConcurrentMark
patch_code	c1/g1BarrierSetC1.hpp	/^  LIR_PatchCode patch_code() const { return _patch_code; }$/;"	f	class:G1PreBarrierStub
pending_cards_at_gc_start	g1Policy.hpp	/^  size_t pending_cards_at_gc_start() const { return _pending_cards_at_gc_start; }$/;"	f	class:G1Policy
phase1_mark_live_objects	g1FullCollector.cpp	/^void G1FullCollector::phase1_mark_live_objects() {$/;"	f	class:G1FullCollector
phase2_prepare_compaction	g1FullCollector.cpp	/^void G1FullCollector::phase2_prepare_compaction() {$/;"	f	class:G1FullCollector
phase3_adjust_pointers	g1FullCollector.cpp	/^void G1FullCollector::phase3_adjust_pointers() {$/;"	f	class:G1FullCollector
phase4_do_compaction	g1FullCollector.cpp	/^void G1FullCollector::phase4_do_compaction() {$/;"	f	class:G1FullCollector
phase_name	g1GCPhaseTimes.cpp	/^const char* G1GCPhaseTimes::phase_name(GCParPhases phase) {$/;"	f	class:G1GCPhaseTimes
phase_times	g1CollectedHeap.inline.hpp	/^G1GCPhaseTimes* G1CollectedHeap::phase_times() const {$/;"	f	class:G1CollectedHeap
phase_times	g1CollectionSet.cpp	/^G1GCPhaseTimes* G1CollectionSet::phase_times() {$/;"	f	class:G1CollectionSet
phase_times	g1Policy.cpp	/^G1GCPhaseTimes* G1Policy::phase_times() const {$/;"	f	class:G1Policy
phase_to_explanatory_string	g1NUMAStats.cpp	/^static const char* phase_to_explanatory_string(G1NUMAStats::NodeDataItems phase) {$/;"	f	file:
pid	g1SendMsg.hpp	/^    pid_t pid;$/;"	m	class:messageAll
plab_allocate	g1Allocator.inline.hpp	/^inline HeapWord* G1PLABAllocator::plab_allocate(G1HeapRegionAttr dest,$/;"	f	class:G1PLABAllocator
policy	g1CollectedHeap.hpp	/^  G1Policy* policy() const { return _policy; }$/;"	f	class:G1CollectedHeap
pop	g1DirtyCardQueue.cpp	/^BufferNode* G1DirtyCardQueueSet::Queue::pop() {$/;"	f	class:G1DirtyCardQueueSet::Queue
pop_impl	g1StringDedupQueue.cpp	/^oop G1StringDedupQueue::pop_impl() {$/;"	f	class:G1StringDedupQueue
pop_objarray	g1FullGCMarker.inline.hpp	/^inline bool G1FullGCMarker::pop_objarray(ObjArrayTask& arr) {$/;"	f	class:G1FullGCMarker
pop_object	g1FullGCMarker.inline.hpp	/^inline bool G1FullGCMarker::pop_object(oop& oop) {$/;"	f	class:G1FullGCMarker
post_barrier	c1/g1BarrierSetC1.cpp	/^void G1BarrierSetC1::post_barrier(LIRAccess& access, LIR_OprDesc* addr, LIR_OprDesc* new_val) {$/;"	f	class:G1BarrierSetC1
post_barrier	c2/g1BarrierSetC2.cpp	/^void G1BarrierSetC2::post_barrier(GraphKit* kit,$/;"	f	class:G1BarrierSetC2
post_barrier_c1_runtime_code_blob	c1/g1BarrierSetC1.hpp	/^  CodeBlob* post_barrier_c1_runtime_code_blob() { return _post_barrier_c1_runtime_code_blob; }$/;"	f	class:G1BarrierSetC1
post_compaction	g1HRPrinter.hpp	/^  void post_compaction(HeapRegion* hr) {$/;"	f	class:G1HRPrinter
post_concurrent_start	g1ConcurrentMark.cpp	/^void G1ConcurrentMark::post_concurrent_start() {$/;"	f	class:G1ConcurrentMark
post_evacuate_collection_set	g1CollectedHeap.cpp	/^void G1CollectedHeap::post_evacuate_collection_set(G1EvacuationInfo& evacuation_info,$/;"	f	class:G1CollectedHeap
post_initialize	g1CollectedHeap.cpp	/^void G1CollectedHeap::post_initialize() {$/;"	f	class:G1CollectedHeap
pre_barrier	c1/g1BarrierSetC1.cpp	/^void G1BarrierSetC1::pre_barrier(LIRAccess& access, LIR_Opr addr_opr,$/;"	f	class:G1BarrierSetC1
pre_barrier	c2/g1BarrierSetC2.cpp	/^void G1BarrierSetC2::pre_barrier(GraphKit* kit,$/;"	f	class:G1BarrierSetC2
pre_barrier_c1_runtime_code_blob	c1/g1BarrierSetC1.hpp	/^  CodeBlob* pre_barrier_c1_runtime_code_blob() { return _pre_barrier_c1_runtime_code_blob; }$/;"	f	class:G1BarrierSetC1
pre_concurrent_start	g1ConcurrentMark.cpp	/^void G1ConcurrentMark::pre_concurrent_start() {$/;"	f	class:G1ConcurrentMark
pre_dummy_top	heapRegion.hpp	/^  HeapWord* pre_dummy_top() { return (_pre_dummy_top == NULL) ? top() : _pre_dummy_top; }$/;"	f	class:HeapRegion
pre_evacuate_collection_set	g1CollectedHeap.cpp	/^void G1CollectedHeap::pre_evacuate_collection_set(G1EvacuationInfo& evacuation_info, G1ParScanThreadStateSet* per_thread_states) {$/;"	f	class:G1CollectedHeap
pre_val	c1/g1BarrierSetC1.hpp	/^  LIR_Opr pre_val() const { return _pre_val; }$/;"	f	class:G1PreBarrierStub
preclean	g1ConcurrentMark.cpp	/^void G1ConcurrentMark::preclean() {$/;"	f	class:G1ConcurrentMark
precleaned_cards	g1ConcurrentRefineStats.hpp	/^  size_t precleaned_cards() const { return _precleaned_cards; }$/;"	f	class:G1ConcurrentRefineStats
predict	g1IHOPControl.cpp	/^double G1AdaptiveIHOPControl::predict(TruncatedSeq const* seq) const {$/;"	f	class:G1AdaptiveIHOPControl
predict	g1Predictions.hpp	/^  double predict(TruncatedSeq const* seq) const {$/;"	f	class:G1Predictions
predict_alloc_rate_ms	g1Analytics.cpp	/^double G1Analytics::predict_alloc_rate_ms() const {$/;"	f	class:G1Analytics
predict_base_elapsed_time_ms	g1Policy.cpp	/^double G1Policy::predict_base_elapsed_time_ms(size_t pending_cards) const {$/;"	f	class:G1Policy
predict_base_elapsed_time_ms	g1Policy.cpp	/^double G1Policy::predict_base_elapsed_time_ms(size_t pending_cards,$/;"	f	class:G1Policy
predict_bytes_to_copy	g1Policy.cpp	/^size_t G1Policy::predict_bytes_to_copy(HeapRegion* hr) const {$/;"	f	class:G1Policy
predict_card_merge_time_ms	g1Analytics.cpp	/^double G1Analytics::predict_card_merge_time_ms(size_t card_num, bool for_young_gc) const {$/;"	f	class:G1Analytics
predict_card_scan_time_ms	g1Analytics.cpp	/^double G1Analytics::predict_card_scan_time_ms(size_t card_num, bool for_young_gc) const {$/;"	f	class:G1Analytics
predict_cleanup_time_ms	g1Analytics.cpp	/^double G1Analytics::predict_cleanup_time_ms() const {$/;"	f	class:G1Analytics
predict_concurrent_refine_rate_ms	g1Analytics.cpp	/^double G1Analytics::predict_concurrent_refine_rate_ms() const {$/;"	f	class:G1Analytics
predict_constant_other_time_ms	g1Analytics.cpp	/^double G1Analytics::predict_constant_other_time_ms() const {$/;"	f	class:G1Analytics
predict_dirtied_cards_rate_ms	g1Analytics.cpp	/^double G1Analytics::predict_dirtied_cards_rate_ms() const {$/;"	f	class:G1Analytics
predict_eden_copy_time_ms	g1Policy.cpp	/^double G1Policy::predict_eden_copy_time_ms(uint count, size_t* bytes_to_copy) const {$/;"	f	class:G1Policy
predict_in_unit_interval	g1Analytics.cpp	/^double G1Analytics::predict_in_unit_interval(TruncatedSeq const* seq) const {$/;"	f	class:G1Analytics
predict_in_unit_interval	g1Predictions.hpp	/^  double predict_in_unit_interval(TruncatedSeq const* seq) const {$/;"	f	class:G1Predictions
predict_non_young_other_time_ms	g1Analytics.cpp	/^double G1Analytics::predict_non_young_other_time_ms(size_t non_young_num) const {$/;"	f	class:G1Analytics
predict_object_copy_time_ms	g1Analytics.cpp	/^double G1Analytics::predict_object_copy_time_ms(size_t bytes_to_copy, bool during_concurrent_mark) const {$/;"	f	class:G1Analytics
predict_object_copy_time_ms_during_cm	g1Analytics.cpp	/^double G1Analytics::predict_object_copy_time_ms_during_cm(size_t bytes_to_copy) const {$/;"	f	class:G1Analytics
predict_pending_cards	g1Analytics.cpp	/^size_t G1Analytics::predict_pending_cards() const {$/;"	f	class:G1Analytics
predict_region_copy_time_ms	g1Policy.cpp	/^double G1Policy::predict_region_copy_time_ms(HeapRegion* hr) const {$/;"	f	class:G1Policy
predict_region_non_copy_time_ms	g1CollectionSet.cpp	/^double G1CollectionSet::predict_region_non_copy_time_ms(HeapRegion* hr) const {$/;"	f	class:G1CollectionSet
predict_region_non_copy_time_ms	g1Policy.cpp	/^double G1Policy::predict_region_non_copy_time_ms(HeapRegion* hr,$/;"	f	class:G1Policy
predict_region_total_time_ms	g1Policy.cpp	/^double G1Policy::predict_region_total_time_ms(HeapRegion* hr, bool for_young_gc) const {$/;"	f	class:G1Policy
predict_remark_time_ms	g1Analytics.cpp	/^double G1Analytics::predict_remark_time_ms() const {$/;"	f	class:G1Analytics
predict_rs_length	g1Analytics.cpp	/^size_t G1Analytics::predict_rs_length() const {$/;"	f	class:G1Analytics
predict_scan_card_num	g1Analytics.cpp	/^size_t G1Analytics::predict_scan_card_num(size_t rs_length, bool for_young_gc) const {$/;"	f	class:G1Analytics
predict_size	g1Analytics.cpp	/^size_t G1Analytics::predict_size(TruncatedSeq const* seq) const {$/;"	f	class:G1Analytics
predict_survivor_regions_evac_time	g1Policy.cpp	/^double G1Policy::predict_survivor_regions_evac_time() const {$/;"	f	class:G1Policy
predict_young_card_merge_to_scan_ratio	g1Analytics.cpp	/^double G1Analytics::predict_young_card_merge_to_scan_ratio() const {$/;"	f	class:G1Analytics
predict_young_other_time_ms	g1Analytics.cpp	/^double G1Analytics::predict_young_other_time_ms(size_t young_num) const {$/;"	f	class:G1Analytics
predict_zero_bounded	g1Analytics.cpp	/^double G1Analytics::predict_zero_bounded(TruncatedSeq const* seq) const {$/;"	f	class:G1Analytics
predict_zero_bounded	g1Predictions.hpp	/^  double predict_zero_bounded(TruncatedSeq const* seq) const {$/;"	f	class:G1Predictions
predictor	g1Policy.hpp	/^  const G1Predictions& predictor() const { return _predictor; }$/;"	f	class:G1Policy
preferred_node_index_for_index	g1NUMA.cpp	/^uint G1NUMA::preferred_node_index_for_index(uint region_index) const {$/;"	f	class:G1NUMA
prefetch_and_push	g1OopClosures.inline.hpp	/^inline void G1ScanClosureBase::prefetch_and_push(T* p, const oop obj) {$/;"	f	class:G1ScanClosureBase
prepare	g1RemSet.cpp	/^  void prepare() {$/;"	f	class:G1RemSetScanState
prepare_collection	g1FullCollector.cpp	/^void G1FullCollector::prepare_collection() {$/;"	f	class:G1FullCollector
prepare_for_compaction	g1FullGCPrepareTask.cpp	/^void G1FullGCPrepareTask::G1CalculatePointersClosure::prepare_for_compaction(HeapRegion* hr) {$/;"	f	class:G1FullGCPrepareTask::G1CalculatePointersClosure
prepare_for_compaction_work	g1FullGCPrepareTask.cpp	/^void G1FullGCPrepareTask::G1CalculatePointersClosure::prepare_for_compaction_work(G1FullGCCompactionPoint* cp,$/;"	f	class:G1FullGCPrepareTask::G1CalculatePointersClosure
prepare_for_full_collection_end	heapRegionManager.hpp	/^  virtual void prepare_for_full_collection_end() {}$/;"	f	class:HeapRegionManager
prepare_for_full_collection_end	heterogeneousHeapRegionManager.cpp	/^void HeterogeneousHeapRegionManager::prepare_for_full_collection_end() {$/;"	f	class:HeterogeneousHeapRegionManager
prepare_for_full_collection_start	heapRegionManager.hpp	/^  virtual void prepare_for_full_collection_start() {}$/;"	f	class:HeapRegionManager
prepare_for_full_collection_start	heterogeneousHeapRegionManager.cpp	/^void HeterogeneousHeapRegionManager::prepare_for_full_collection_start() {$/;"	f	class:HeterogeneousHeapRegionManager
prepare_for_merge_heap_roots	g1RemSet.cpp	/^  void prepare_for_merge_heap_roots() {$/;"	f	class:G1RemSetScanState
prepare_for_scan	g1ConcurrentMark.cpp	/^void G1CMRootMemRegions::prepare_for_scan() {$/;"	f	class:G1CMRootMemRegions
prepare_for_scan_heap_roots	g1RemSet.cpp	/^void G1RemSet::prepare_for_scan_heap_roots() {$/;"	f	class:G1RemSet
prepare_for_verify	g1CollectedHeap.cpp	/^void G1CollectedHeap::prepare_for_verify() {$/;"	f	class:G1CollectedHeap
prepare_for_verify	g1HeapVerifier.cpp	/^void G1HeapVerifier::prepare_for_verify() {$/;"	f	class:G1HeapVerifier
prepare_heap_for_full_collection	g1CollectedHeap.cpp	/^void G1CollectedHeap::prepare_heap_for_full_collection() {$/;"	f	class:G1CollectedHeap
prepare_heap_for_mutators	g1CollectedHeap.cpp	/^void G1CollectedHeap::prepare_heap_for_mutators() {$/;"	f	class:G1CollectedHeap
prepare_region_for_scan	g1RemSet.cpp	/^void G1RemSet::prepare_region_for_scan(HeapRegion* region) {$/;"	f	class:G1RemSet
prepare_serial_compaction	g1FullGCPrepareTask.cpp	/^void G1FullGCPrepareTask::prepare_serial_compaction() {$/;"	f	class:G1FullGCPrepareTask
prepend_to_freelist	g1CollectedHeap.cpp	/^void G1CollectedHeap::prepend_to_freelist(FreeRegionList* list) {$/;"	f	class:G1CollectedHeap
preserve_mark_during_evac_failure	g1CollectedHeap.cpp	/^void G1CollectedHeap::preserve_mark_during_evac_failure(uint worker_id, oop obj, markWord m) {$/;"	f	class:G1CollectedHeap
preserved_mark_set	g1FullCollector.hpp	/^  PreservedMarksSet*       preserved_mark_set() { return &_preserved_marks_set; }$/;"	f	class:G1FullCollector
preserved_stack	g1FullGCMarker.hpp	/^  PreservedMarks*    preserved_stack() { return _preserved_stack; }$/;"	f	class:G1FullGCMarker
pretouch	g1PageBasedVirtualSpace.cpp	/^void G1PageBasedVirtualSpace::pretouch(size_t start_page, size_t size_in_pages, WorkGang* pretouch_gang) {$/;"	f	class:G1PageBasedVirtualSpace
pretouch_internal	g1PageBasedVirtualSpace.cpp	/^void G1PageBasedVirtualSpace::pretouch_internal(size_t start_page, size_t end_page) {$/;"	f	class:G1PageBasedVirtualSpace
prev	heapRegion.hpp	/^  HeapRegion* prev()              { return _prev; }$/;"	f	class:HeapRegion
prev_collection_pause_end_ms	g1Analytics.hpp	/^  double prev_collection_pause_end_ms() const {$/;"	f	class:G1Analytics
prev_mark_bitmap	g1ConcurrentMark.hpp	/^  const G1CMBitMap* const prev_mark_bitmap() const { return _prev_mark_bitmap; }$/;"	f	class:G1ConcurrentMark
prev_top_at_mark_start	heapRegion.hpp	/^  HeapWord* prev_top_at_mark_start() const { return _prev_top_at_mark_start; }$/;"	f	class:HeapRegion
print	g1CollectionSet.cpp	/^void G1CollectionSet::print(outputStream* st) {$/;"	f	class:G1CollectionSet
print	g1FromCardCache.cpp	/^void G1FromCardCache::print(outputStream* out) {$/;"	f	class:G1FromCardCache
print	g1GCPhaseTimes.cpp	/^void G1GCPhaseTimes::print() {$/;"	f	class:G1GCPhaseTimes
print	g1HRPrinter.hpp	/^  static void print(const char* action, HeapRegion* hr) {$/;"	f	class:G1HRPrinter
print	g1HeapTransition.cpp	/^void G1HeapTransition::print() {$/;"	f	class:G1HeapTransition
print	g1IHOPControl.cpp	/^void G1AdaptiveIHOPControl::print() {$/;"	f	class:G1AdaptiveIHOPControl
print	g1IHOPControl.cpp	/^void G1IHOPControl::print() {$/;"	f	class:G1IHOPControl
print	g1InitLogger.cpp	/^void G1InitLogger::print() {$/;"	f	class:G1InitLogger
print	g1PageBasedVirtualSpace.cpp	/^void G1PageBasedVirtualSpace::print() {$/;"	f	class:G1PageBasedVirtualSpace
print	heapRegion.cpp	/^void HeapRegion::print() const { print_on(tty); }$/;"	f	class:HeapRegion
print_age_table	g1Policy.cpp	/^void G1Policy::print_age_table() {$/;"	f	class:G1Policy
print_all_rsets	g1CollectedHeap.cpp	/^void G1CollectedHeap::print_all_rsets() {$/;"	f	class:G1CollectedHeap
print_before_rebuild	g1RemSetTrackingPolicy.cpp	/^static void print_before_rebuild(HeapRegion* r, bool selected_for_rebuild, size_t total_live_bytes, size_t live_bytes) {$/;"	f	file:
print_cards_occupied_info_on	g1RemSetSummary.cpp	/^  void print_cards_occupied_info_on(outputStream * out, size_t total) {$/;"	f	class:RegionTypeCounter
print_code_root_elems_info_on	g1RemSetSummary.cpp	/^  void print_code_root_elems_info_on(outputStream * out, size_t total) {$/;"	f	class:RegionTypeCounter
print_code_root_mem_info_on	g1RemSetSummary.cpp	/^  void print_code_root_mem_info_on(outputStream * out, size_t total) {$/;"	f	class:RegionTypeCounter
print_cset_rsets	g1CollectedHeap.cpp	/^void G1CollectedHeap::print_cset_rsets() {$/;"	f	class:G1CollectedHeap
print_evacuate_initial_collection_set	g1GCPhaseTimes.cpp	/^double G1GCPhaseTimes::print_evacuate_initial_collection_set() const {$/;"	f	class:G1GCPhaseTimes
print_evacuate_optional_collection_set	g1GCPhaseTimes.cpp	/^double G1GCPhaseTimes::print_evacuate_optional_collection_set() const {$/;"	f	class:G1GCPhaseTimes
print_extended_on	g1CollectedHeap.cpp	/^void G1CollectedHeap::print_extended_on(outputStream* st) const {$/;"	f	class:G1CollectedHeap
print_from_card_cache	heapRegionRemSet.hpp	/^  static void print_from_card_cache() {$/;"	f	class:HeapRegionRemSet
print_gc_specific	g1InitLogger.cpp	/^void G1InitLogger::print_gc_specific() {$/;"	f	class:G1InitLogger
print_heap	g1InitLogger.cpp	/^void G1InitLogger::print_heap() {$/;"	f	class:G1InitLogger
print_heap_after_full_collection	g1CollectedHeap.cpp	/^void G1CollectedHeap::print_heap_after_full_collection(G1HeapTransition* heap_transition) {$/;"	f	class:G1CollectedHeap
print_heap_regions	g1CollectedHeap.cpp	/^void G1CollectedHeap::print_heap_regions() const {$/;"	f	class:G1CollectedHeap
print_hrm_post_compaction	g1CollectedHeap.cpp	/^void G1CollectedHeap::print_hrm_post_compaction() {$/;"	f	class:G1CollectedHeap
print_info	g1NUMAStats.cpp	/^void G1NUMAStats::print_info(G1NUMAStats::NodeDataItems phase) {$/;"	f	class:G1NUMAStats
print_location	g1CollectedHeap.cpp	/^bool G1CollectedHeap::print_location(outputStream* st, void* addr) const {$/;"	f	class:G1CollectedHeap
print_md	g1CollectedHeap.cpp	/^void G1CollectedHeap::print_md(){$/;"	f	class:G1CollectedHeap
print_merge_heap_roots_stats	g1RemSet.cpp	/^void G1RemSet::print_merge_heap_roots_stats() {$/;"	f	class:G1RemSet
print_ms_time_info	g1ConcurrentMark.cpp	/^static void print_ms_time_info(const char* prefix, const char* name,$/;"	f	file:
print_mutator_alloc_stat_debug	g1NUMAStats.cpp	/^void G1NUMAStats::print_mutator_alloc_stat_debug() {$/;"	f	class:G1NUMAStats
print_name	c1/g1BarrierSetC1.hpp	/^  virtual void print_name(outputStream* out) const { out->print("G1PostBarrierStub"); }$/;"	f	class:G1PostBarrierStub
print_name	c1/g1BarrierSetC1.hpp	/^  virtual void print_name(outputStream* out) const { out->print("G1PreBarrierStub"); }$/;"	f	class:G1PreBarrierStub
print_object	g1FullGCOopClosures.cpp	/^void G1VerifyOopClosure::print_object(outputStream* out, oop obj) {$/;"	f	class:G1VerifyOopClosure
print_object	heapRegion.cpp	/^  void print_object(outputStream* out, oop obj) {$/;"	f	class:G1VerificationClosure
print_on	g1BlockOffsetTable.cpp	/^void G1BlockOffsetTablePart::print_on(outputStream* out) {$/;"	f	class:G1BlockOffsetTablePart
print_on	g1CollectedHeap.cpp	/^void G1CollectedHeap::print_on(outputStream* st) const {$/;"	f	class:G1CollectedHeap
print_on	g1PageBasedVirtualSpace.cpp	/^void G1PageBasedVirtualSpace::print_on(outputStream* out) {$/;"	f	class:G1PageBasedVirtualSpace
print_on	g1RemSetSummary.cpp	/^void G1RemSetSummary::print_on(outputStream* out) {$/;"	f	class:G1RemSetSummary
print_on	heapRegion.cpp	/^void HeapRegion::print_on(outputStream* st) const {$/;"	f	class:HeapRegion
print_on	heapRegionSet.cpp	/^void HeapRegionSetBase::print_on(outputStream* out, bool print_contents) {$/;"	f	class:HeapRegionSetBase
print_on_error	g1CollectedHeap.cpp	/^void G1CollectedHeap::print_on_error(outputStream* st) const {$/;"	f	class:G1CollectedHeap
print_on_error	g1ConcurrentMark.cpp	/^void G1ConcurrentMark::print_on_error(outputStream* st) const {$/;"	f	class:G1ConcurrentMark
print_other	g1GCPhaseTimes.cpp	/^void G1GCPhaseTimes::print_other(double accounted_ms) const {$/;"	f	class:G1GCPhaseTimes
print_periodic_summary_info	g1RemSet.cpp	/^void G1RemSet::print_periodic_summary_info(const char* header, uint period_count) {$/;"	f	class:G1RemSet
print_phases	g1Policy.cpp	/^void G1Policy::print_phases() {$/;"	f	class:G1Policy
print_post_evacuate_collection_set	g1GCPhaseTimes.cpp	/^double G1GCPhaseTimes::print_post_evacuate_collection_set() const {$/;"	f	class:G1GCPhaseTimes
print_pre_evacuate_collection_set	g1GCPhaseTimes.cpp	/^double G1GCPhaseTimes::print_pre_evacuate_collection_set() const {$/;"	f	class:G1GCPhaseTimes
print_regions_on	g1CollectedHeap.cpp	/^void G1CollectedHeap::print_regions_on(outputStream* st) const {$/;"	f	class:G1CollectedHeap
print_rs_mem_info_on	g1RemSetSummary.cpp	/^  void print_rs_mem_info_on(outputStream * out, size_t total) {$/;"	f	class:RegionTypeCounter
print_statistics	g1NUMA.cpp	/^void G1NUMA::print_statistics() const {$/;"	f	class:G1NUMA
print_statistics	g1NUMAStats.cpp	/^void G1NUMAStats::print_statistics() {$/;"	f	class:G1NUMAStats
print_statistics	g1StringDedupStat.cpp	/^void G1StringDedupStat::print_statistics(bool total) const {$/;"	f	class:G1StringDedupStat
print_statistics_impl	g1StringDedupQueue.cpp	/^void G1StringDedupQueue::print_statistics_impl() {$/;"	f	class:G1StringDedupQueue
print_stats	g1ConcurrentMark.cpp	/^void G1CMTask::print_stats() {$/;"	f	class:G1CMTask
print_stats	g1ConcurrentMark.cpp	/^void G1ConcurrentMark::print_stats() {$/;"	f	class:G1ConcurrentMark
print_summary_info	g1ConcurrentMark.cpp	/^void G1ConcurrentMark::print_summary_info() {$/;"	f	class:G1ConcurrentMark
print_summary_info	g1RemSet.cpp	/^void G1RemSet::print_summary_info() {$/;"	f	class:G1RemSet
print_summary_on	g1RemSetSummary.cpp	/^  void print_summary_on(outputStream* out) {$/;"	f	class:HRRSStatsIter
print_taskqueue_stats	g1CollectedHeap.cpp	/^void G1CollectedHeap::print_taskqueue_stats() const {$/;"	f	class:G1CollectedHeap
print_taskqueue_stats_hdr	g1CollectedHeap.cpp	/^void G1CollectedHeap::print_taskqueue_stats_hdr(outputStream* const st) {$/;"	f	class:G1CollectedHeap
print_tracing_info	g1CollectedHeap.cpp	/^void G1CollectedHeap::print_tracing_info() const {$/;"	f	class:G1CollectedHeap
print_workers	g1InitLogger.cpp	/^void G1InitLogger::print_workers() {$/;"	f	class:G1InitLogger
process_all_roots	g1RootProcessor.cpp	/^void G1RootProcessor::process_all_roots(OopClosure* oops,$/;"	f	class:G1RootProcessor
process_array_slice	g1ConcurrentMarkObjArrayProcessor.cpp	/^size_t G1CMObjArrayProcessor::process_array_slice(objArrayOop obj, HeapWord* start_from, size_t remaining) {$/;"	f	class:G1CMObjArrayProcessor
process_cards_threshold	g1DirtyCardQueue.hpp	/^  size_t process_cards_threshold() const {$/;"	f	class:G1DirtyCardQueueSet
process_code_cache_roots	g1RootProcessor.cpp	/^void G1RootProcessor::process_code_cache_roots(CodeBlobClosure* code_closure,$/;"	f	class:G1RootProcessor
process_discovered_references	g1CollectedHeap.cpp	/^void G1CollectedHeap::process_discovered_references(G1ParScanThreadStateSet* per_thread_states) {$/;"	f	class:G1CollectedHeap
process_grey_task_entry	g1ConcurrentMark.inline.hpp	/^inline void G1CMTask::process_grey_task_entry(G1TaskQueueEntry task_entry) {$/;"	f	class:G1CMTask
process_java_roots	g1RootProcessor.cpp	/^void G1RootProcessor::process_java_roots(G1RootClosures* closures,$/;"	f	class:G1RootProcessor
process_obj	g1ConcurrentMarkObjArrayProcessor.cpp	/^size_t G1CMObjArrayProcessor::process_obj(oop obj) {$/;"	f	class:G1CMObjArrayProcessor
process_slice	g1ConcurrentMarkObjArrayProcessor.cpp	/^size_t G1CMObjArrayProcessor::process_slice(HeapWord* slice) {$/;"	f	class:G1CMObjArrayProcessor
process_strong_roots	g1RootProcessor.cpp	/^void G1RootProcessor::process_strong_roots(OopClosure* oops,$/;"	f	class:G1RootProcessor
process_vm_roots	g1RootProcessor.cpp	/^void G1RootProcessor::process_vm_roots(G1RootClosures* closures,$/;"	f	class:G1RootProcessor
ptr_2_card_num	g1CardCounts.hpp	/^  size_t ptr_2_card_num(const CardValue* card_ptr) {$/;"	f	class:G1CardCounts
purge	g1CodeCacheRemSet.cpp	/^void G1CodeRootSet::purge() {$/;"	f	class:G1CodeRootSet
purge	g1CodeCacheRemSet.cpp	/^void G1CodeRootSetTable::purge() {$/;"	f	class:G1CodeRootSetTable
purge_code_root_memory	g1CollectedHeap.cpp	/^void G1CollectedHeap::purge_code_root_memory() {$/;"	f	class:G1CollectedHeap
purge_list_append	g1CodeCacheRemSet.cpp	/^void G1CodeRootSetTable::purge_list_append(G1CodeRootSetTable* table) {$/;"	f	class:G1CodeRootSetTable
push	g1ConcurrentMark.inline.hpp	/^inline void G1CMTask::push(G1TaskQueueEntry task_entry) {$/;"	f	class:G1CMTask
push	g1DirtyCardQueue.hpp	/^    void push(BufferNode& node) { append(node, node); }$/;"	f	class:G1DirtyCardQueueSet::Queue
push	g1OopStarChunkedList.inline.hpp	/^inline void G1OopStarChunkedList::push(ChunkedList<T*, mtGC>** field, T* p) {$/;"	f	class:G1OopStarChunkedList
push_array_slice	g1ConcurrentMarkObjArrayProcessor.cpp	/^void G1CMObjArrayProcessor::push_array_slice(HeapWord* what) {$/;"	f	class:G1CMObjArrayProcessor
push_impl	g1StringDedupQueue.cpp	/^void G1StringDedupQueue::push_impl(uint worker_id, oop java_string) {$/;"	f	class:G1StringDedupQueue
push_objarray	g1FullGCMarker.inline.hpp	/^inline void G1FullGCMarker::push_objarray(oop obj, size_t index) {$/;"	f	class:G1FullGCMarker
push_on_queue	g1ParScanThreadState.inline.hpp	/^inline void G1ParScanThreadState::push_on_queue(ScannerTask task) {$/;"	f	class:G1ParScanThreadState
push_oop	g1OopStarChunkedList.inline.hpp	/^inline void G1OopStarChunkedList::push_oop(narrowOop* p) {$/;"	f	class:G1OopStarChunkedList
push_oop	g1OopStarChunkedList.inline.hpp	/^inline void G1OopStarChunkedList::push_oop(oop* p) {$/;"	f	class:G1OopStarChunkedList
push_root	g1OopStarChunkedList.inline.hpp	/^inline void G1OopStarChunkedList::push_root(narrowOop* p) {$/;"	f	class:G1OopStarChunkedList
push_root	g1OopStarChunkedList.inline.hpp	/^inline void G1OopStarChunkedList::push_root(oop* p) {$/;"	f	class:G1OopStarChunkedList
queue_is_empty	g1ParScanThreadState.hpp	/^  bool queue_is_empty() const { return _task_queue->is_empty(); }$/;"	f	class:G1ParScanThreadState
queues	g1CollectedHeap.hpp	/^  G1ScannerTasksQueueSet* queues()         { return _queues; }$/;"	f	class:G1ParEvacuateFollowersClosure
r_ind	sparsePRT.hpp	/^  RegionIdx_t r_ind() const { return _region_ind; }$/;"	f	class:SparsePRTEntry
rate	g1NUMAStats.cpp	/^double G1NUMAStats::Stat::rate() const {$/;"	f	class:G1NUMAStats::Stat
reached_limit	g1ConcurrentMark.cpp	/^void G1CMTask::reached_limit() {$/;"	f	class:G1CMTask
reasonable_max_memory_for_young	g1Arguments.cpp	/^size_t G1Arguments::reasonable_max_memory_for_young() {$/;"	f	class:G1Arguments
rebuild_free_list	heapRegionManager.cpp	/^void HeapRegionManager::rebuild_free_list(WorkGang* workers) {$/;"	f	class:HeapRegionManager
rebuild_region_sets	g1CollectedHeap.cpp	/^void G1CollectedHeap::rebuild_region_sets(bool free_list_only) {$/;"	f	class:G1CollectedHeap
rebuild_rem_set	g1RemSet.cpp	/^void G1RemSet::rebuild_rem_set(G1ConcurrentMark* cm,$/;"	f	class:G1RemSet
rebuild_rem_set_concurrently	g1ConcurrentMark.cpp	/^void G1ConcurrentMark::rebuild_rem_set_concurrently() {$/;"	f	class:G1ConcurrentMark
rebuild_rem_set_in_region	g1RemSet.cpp	/^    size_t rebuild_rem_set_in_region(const G1CMBitMap* const bitmap,$/;"	f	class:G1RebuildRemSetTask::G1RebuildRemSetHeapRegionClosure	file:
rebuild_strong_code_roots	g1CollectedHeap.cpp	/^void G1CollectedHeap::rebuild_strong_code_roots() {$/;"	f	class:G1CollectedHeap
recalculate_limits	g1ConcurrentMark.cpp	/^void G1CMTask::recalculate_limits() {$/;"	f	class:G1CMTask
recalculate_min_max_young_length	g1YoungGenSizer.cpp	/^void G1YoungGenSizer::recalculate_min_max_young_length(uint number_of_heap_regions, uint* min_young_length, uint* max_young_length) {$/;"	f	class:G1YoungGenSizer
recalculate_sizes	g1MonitoringSupport.cpp	/^void G1MonitoringSupport::recalculate_sizes() {$/;"	f	class:G1MonitoringSupport
recalculate_used	g1CollectedHeap.cpp	/^size_t G1CollectedHeap::recalculate_used() const {$/;"	f	class:G1CollectedHeap
reclaim_empty_regions	g1ConcurrentMark.cpp	/^void G1ConcurrentMark::reclaim_empty_regions() {$/;"	f	class:G1ConcurrentMark
reclaimable_bytes	heapRegion.hpp	/^  size_t reclaimable_bytes() {$/;"	f	class:HeapRegion
reclaimable_bytes_added	g1CollectionSetChooser.cpp	/^    size_t reclaimable_bytes_added() const { return _reclaimable_bytes_added; }$/;"	f	class:G1BuildCandidateRegionsTask::G1BuildCandidateRegionsClosure
reclaimable_bytes_percent	g1Policy.cpp	/^double G1Policy::reclaimable_bytes_percent(size_t reclaimable_bytes) const {$/;"	f	class:G1Policy
record_age_table	g1Policy.hpp	/^  void record_age_table(AgeTable* age_table) {$/;"	f	class:G1Policy
record_clear_claimed_marks_time_ms	g1GCPhaseTimes.hpp	/^  void record_clear_claimed_marks_time_ms(double recorded_clear_claimed_marks_time_ms) {$/;"	f	class:G1GCPhaseTimes
record_clear_ct_time	g1GCPhaseTimes.hpp	/^  void record_clear_ct_time(double ms) {$/;"	f	class:G1GCPhaseTimes
record_collection_pause_end	g1HeterogeneousHeapPolicy.cpp	/^void G1HeterogeneousHeapPolicy::record_collection_pause_end(double pause_time_ms) {$/;"	f	class:G1HeterogeneousHeapPolicy
record_collection_pause_end	g1Policy.cpp	/^void G1Policy::record_collection_pause_end(double pause_time_ms) {$/;"	f	class:G1Policy
record_collection_pause_humongous_allocation	g1OldGenAllocationTracker.hpp	/^  void record_collection_pause_humongous_allocation(size_t bytes) {$/;"	f	class:G1OldGenAllocationTracker
record_collection_pause_start	g1Policy.cpp	/^void G1Policy::record_collection_pause_start(double start_time_sec) {$/;"	f	class:G1Policy
record_concatenate_dirty_card_logs_time_ms	g1GCPhaseTimes.hpp	/^  void record_concatenate_dirty_card_logs_time_ms(double ms) {$/;"	f	class:G1GCPhaseTimes
record_concurrent_mark_cleanup_end	g1Policy.cpp	/^void G1Policy::record_concurrent_mark_cleanup_end() {$/;"	f	class:G1Policy
record_concurrent_mark_cleanup_start	g1Policy.cpp	/^void G1Policy::record_concurrent_mark_cleanup_start() {$/;"	f	class:G1Policy
record_concurrent_mark_init_end	g1Policy.cpp	/^void G1Policy::record_concurrent_mark_init_end(double mark_init_elapsed_time_ms) {$/;"	f	class:G1Policy
record_concurrent_mark_remark_end	g1Policy.cpp	/^void G1Policy::record_concurrent_mark_remark_end() {$/;"	f	class:G1Policy
record_concurrent_mark_remark_start	g1Policy.cpp	/^void G1Policy::record_concurrent_mark_remark_start() {$/;"	f	class:G1Policy
record_concurrent_refinement_stats	g1Policy.cpp	/^void G1Policy::record_concurrent_refinement_stats() {$/;"	f	class:G1Policy
record_concurrent_start_end	g1ConcurrentStartToMixedTimeTracker.hpp	/^  void record_concurrent_start_end(double end_time) {$/;"	f	class:G1ConcurrentStartToMixedTimeTracker
record_cur_collection_start_sec	g1GCPhaseTimes.hpp	/^  void record_cur_collection_start_sec(double time_ms) {$/;"	f	class:G1GCPhaseTimes
record_derived_pointer_table_update_time	g1GCPhaseTimes.hpp	/^  void record_derived_pointer_table_update_time(double ms) {$/;"	f	class:G1GCPhaseTimes
record_detached_refinement_stats	g1DirtyCardQueue.cpp	/^void G1DirtyCardQueueSet::record_detached_refinement_stats(G1ConcurrentRefineStats* stats) {$/;"	f	class:G1DirtyCardQueueSet
record_end_time	g1ConcurrentMark.hpp	/^  void record_end_time() {$/;"	f	class:G1CMTask
record_evac_fail_recalc_used_time	g1GCPhaseTimes.hpp	/^  void record_evac_fail_recalc_used_time(double ms) {$/;"	f	class:G1GCPhaseTimes
record_evac_fail_remove_self_forwards	g1GCPhaseTimes.hpp	/^  void record_evac_fail_remove_self_forwards(double ms) {$/;"	f	class:G1GCPhaseTimes
record_expand_heap_time	g1GCPhaseTimes.hpp	/^  void record_expand_heap_time(double ms) {$/;"	f	class:G1GCPhaseTimes
record_fast_reclaim_humongous_time_ms	g1GCPhaseTimes.hpp	/^  void record_fast_reclaim_humongous_time_ms(double value, size_t reclaimed) {$/;"	f	class:G1GCPhaseTimes
record_full_collection_end	g1HeterogeneousHeapPolicy.cpp	/^void G1HeterogeneousHeapPolicy::record_full_collection_end() {$/;"	f	class:G1HeterogeneousHeapPolicy
record_full_collection_end	g1Policy.cpp	/^void G1Policy::record_full_collection_end() {$/;"	f	class:G1Policy
record_full_collection_start	g1Policy.cpp	/^void G1Policy::record_full_collection_start() {$/;"	f	class:G1Policy
record_initial_evac_time	g1GCPhaseTimes.hpp	/^  void record_initial_evac_time(double ms) {$/;"	f	class:G1GCPhaseTimes
record_merge_heap_roots_time	g1GCPhaseTimes.hpp	/^  void record_merge_heap_roots_time(double ms) {$/;"	f	class:G1GCPhaseTimes
record_mixed_gc_start	g1ConcurrentStartToMixedTimeTracker.hpp	/^  void record_mixed_gc_start(double start_time) {$/;"	f	class:G1ConcurrentStartToMixedTimeTracker
record_new_heap_size	g1Policy.cpp	/^void G1Policy::record_new_heap_size(uint new_number_of_regions) {$/;"	f	class:G1Policy
record_non_young_cset_choice_time_ms	g1GCPhaseTimes.hpp	/^  void record_non_young_cset_choice_time_ms(double time_ms) {$/;"	f	class:G1GCPhaseTimes
record_obj_copy_mem_stats	g1CollectedHeap.cpp	/^void G1CollectedHeap::record_obj_copy_mem_stats() {$/;"	f	class:G1CollectedHeap
record_or_add_code_root_fixup_time	g1GCPhaseTimes.hpp	/^  void record_or_add_code_root_fixup_time(double ms) {$/;"	f	class:G1GCPhaseTimes
record_or_add_optional_evac_time	g1GCPhaseTimes.hpp	/^  void record_or_add_optional_evac_time(double ms) {$/;"	f	class:G1GCPhaseTimes
record_or_add_optional_merge_heap_roots_time	g1GCPhaseTimes.hpp	/^  void record_or_add_optional_merge_heap_roots_time(double ms) {$/;"	f	class:G1GCPhaseTimes
record_or_add_optional_prepare_merge_heap_roots_time	g1GCPhaseTimes.hpp	/^  void record_or_add_optional_prepare_merge_heap_roots_time(double ms) {$/;"	f	class:G1GCPhaseTimes
record_or_add_thread_work_item	g1GCPhaseTimes.cpp	/^void G1GCPhaseTimes::record_or_add_thread_work_item(GCParPhases phase, uint worker_id, size_t count, uint index) {$/;"	f	class:G1GCPhaseTimes
record_or_add_time_secs	g1GCPhaseTimes.cpp	/^void G1GCPhaseTimes::record_or_add_time_secs(GCParPhases phase, uint worker_id, double secs) {$/;"	f	class:G1GCPhaseTimes
record_pause	g1Policy.cpp	/^void G1Policy::record_pause(PauseKind kind, double start, double end) {$/;"	f	class:G1Policy
record_paused_buffer	g1DirtyCardQueue.cpp	/^void G1DirtyCardQueueSet::record_paused_buffer(BufferNode* node) {$/;"	f	class:G1DirtyCardQueueSet
record_prepare_heap_roots_time_ms	g1GCPhaseTimes.hpp	/^  void record_prepare_heap_roots_time_ms(double recorded_prepare_heap_roots_time_ms) {$/;"	f	class:G1GCPhaseTimes
record_prepare_merge_heap_roots_time	g1GCPhaseTimes.hpp	/^  void record_prepare_merge_heap_roots_time(double ms) {$/;"	f	class:G1GCPhaseTimes
record_prepare_tlab_time_ms	g1GCPhaseTimes.hpp	/^  void record_prepare_tlab_time_ms(double ms) {$/;"	f	class:G1GCPhaseTimes
record_preserve_cm_referents_time_ms	g1GCPhaseTimes.hpp	/^  void record_preserve_cm_referents_time_ms(double time_ms) {$/;"	f	class:G1GCPhaseTimes
record_redirty_logged_cards_time_ms	g1GCPhaseTimes.hpp	/^  void record_redirty_logged_cards_time_ms(double time_ms) {$/;"	f	class:G1GCPhaseTimes
record_ref_proc_time	g1GCPhaseTimes.hpp	/^  void record_ref_proc_time(double ms) {$/;"	f	class:G1GCPhaseTimes
record_register_regions	g1GCPhaseTimes.hpp	/^  void record_register_regions(double time_ms, size_t total, size_t candidates) {$/;"	f	class:G1GCPhaseTimes
record_resize_tlab_time_ms	g1GCPhaseTimes.hpp	/^  void record_resize_tlab_time_ms(double ms) {$/;"	f	class:G1GCPhaseTimes
record_root_region_scan_wait_time	g1GCPhaseTimes.hpp	/^  void record_root_region_scan_wait_time(double time_ms) {$/;"	f	class:G1GCPhaseTimes
record_rs_length	g1Policy.hpp	/^  void record_rs_length(size_t rs_length) {$/;"	f	class:G1Policy
record_serial_free_cset_time_ms	g1GCPhaseTimes.hpp	/^  void record_serial_free_cset_time_ms(double time_ms) {$/;"	f	class:G1GCPhaseTimes
record_serial_rebuild_freelist_time_ms	g1GCPhaseTimes.hpp	/^  void record_serial_rebuild_freelist_time_ms(double time_ms) {$/;"	f	class:G1GCPhaseTimes
record_start_new_cset_time_ms	g1GCPhaseTimes.hpp	/^  void record_start_new_cset_time_ms(double time_ms) {$/;"	f	class:G1GCPhaseTimes
record_start_time	g1ConcurrentMark.hpp	/^  void record_start_time() {$/;"	f	class:G1CMTask
record_string_deduplication_time	g1GCPhaseTimes.hpp	/^  void record_string_deduplication_time(double ms) {$/;"	f	class:G1GCPhaseTimes
record_strong_code_root_purge_time	g1GCPhaseTimes.hpp	/^  void record_strong_code_root_purge_time(double ms) {$/;"	f	class:G1GCPhaseTimes
record_surv_words_in_group	heapRegion.inline.hpp	/^inline void HeapRegion::record_surv_words_in_group(size_t words_survived) {$/;"	f	class:HeapRegion
record_surviving_words	g1SurvRateGroup.cpp	/^void G1SurvRateGroup::record_surviving_words(int age_in_group, size_t surv_words) {$/;"	f	class:G1SurvRateGroup
record_thread_work_item	g1GCPhaseTimes.cpp	/^void G1GCPhaseTimes::record_thread_work_item(GCParPhases phase, uint worker_id, size_t count, uint index) {$/;"	f	class:G1GCPhaseTimes
record_time_secs	g1GCPhaseTimes.cpp	/^void G1GCPhaseTimes::record_time_secs(GCParPhases phase, uint worker_id, double secs) {$/;"	f	class:G1GCPhaseTimes
record_total_free_cset_time_ms	g1GCPhaseTimes.hpp	/^  void record_total_free_cset_time_ms(double time_ms) {$/;"	f	class:G1GCPhaseTimes
record_total_rebuild_freelist_time_ms	g1GCPhaseTimes.hpp	/^  void record_total_rebuild_freelist_time_ms(double time_ms) {$/;"	f	class:G1GCPhaseTimes
record_unused_optional_region	g1ParScanThreadState.cpp	/^void G1ParScanThreadStateSet::record_unused_optional_region(HeapRegion* hr) {$/;"	f	class:G1ParScanThreadStateSet
record_verify_after_time_ms	g1GCPhaseTimes.hpp	/^  void record_verify_after_time_ms(double time_ms) {$/;"	f	class:G1GCPhaseTimes
record_verify_before_time_ms	g1GCPhaseTimes.hpp	/^  void record_verify_before_time_ms(double time_ms) {$/;"	f	class:G1GCPhaseTimes
record_young_cset_choice_time_ms	g1GCPhaseTimes.hpp	/^  void record_young_cset_choice_time_ms(double time_ms) {$/;"	f	class:G1GCPhaseTimes
recorded_rs_length	g1CollectionSet.hpp	/^  size_t recorded_rs_length() { return _recorded_rs_length; }$/;"	f	class:G1CollectionSet
red_zone	g1ConcurrentRefine.hpp	/^  size_t red_zone() const        { return _red_zone;    }$/;"	f	class:G1ConcurrentRefine
redirty_cards_queue	g1ParScanThreadState.hpp	/^  G1RedirtyCardsQueue& redirty_cards_queue()     { return _rdcq; }$/;"	f	class:G1ParScanThreadState
redirty_logged_cards	g1CollectedHeap.cpp	/^void G1CollectedHeap::redirty_logged_cards(G1RedirtyCardsQueueSet* rdcqs) {$/;"	f	class:G1CollectedHeap
redirty_unrefined_cards	g1DirtyCardQueue.cpp	/^  void redirty_unrefined_cards(size_t start) {$/;"	f	class:G1RefineBufferedCards	file:
ref_phase_times	g1GCPhaseTimes.hpp	/^  ReferenceProcessorPhaseTimes* ref_phase_times() { return &_ref_phase_times; }$/;"	f	class:G1GCPhaseTimes
ref_processing_init	g1CollectedHeap.cpp	/^void G1CollectedHeap::ref_processing_init() {$/;"	f	class:G1CollectedHeap
ref_processor_cm	g1CollectedHeap.hpp	/^  ReferenceProcessor* ref_processor_cm() const { return _ref_processor_cm; }$/;"	f	class:G1CollectedHeap
ref_processor_stw	g1CollectedHeap.hpp	/^  ReferenceProcessor* ref_processor_stw() const { return _ref_processor_stw; }$/;"	f	class:G1CollectedHeap
reference_iteration_mode	g1FullGCOopClosures.hpp	/^  virtual ReferenceIterationMode reference_iteration_mode() { return DO_FIELDS; }$/;"	f	class:G1AdjustClosure
reference_iteration_mode	g1OopClosures.hpp	/^  virtual ReferenceIterationMode reference_iteration_mode() { return DO_DISCOVERED_AND_DISCOVERY; }$/;"	f	class:G1ScanEvacuatedObjClosure
reference_iteration_mode	g1OopClosures.hpp	/^  virtual ReferenceIterationMode reference_iteration_mode() { return DO_FIELDS; }$/;"	f	class:G1ConcurrentRefineOopClosure
reference_iteration_mode	g1OopClosures.hpp	/^  virtual ReferenceIterationMode reference_iteration_mode() { return DO_FIELDS; }$/;"	f	class:G1RebuildRemSetClosure
reference_iteration_mode	g1OopClosures.hpp	/^  virtual ReferenceIterationMode reference_iteration_mode() { return DO_FIELDS; }$/;"	f	class:G1ScanClosureBase
reference_processor	g1FullCollector.cpp	/^ReferenceProcessor* G1FullCollector::reference_processor() {$/;"	f	class:G1FullCollector
refine	g1DirtyCardQueue.cpp	/^  bool refine() {$/;"	f	class:G1RefineBufferedCards
refine_buffer	g1DirtyCardQueue.cpp	/^bool G1DirtyCardQueueSet::refine_buffer(BufferNode* node,$/;"	f	class:G1DirtyCardQueueSet
refine_card_concurrently	g1RemSet.cpp	/^void G1RemSet::refine_card_concurrently(CardValue* const card_ptr,$/;"	f	class:G1RemSet
refine_cleaned_cards	g1DirtyCardQueue.cpp	/^  bool refine_cleaned_cards(size_t start_index) {$/;"	f	class:G1RefineBufferedCards	file:
refine_completed_buffer_concurrently	g1DirtyCardQueue.cpp	/^bool G1DirtyCardQueueSet::refine_completed_buffer_concurrently(uint worker_id,$/;"	f	class:G1DirtyCardQueueSet
refined_cards	g1ConcurrentRefineStats.hpp	/^  size_t refined_cards() const { return _refined_cards; }$/;"	f	class:G1ConcurrentRefineStats
refinement_stats	g1ConcurrentRefineThread.hpp	/^  G1ConcurrentRefineStats* refinement_stats() const {$/;"	f	class:G1ConcurrentRefineThread
refinement_stats	g1DirtyCardQueue.hpp	/^  G1ConcurrentRefineStats* refinement_stats() const {$/;"	f	class:G1DirtyCardQueue
refinement_time	g1ConcurrentRefineStats.hpp	/^  Tickspan refinement_time() const { return _refinement_time; }$/;"	f	class:G1ConcurrentRefineStats
refs_reached_period	g1ConcurrentMark.hpp	/^    refs_reached_period           = 1024,$/;"	e	enum:G1CMTask::PrivateConstants
region_at	g1CollectedHeap.inline.hpp	/^inline HeapRegion* G1CollectedHeap::region_at(uint index) const { return _hrm->at(index); }$/;"	f	class:G1CollectedHeap
region_at_or_null	g1CollectedHeap.inline.hpp	/^inline HeapRegion* G1CollectedHeap::region_at_or_null(uint index) const { return _hrm->at_or_null(index); }$/;"	f	class:G1CollectedHeap
region_attr	g1CollectedHeap.inline.hpp	/^G1HeapRegionAttr G1CollectedHeap::region_attr(const void* addr) const {$/;"	f	class:G1CollectedHeap
region_attr	g1CollectedHeap.inline.hpp	/^G1HeapRegionAttr G1CollectedHeap::region_attr(uint idx) const {$/;"	f	class:G1CollectedHeap
region_end_waste	g1EvacStats.hpp	/^  size_t region_end_waste() const { return _region_end_waste; }$/;"	f	class:G1EvacStats
region_for_card	g1CollectedHeap.cpp	/^  HeapRegion* region_for_card(CardValue* card_ptr) const {$/;"	f	class:RedirtyLoggedCardTableEntryClosure	file:
region_idx_for	g1CardTable.inline.hpp	/^inline uint G1CardTable::region_idx_for(CardValue* p) {$/;"	f	class:G1CardTable
region_idx_to_page_idx	g1RegionToSpaceMapper.cpp	/^  size_t region_idx_to_page_idx(uint region_idx) const {$/;"	f	class:G1RegionsSmallerThanCommitSizeMapper	file:
region_length	g1CollectionSet.hpp	/^  uint region_length() const       { return young_region_length() +$/;"	f	class:G1CollectionSet
region_occupancy_low_enough_for_evac	g1CollectionSetChooser.hpp	/^  static bool region_occupancy_low_enough_for_evac(size_t live_bytes) {$/;"	f	class:G1CollectionSetChooser
region_size	g1NUMA.cpp	/^size_t G1NUMA::region_size() const {$/;"	f	class:G1NUMA
region_type_t	g1Allocator.hpp	/^  typedef G1HeapRegionAttr::region_type_t region_type_t;$/;"	t	class:G1PLABAllocator
region_type_t	g1HeapRegionAttr.hpp	/^  typedef int8_t region_type_t;$/;"	t	struct:G1HeapRegionAttr
regions	g1FullGCCompactionPoint.cpp	/^GrowableArray<HeapRegion*>* G1FullGCCompactionPoint::regions() {$/;"	f	class:G1FullGCCompactionPoint
regions	g1SurvivorRegions.hpp	/^  const GrowableArray<HeapRegion*>* regions() const {$/;"	f	class:G1SurvivorRegions
regions_added	g1CollectionSetChooser.cpp	/^    uint regions_added() const { return _regions_added; }$/;"	f	class:G1BuildCandidateRegionsTask::G1BuildCandidateRegionsClosure
regions_filled	g1EvacStats.hpp	/^  uint regions_filled() const { return _regions_filled; }$/;"	f	class:G1EvacStats
regions_freed	g1EvacuationInfo.hpp	/^  uint   regions_freed()             { return _regions_freed; }$/;"	f	class:G1EvacuationInfo
regions_on_node	g1EdenRegions.hpp	/^  uint regions_on_node(uint node_index) const { return _regions_on_node.count(node_index); }$/;"	f	class:G1EdenRegions
regions_on_node	g1SurvivorRegions.cpp	/^uint G1SurvivorRegions::regions_on_node(uint node_index) const {$/;"	f	class:G1SurvivorRegions
register_humongous_region_with_region_attr	g1CollectedHeap.inline.hpp	/^void G1CollectedHeap::register_humongous_region_with_region_attr(uint index) {$/;"	f	class:G1CollectedHeap
register_jfr_type_constants	g1Trace.cpp	/^static void register_jfr_type_constants() {$/;"	f	file:
register_nmethod	g1CollectedHeap.cpp	/^void G1CollectedHeap::register_nmethod(nmethod* nm) {$/;"	f	class:G1CollectedHeap
register_old_region_with_region_attr	g1CollectedHeap.inline.hpp	/^void G1CollectedHeap::register_old_region_with_region_attr(HeapRegion* r) {$/;"	f	class:G1CollectedHeap
register_optional_region_with_region_attr	g1CollectedHeap.inline.hpp	/^void G1CollectedHeap::register_optional_region_with_region_attr(HeapRegion* r) {$/;"	f	class:G1CollectedHeap
register_region_with_region_attr	g1CollectedHeap.inline.hpp	/^void G1CollectedHeap::register_region_with_region_attr(HeapRegion* r) {$/;"	f	class:G1CollectedHeap
register_young_region_with_region_attr	g1CollectedHeap.hpp	/^  void register_young_region_with_region_attr(HeapRegion* r) {$/;"	f	class:G1CollectedHeap
regular_clock_call	g1ConcurrentMark.cpp	/^bool G1CMTask::regular_clock_call() {$/;"	f	class:G1CMTask
relabel_as_old	heapRegionType.hpp	/^  bool relabel_as_old() {$/;"	f	class:HeapRegionType
release	g1AllocRegion.cpp	/^HeapRegion* G1AllocRegion::release() {$/;"	f	class:G1AllocRegion
release	g1AllocRegion.cpp	/^HeapRegion* MutatorAllocRegion::release() {$/;"	f	class:MutatorAllocRegion
release	g1AllocRegion.cpp	/^HeapRegion* OldGCAllocRegion::release() {$/;"	f	class:OldGCAllocRegion
release_gc_alloc_regions	g1Allocator.cpp	/^void G1Allocator::release_gc_alloc_regions(G1EvacuationInfo& evacuation_info) {$/;"	f	class:G1Allocator
release_mutator_alloc_regions	g1Allocator.cpp	/^void G1Allocator::release_mutator_alloc_regions() {$/;"	f	class:G1Allocator
release_par_id	g1FreeIdSet.cpp	/^void G1FreeIdSet::release_par_id(uint id) {$/;"	f	class:G1FreeIdSet
rem_set	g1CollectedHeap.hpp	/^  G1RemSet* rem_set() const { return _rem_set; }$/;"	f	class:G1CollectedHeap
rem_set	heapRegion.hpp	/^  HeapRegionRemSet* rem_set() const {$/;"	f	class:HeapRegion
rem_set_opt_root_scan_time	g1RemSet.cpp	/^  Tickspan rem_set_opt_root_scan_time() const { return _rem_set_opt_root_scan_time; }$/;"	f	class:G1ScanCollectionSetRegionClosure
rem_set_opt_trim_partially_time	g1RemSet.cpp	/^  Tickspan rem_set_opt_trim_partially_time() const { return _rem_set_opt_trim_partially_time; }$/;"	f	class:G1ScanCollectionSetRegionClosure
rem_set_root_scan_time	g1RemSet.cpp	/^  Tickspan rem_set_root_scan_time() const { return _rem_set_root_scan_time; }$/;"	f	class:G1ScanHRForRegionClosure
rem_set_trim_partially_time	g1RemSet.cpp	/^  Tickspan rem_set_trim_partially_time() const { return _rem_set_trim_partially_time; }$/;"	f	class:G1ScanHRForRegionClosure
remaining_reclaimable_bytes	g1CollectionSetCandidates.hpp	/^  size_t remaining_reclaimable_bytes() { return _remaining_reclaimable_bytes; }$/;"	f	class:G1CollectionSetCandidates
remark	g1ConcurrentMark.cpp	/^void G1ConcurrentMark::remark() {$/;"	f	class:G1ConcurrentMark
remember_if_interesting	g1RemSet.cpp	/^    bool remember_if_interesting(uint const region_idx) {$/;"	f	class:G1MergeHeapRootsTask::G1MergeCardSetClosure	file:
remember_reference_into_optional_region	g1ParScanThreadState.inline.hpp	/^inline void G1ParScanThreadState::remember_reference_into_optional_region(T* p) {$/;"	f	class:G1ParScanThreadState
remember_root_into_optional_region	g1ParScanThreadState.inline.hpp	/^inline void G1ParScanThreadState::remember_root_into_optional_region(T* p) {$/;"	f	class:G1ParScanThreadState
remove	g1CodeCacheRemSet.cpp	/^bool G1CodeRootSet::remove(nmethod* method) {$/;"	f	class:G1CodeRootSet
remove	g1CodeCacheRemSet.cpp	/^bool G1CodeRootSetTable::remove(nmethod* nm) {$/;"	f	class:G1CodeRootSetTable
remove	g1CollectionSetCandidates.cpp	/^void G1CollectionSetCandidates::remove(uint num_regions) {$/;"	f	class:G1CollectionSetCandidates
remove	heapRegionSet.inline.hpp	/^inline void HeapRegionSetBase::remove(HeapRegion* hr) {$/;"	f	class:HeapRegionSetBase
remove_all	heapRegionSet.cpp	/^void FreeRegionList::remove_all() {$/;"	f	class:FreeRegionList
remove_all_free_regions	heapRegionManager.hpp	/^  void remove_all_free_regions() {$/;"	f	class:HeapRegionManager
remove_chunk_from_chunk_list	g1ConcurrentMark.cpp	/^G1CMMarkStack::TaskQueueEntryChunk* G1CMMarkStack::remove_chunk_from_chunk_list() {$/;"	f	class:G1CMMarkStack
remove_chunk_from_free_list	g1ConcurrentMark.cpp	/^G1CMMarkStack::TaskQueueEntryChunk* G1CMMarkStack::remove_chunk_from_free_list() {$/;"	f	class:G1CMMarkStack
remove_chunk_from_list	g1ConcurrentMark.cpp	/^G1CMMarkStack::TaskQueueEntryChunk* G1CMMarkStack::remove_chunk_from_list(TaskQueueEntryChunk* volatile* list) {$/;"	f	class:G1CMMarkStack
remove_entry	g1CodeCacheRemSet.cpp	/^void G1CodeRootSetTable::remove_entry(Entry* e, Entry* previous) {$/;"	f	class:G1CodeRootSetTable
remove_expired_entries	g1MMUTracker.cpp	/^void G1MMUTrackerQueue::remove_expired_entries(double current_time) {$/;"	f	class:G1MMUTrackerQueue
remove_from_head_impl	heapRegionSet.inline.hpp	/^inline HeapRegion* FreeRegionList::remove_from_head_impl() {$/;"	f	class:FreeRegionList
remove_from_old_sets	g1CollectedHeap.cpp	/^void G1CollectedHeap::remove_from_old_sets(const uint old_regions_removed,$/;"	f	class:G1CollectedHeap
remove_from_tail_impl	heapRegionSet.inline.hpp	/^inline HeapRegion* FreeRegionList::remove_from_tail_impl() {$/;"	f	class:FreeRegionList
remove_if	g1CodeCacheRemSet.cpp	/^int G1CodeRootSetTable::remove_if(CB& should_remove) {$/;"	f	class:G1CodeRootSetTable
remove_last	g1FullGCCompactionPoint.cpp	/^HeapRegion* G1FullGCCompactionPoint::remove_last() {$/;"	f	class:G1FullGCCompactionPoint
remove_region	heapRegionSet.inline.hpp	/^inline HeapRegion* FreeRegionList::remove_region(bool from_head) {$/;"	f	class:FreeRegionList
remove_region_with_node_index	heapRegionSet.inline.hpp	/^inline HeapRegion* FreeRegionList::remove_region_with_node_index(bool from_head,$/;"	f	class:FreeRegionList
remove_self_forward_ptr_by_walking_hr	g1EvacFailure.cpp	/^  size_t remove_self_forward_ptr_by_walking_hr(HeapRegion* hr,$/;"	f	class:RemoveSelfForwardPtrHRClosure
remove_self_forwarding_pointers	g1CollectedHeap.cpp	/^void G1CollectedHeap::remove_self_forwarding_pointers(G1RedirtyCardsQueueSet* rdcqs) {$/;"	f	class:G1CollectedHeap
remove_starting_at	heapRegionSet.cpp	/^void FreeRegionList::remove_starting_at(HeapRegion* first, uint num_regions) {$/;"	f	class:FreeRegionList
remove_strong_code_root	heapRegion.cpp	/^void HeapRegion::remove_strong_code_root(nmethod* nm) {$/;"	f	class:HeapRegion
remove_strong_code_root	heapRegionRemSet.cpp	/^void HeapRegionRemSet::remove_strong_code_root(nmethod* nm) {$/;"	f	class:HeapRegionRemSet
remset_tracker	g1Policy.hpp	/^  G1RemSetTrackingPolicy* remset_tracker() { return &_remset_tracker; }$/;"	f	class:G1Policy
report	g1CollectedHeap.cpp	/^    void report(G1CollectedHeap* g1h, G1EvacuationInfo* evacuation_info) {$/;"	f	class:G1FreeCollectionSetTask::FreeCSetStats
report_adaptive_ihop_statistics	g1Trace.cpp	/^void G1NewTracer::report_adaptive_ihop_statistics(size_t threshold,$/;"	f	class:G1NewTracer
report_alloc_rate_ms	g1Analytics.cpp	/^void G1Analytics::report_alloc_rate_ms(double alloc_rate) {$/;"	f	class:G1Analytics
report_basic_ihop_statistics	g1Trace.cpp	/^void G1NewTracer::report_basic_ihop_statistics(size_t threshold,$/;"	f	class:G1NewTracer
report_card_merge_to_scan_ratio	g1Analytics.cpp	/^void G1Analytics::report_card_merge_to_scan_ratio(double merge_to_scan_ratio, bool for_young_gc) {$/;"	f	class:G1Analytics
report_concurrent_mark_cleanup_times_ms	g1Analytics.cpp	/^void G1Analytics::report_concurrent_mark_cleanup_times_ms(double ms) {$/;"	f	class:G1Analytics
report_concurrent_mark_remark_times_ms	g1Analytics.cpp	/^void G1Analytics::report_concurrent_mark_remark_times_ms(double ms) {$/;"	f	class:G1Analytics
report_concurrent_refine_rate_ms	g1Analytics.cpp	/^void G1Analytics::report_concurrent_refine_rate_ms(double cards_per_ms) {$/;"	f	class:G1Analytics
report_constant_other_time_ms	g1Analytics.cpp	/^void G1Analytics::report_constant_other_time_ms(double constant_other_time_ms) {$/;"	f	class:G1Analytics
report_cost_per_byte_ms	g1Analytics.cpp	/^void G1Analytics::report_cost_per_byte_ms(double cost_per_byte_ms, bool mark_or_rebuild_in_progress) {$/;"	f	class:G1Analytics
report_cost_per_card_merge_ms	g1Analytics.cpp	/^void G1Analytics::report_cost_per_card_merge_ms(double cost_per_card_ms, bool for_young_gc) {$/;"	f	class:G1Analytics
report_cost_per_card_scan_ms	g1Analytics.cpp	/^void G1Analytics::report_cost_per_card_scan_ms(double cost_per_card_ms, bool for_young_gc) {$/;"	f	class:G1Analytics
report_dirtied_cards_rate_ms	g1Analytics.cpp	/^void G1Analytics::report_dirtied_cards_rate_ms(double cards_per_ms) {$/;"	f	class:G1Analytics
report_evacuation_failed	g1Trace.cpp	/^void G1NewTracer::report_evacuation_failed(EvacuationFailedInfo& ef_info) {$/;"	f	class:G1NewTracer
report_evacuation_info	g1Trace.cpp	/^void G1NewTracer::report_evacuation_info(G1EvacuationInfo* info) {$/;"	f	class:G1NewTracer
report_evacuation_statistics	g1Trace.cpp	/^void G1NewTracer::report_evacuation_statistics(const G1EvacSummary& young_summary, const G1EvacSummary& old_summary) const {$/;"	f	class:G1NewTracer
report_gc_end_impl	g1Trace.cpp	/^void G1NewTracer::report_gc_end_impl(const Ticks& timestamp, TimePartitions* time_partitions) {$/;"	f	class:G1NewTracer
report_gc_start_impl	g1Trace.cpp	/^void G1OldTracer::report_gc_start_impl(GCCause::Cause cause, const Ticks& timestamp) {$/;"	f	class:G1OldTracer
report_ihop_statistics	g1Policy.cpp	/^void G1Policy::report_ihop_statistics() {$/;"	f	class:G1Policy
report_mmu	g1Trace.cpp	/^void G1MMUTracer::report_mmu(double time_slice_sec, double gc_time_sec, double max_time_sec) {$/;"	f	class:G1MMUTracer
report_non_young_other_cost_per_region_ms	g1Analytics.cpp	/^void G1Analytics::report_non_young_other_cost_per_region_ms(double other_cost_per_region_ms) {$/;"	f	class:G1Analytics
report_object_count	g1ConcurrentMark.cpp	/^void G1ConcurrentMark::report_object_count(bool mark_completed) {$/;"	f	class:G1ConcurrentMark
report_pending_cards	g1Analytics.cpp	/^void G1Analytics::report_pending_cards(double pending_cards) {$/;"	f	class:G1Analytics
report_promotion_event	g1ParScanThreadState.cpp	/^void G1ParScanThreadState::report_promotion_event(G1HeapRegionAttr const dest_attr,$/;"	f	class:G1ParScanThreadState
report_region_type_change	heapRegion.cpp	/^void HeapRegion::report_region_type_change(G1HeapRegionTraceType::Type to) {$/;"	f	class:HeapRegion
report_rs_length	g1Analytics.cpp	/^void G1Analytics::report_rs_length(double rs_length) {$/;"	f	class:G1Analytics
report_rs_length_diff	g1Analytics.cpp	/^void G1Analytics::report_rs_length_diff(double rs_length_diff) {$/;"	f	class:G1Analytics
report_statistics	g1CollectedHeap.cpp	/^  void report_statistics() {$/;"	f	class:G1FreeCollectionSetTask	file:
report_timing	g1CollectedHeap.cpp	/^    void report_timing(Tickspan parallel_time) {$/;"	f	class:G1FreeCollectionSetTask::FreeCSetClosure
report_yc_type	g1Trace.cpp	/^void G1NewTracer::report_yc_type(G1YCType type) {$/;"	f	class:G1NewTracer
report_young_other_cost_per_region_ms	g1Analytics.cpp	/^void G1Analytics::report_young_other_cost_per_region_ms(double other_cost_per_region_ms) {$/;"	f	class:G1Analytics
request_memory_on_node	g1NUMA.cpp	/^void G1NUMA::request_memory_on_node(void* aligned_address, size_t size_in_bytes,$/;"	f	class:G1NUMA
required_array_size	g1CollectionSetChooser.cpp	/^    static uint required_array_size(uint num_regions, uint chunk_size, uint num_workers) {$/;"	f	class:G1BuildCandidateRegionsTask::G1BuildCandidateArray	file:
requires_marking	g1SATBMarkQueueSet.cpp	/^static inline bool requires_marking(const void* entry, G1CollectedHeap* g1h) {$/;"	f	file:
reserved	g1CollectedHeap.hpp	/^  MemRegion reserved() const {$/;"	f	class:G1CollectedHeap
reserved	g1PageBasedVirtualSpace.hpp	/^  MemRegion reserved() {$/;"	f	class:G1PageBasedVirtualSpace
reserved	g1RegionToSpaceMapper.hpp	/^  MemRegion reserved() { return _storage.reserved(); }$/;"	f	class:G1RegionToSpaceMapper
reserved	heapRegionManager.hpp	/^  MemRegion reserved() const { return MemRegion(heap_bottom(), heap_end()); }$/;"	f	class:HeapRegionManager
reserved_size	g1PageBasedVirtualSpace.cpp	/^size_t G1PageBasedVirtualSpace::reserved_size() const {$/;"	f	class:G1PageBasedVirtualSpace
reserved_size	g1RegionToSpaceMapper.hpp	/^  size_t reserved_size() { return _storage.reserved_size(); }$/;"	f	class:G1RegionToSpaceMapper
reset	g1CollectionSet.hpp	/^    void reset() { _rs_length = ~(size_t)0; _non_copy_time_ms = -1.0; }$/;"	f	struct:G1CollectionSet::IncCollectionSetRegionStat
reset	g1ConcurrentMark.cpp	/^void G1CMRootMemRegions::reset() {$/;"	f	class:G1CMRootMemRegions
reset	g1ConcurrentMark.cpp	/^void G1CMTask::reset(G1CMBitMap* next_mark_bitmap) {$/;"	f	class:G1CMTask
reset	g1ConcurrentMark.cpp	/^void G1ConcurrentMark::reset() {$/;"	f	class:G1ConcurrentMark
reset	g1ConcurrentRefineStats.cpp	/^void G1ConcurrentRefineStats::reset() {$/;"	f	class:G1ConcurrentRefineStats
reset	g1ConcurrentStartToMixedTimeTracker.hpp	/^  void reset() {$/;"	f	class:G1ConcurrentStartToMixedTimeTracker
reset	g1EvacStats.hpp	/^  virtual void reset() {$/;"	f	class:G1EvacStats
reset	g1GCPhaseTimes.cpp	/^void G1GCPhaseTimes::reset() {$/;"	f	class:G1GCPhaseTimes
reset	g1RegionMarkStatsCache.cpp	/^void G1RegionMarkStatsCache::reset() {$/;"	f	class:G1RegionMarkStatsCache
reset	g1RegionMarkStatsCache.hpp	/^  void reset(uint region_idx) {$/;"	f	class:G1RegionMarkStatsCache
reset	g1RemSet.cpp	/^    void reset() {$/;"	f	class:G1RemSetScanState::G1DirtyRegions
reset	g1SharedDirtyCardQueue.cpp	/^void G1SharedDirtyCardQueue::reset() {$/;"	f	class:G1SharedDirtyCardQueue
reset	g1StringDedupStat.cpp	/^void G1StringDedupStat::reset() {$/;"	f	class:G1StringDedupStat
reset	g1SurvRateGroup.cpp	/^void G1SurvRateGroup::reset() {$/;"	f	class:G1SurvRateGroup
reset_after_compaction	heapRegion.hpp	/^  void reset_after_compaction() { set_top(compaction_top()); }$/;"	f	class:HeapRegion
reset_after_gc	g1OldGenAllocationTracker.cpp	/^void G1OldGenAllocationTracker::reset_after_gc(size_t humongous_bytes_after_gc) {$/;"	f	class:G1OldGenAllocationTracker
reset_alloc_region	g1AllocRegion.inline.hpp	/^inline void G1AllocRegion::reset_alloc_region() {$/;"	f	class:G1AllocRegion
reset_at_marking_complete	g1ConcurrentMark.cpp	/^void G1ConcurrentMark::reset_at_marking_complete() {$/;"	f	class:G1ConcurrentMark
reset_bot	g1BlockOffsetTable.hpp	/^  void reset_bot() {$/;"	f	class:G1BlockOffsetTablePart
reset_bot	heapRegion.hpp	/^  void reset_bot() {$/;"	f	class:HeapRegion
reset_bytes_used_before	g1CollectionSet.hpp	/^  void reset_bytes_used_before() {$/;"	f	class:G1CollectionSet
reset_card_counts	g1HotCardCache.cpp	/^void G1HotCardCache::reset_card_counts(HeapRegion* hr) {$/;"	f	class:G1HotCardCache
reset_count	g1HeapVerifier.cpp	/^  void reset_count() { _count = 0; };$/;"	f	class:YoungRefCounterClosure
reset_evacuation_should_fail	g1CollectedHeap.inline.hpp	/^inline void G1CollectedHeap::reset_evacuation_should_fail() {$/;"	f	class:G1CollectedHeap
reset_from_card_cache	g1CollectedHeap.cpp	/^void G1RegionMappingChangedListener::reset_from_card_cache(uint start_idx, size_t num_regions) {$/;"	f	class:G1RegionMappingChangedListener
reset_hot_cache	g1HotCardCache.hpp	/^  void reset_hot_cache() {$/;"	f	class:G1HotCardCache
reset_hot_cache_claimed_index	g1HotCardCache.hpp	/^  void reset_hot_cache_claimed_index() {$/;"	f	class:G1HotCardCache
reset_hot_cache_internal	g1HotCardCache.hpp	/^  void reset_hot_cache_internal() {$/;"	f	class:G1HotCardCache
reset_humongous_during_compaction	heapRegion.hpp	/^  void reset_humongous_during_compaction() {$/;"	f	class:HeapRegion
reset_marking_for_restart	g1ConcurrentMark.cpp	/^void G1ConcurrentMark::reset_marking_for_restart() {$/;"	f	class:G1ConcurrentMark
reset_pre_dummy_top	heapRegion.hpp	/^  void reset_pre_dummy_top() { _pre_dummy_top = NULL; }$/;"	f	class:HeapRegion
reset_region_claim	g1RemSet.cpp	/^  void reset_region_claim(uint region_idx) {$/;"	f	class:G1RemSetScanState
reset_region_metadata	g1FullGCPrepareTask.cpp	/^void G1FullGCPrepareTask::G1CalculatePointersClosure::reset_region_metadata(HeapRegion* hr) {$/;"	f	class:G1FullGCPrepareTask::G1CalculatePointersClosure
reset_taskqueue_stats	g1CollectedHeap.cpp	/^void G1CollectedHeap::reset_taskqueue_stats() {$/;"	f	class:G1CollectedHeap
reset_trim_ticks	g1ParScanThreadState.inline.hpp	/^inline void G1ParScanThreadState::reset_trim_ticks() {$/;"	f	class:G1ParScanThreadState
resize	g1ConcurrentMark.cpp	/^bool G1CMMarkStack::resize(size_t new_capacity) {$/;"	f	class:G1CMMarkStack
resize_covered_region	g1CardTable.hpp	/^  virtual void resize_covered_region(MemRegion new_region) { ShouldNotReachHere(); }$/;"	f	class:G1CardTable
resize_heap_if_necessary	g1CollectedHeap.cpp	/^void G1CollectedHeap::resize_heap_if_necessary() {$/;"	f	class:G1CollectedHeap
restart_for_overflow	g1ConcurrentMark.hpp	/^  bool restart_for_overflow()    { return _restart_for_overflow; }$/;"	f	class:G1ConcurrentMark
restore_after_evac_failure	g1CollectedHeap.cpp	/^void G1CollectedHeap::restore_after_evac_failure(G1RedirtyCardsQueueSet* rdcqs) {$/;"	f	class:G1CollectedHeap
restore_marks	g1FullCollector.cpp	/^void G1FullCollector::restore_marks() {$/;"	f	class:G1FullCollector
result	g1CollectedHeap.cpp	/^  size_t result() { return _used; }$/;"	f	class:SumUsedClosure
retire	g1AllocRegion.cpp	/^size_t G1AllocRegion::retire(bool fill_up) {$/;"	f	class:G1AllocRegion
retire	g1AllocRegion.cpp	/^size_t G1GCAllocRegion::retire(bool fill_up) {$/;"	f	class:G1GCAllocRegion
retire	g1AllocRegion.cpp	/^size_t MutatorAllocRegion::retire(bool fill_up) {$/;"	f	class:MutatorAllocRegion
retire	g1HRPrinter.hpp	/^  void retire(HeapRegion* hr) {$/;"	f	class:G1HRPrinter
retire_gc_alloc_region	g1CollectedHeap.cpp	/^void G1CollectedHeap::retire_gc_alloc_region(HeapRegion* alloc_region,$/;"	f	class:G1CollectedHeap
retire_internal	g1AllocRegion.cpp	/^size_t G1AllocRegion::retire_internal(HeapRegion* alloc_region, bool fill_up) {$/;"	f	class:G1AllocRegion
retire_mutator_alloc_region	g1CollectedHeap.cpp	/^void G1CollectedHeap::retire_mutator_alloc_region(HeapRegion* alloc_region,$/;"	f	class:G1CollectedHeap
retire_region	g1AllocRegion.cpp	/^void G1GCAllocRegion::retire_region(HeapRegion* alloc_region,$/;"	f	class:G1GCAllocRegion
retire_region	g1AllocRegion.cpp	/^void MutatorAllocRegion::retire_region(HeapRegion* alloc_region,$/;"	f	class:MutatorAllocRegion
reuse	g1HRPrinter.hpp	/^  void reuse(HeapRegion* hr) {$/;"	f	class:G1HRPrinter
reuse_retained_old_region	g1Allocator.cpp	/^void G1Allocator::reuse_retained_old_region(G1EvacuationInfo& evacuation_info,$/;"	f	class:G1Allocator
revise_young_list_target_length_if_necessary	g1Policy.cpp	/^void G1Policy::revise_young_list_target_length_if_necessary(size_t rs_length) {$/;"	f	class:G1Policy
root_region_scan_wait_time_ms	g1GCPhaseTimes.hpp	/^  double root_region_scan_wait_time_ms() {$/;"	f	class:G1GCPhaseTimes
root_regions	g1ConcurrentMark.hpp	/^  G1CMRootMemRegions* root_regions() { return &_root_regions; }$/;"	f	class:G1ConcurrentMark
rs_length_diff_defaults	g1Analytics.cpp	/^static double rs_length_diff_defaults[] = {$/;"	v	file:
rs_mem_size	g1RemSetSummary.cpp	/^  size_t rs_mem_size() const { return _rs_mem_size; }$/;"	f	class:RegionTypeCounter
rs_mem_size_percent_of	g1RemSetSummary.cpp	/^  double rs_mem_size_percent_of(size_t total) {$/;"	f	class:RegionTypeCounter	file:
rs_thread_vtime	g1RemSetSummary.cpp	/^double G1RemSetSummary::rs_thread_vtime(uint thread) const {$/;"	f	class:G1RemSetSummary
run_service	g1ConcurrentMarkThread.cpp	/^void G1ConcurrentMarkThread::run_service() {$/;"	f	class:G1ConcurrentMarkThread
run_service	g1ConcurrentRefineThread.cpp	/^void G1ConcurrentRefineThread::run_service() {$/;"	f	class:G1ConcurrentRefineThread
run_service	g1ServiceThread.cpp	/^void G1ServiceThread::run_service() {$/;"	f	class:G1ServiceThread
run_task	g1FullCollector.cpp	/^void G1FullCollector::run_task(AbstractGangTask* task) {$/;"	f	class:G1FullCollector
run_task	g1FullGCReferenceProcessorExecutor.cpp	/^void G1FullGCReferenceProcessingExecutor::run_task(AbstractGangTask* task) {$/;"	f	class:G1FullGCReferenceProcessingExecutor
run_task	g1FullGCReferenceProcessorExecutor.cpp	/^void G1FullGCReferenceProcessingExecutor::run_task(AbstractGangTask* task, uint workers) {$/;"	f	class:G1FullGCReferenceProcessingExecutor
run_task_timed	g1CollectedHeap.cpp	/^Tickspan G1CollectedHeap::run_task_timed(AbstractGangTask* task) {$/;"	f	class:G1CollectedHeap
safepoint_synchronize_begin	g1CollectedHeap.cpp	/^void G1CollectedHeap::safepoint_synchronize_begin() {$/;"	f	class:G1CollectedHeap
safepoint_synchronize_end	g1CollectedHeap.cpp	/^void G1CollectedHeap::safepoint_synchronize_end() {$/;"	f	class:G1CollectedHeap
safepoint_workers	g1CollectedHeap.hpp	/^  virtual WorkGang* safepoint_workers() { return _workers; }$/;"	f	class:G1CollectedHeap
sample_young_list_rs_length	g1ServiceThread.cpp	/^void G1ServiceThread::sample_young_list_rs_length() {$/;"	f	class:G1ServiceThread
sampled_rs_length	g1ServiceThread.cpp	/^  size_t sampled_rs_length() const { return _sampled_rs_length; }$/;"	f	class:G1YoungRemSetSamplingClosure
satb_mark_queue	g1ThreadLocalData.hpp	/^  static SATBMarkQueue& satb_mark_queue(Thread* thread) {$/;"	f	class:G1ThreadLocalData
satb_mark_queue_active_offset	g1ThreadLocalData.hpp	/^  static ByteSize satb_mark_queue_active_offset() {$/;"	f	class:G1ThreadLocalData
satb_mark_queue_buffer_offset	g1ThreadLocalData.hpp	/^  static ByteSize satb_mark_queue_buffer_offset() {$/;"	f	class:G1ThreadLocalData
satb_mark_queue_index_offset	g1ThreadLocalData.hpp	/^  static ByteSize satb_mark_queue_index_offset() {$/;"	f	class:G1ThreadLocalData
satb_mark_queue_offset	g1ThreadLocalData.hpp	/^  static ByteSize satb_mark_queue_offset() {$/;"	f	class:G1ThreadLocalData
satb_mark_queue_set	g1BarrierSet.hpp	/^  static G1SATBMarkQueueSet& satb_mark_queue_set() {$/;"	f	class:G1BarrierSet
satb_queue_for_thread	g1SATBMarkQueueSet.cpp	/^SATBMarkQueue& G1SATBMarkQueueSet::satb_queue_for_thread(Thread* const t) const{$/;"	f	class:G1SATBMarkQueueSet
satisfy_failed_allocation	g1CollectedHeap.cpp	/^HeapWord* G1CollectedHeap::satisfy_failed_allocation(size_t word_size,$/;"	f	class:G1CollectedHeap
satisfy_failed_allocation_helper	g1CollectedHeap.cpp	/^HeapWord* G1CollectedHeap::satisfy_failed_allocation_helper(size_t word_size,$/;"	f	class:G1CollectedHeap
scale_concurrent_worker_threads	g1Arguments.cpp	/^static uint scale_concurrent_worker_threads(uint num_gc_workers) {$/;"	f	file:
scale_with_heap	g1HeapSizingPolicy.cpp	/^double G1HeapSizingPolicy::scale_with_heap(double pause_time_threshold) {$/;"	f	class:G1HeapSizingPolicy
scan_chunk_size	g1RemSet.cpp	/^  uint scan_chunk_size() const { return (uint)1 << _scan_chunks_shift; }$/;"	f	class:G1RemSetScanState
scan_collection_set_regions	g1RemSet.cpp	/^void G1RemSet::scan_collection_set_regions(G1ParScanThreadState* pss,$/;"	f	class:G1RemSet
scan_finished	g1ConcurrentMark.cpp	/^void G1CMRootMemRegions::scan_finished() {$/;"	f	class:G1CMRootMemRegions
scan_for_references	g1RemSet.cpp	/^    size_t scan_for_references(oop const obj, MemRegion mr) {$/;"	f	class:G1RebuildRemSetTask::G1RebuildRemSetHeapRegionClosure	file:
scan_heap_roots	g1RemSet.cpp	/^   void scan_heap_roots(HeapRegion* r) {$/;"	f	class:G1ScanHRForRegionClosure	file:
scan_heap_roots	g1RemSet.cpp	/^void G1RemSet::scan_heap_roots(G1ParScanThreadState* pss,$/;"	f	class:G1RemSet
scan_in_progress	g1ConcurrentMark.hpp	/^  bool scan_in_progress() { return _scan_in_progress; }$/;"	f	class:G1CMRootMemRegions
scan_memregion	g1RemSet.cpp	/^  HeapWord* scan_memregion(uint region_idx_for_card, MemRegion mr) {$/;"	f	class:G1ScanHRForRegionClosure	file:
scan_objArray	g1ConcurrentMark.inline.hpp	/^inline size_t G1CMTask::scan_objArray(objArrayOop obj, MemRegion mr) {$/;"	f	class:G1CMTask
scan_opt_rem_set_roots	g1RemSet.cpp	/^  void scan_opt_rem_set_roots(HeapRegion* r) {$/;"	f	class:G1ScanCollectionSetRegionClosure	file:
scan_root_region	g1ConcurrentMark.cpp	/^void G1ConcurrentMark::scan_root_region(const MemRegion* region, uint worker_id) {$/;"	f	class:G1ConcurrentMark
scan_root_regions	g1ConcurrentMark.cpp	/^void G1ConcurrentMark::scan_root_regions() {$/;"	f	class:G1ConcurrentMark
scan_roots	g1CollectedHeap.cpp	/^  void scan_roots(G1ParScanThreadState* pss, uint worker_id) {$/;"	f	class:G1EvacuateOptionalRegionsTask	file:
scan_roots	g1CollectedHeap.cpp	/^  void scan_roots(G1ParScanThreadState* pss, uint worker_id) {$/;"	f	class:G1EvacuateRegionsTask	file:
scan_task_entry	g1ConcurrentMark.inline.hpp	/^inline void G1CMTask::scan_task_entry(G1TaskQueueEntry task_entry) { process_grey_task_entry<true>(task_entry); }$/;"	f	class:G1CMTask
scan_top	g1RemSet.cpp	/^  HeapWord* scan_top(uint region_idx) const {$/;"	f	class:G1RemSetScanState
scope	g1FullCollector.hpp	/^  G1FullGCScope*           scope() { return &_scope; }$/;"	f	class:G1FullCollector
send_adaptive_ihop_statistics	g1Trace.cpp	/^void G1NewTracer::send_adaptive_ihop_statistics(size_t threshold,$/;"	f	class:G1NewTracer
send_basic_ihop_statistics	g1Trace.cpp	/^void G1NewTracer::send_basic_ihop_statistics(size_t threshold,$/;"	f	class:G1NewTracer
send_evacuation_failed_event	g1Trace.cpp	/^void G1NewTracer::send_evacuation_failed_event(const EvacuationFailedInfo& ef_info) const {$/;"	f	class:G1NewTracer
send_evacuation_info_event	g1Trace.cpp	/^void G1NewTracer::send_evacuation_info_event(G1EvacuationInfo* info) {$/;"	f	class:G1NewTracer
send_events	g1HeapRegionEventSender.cpp	/^void G1HeapRegionEventSender::send_events() {$/;"	f	class:G1HeapRegionEventSender
send_g1_mmu_event	g1Trace.cpp	/^void G1MMUTracer::send_g1_mmu_event(double time_slice_ms, double gc_time_ms, double max_time_ms) {$/;"	f	class:G1MMUTracer
send_g1_young_gc_event	g1Trace.cpp	/^void G1NewTracer::send_g1_young_gc_event() {$/;"	f	class:G1NewTracer
send_old_evacuation_statistics	g1Trace.cpp	/^void G1NewTracer::send_old_evacuation_statistics(const G1EvacSummary& summary) const {$/;"	f	class:G1NewTracer
send_region_type_change	heapRegionTracer.cpp	/^void HeapRegionTracer::send_region_type_change(uint index,$/;"	f	class:HeapRegionTracer
send_trace_event	g1IHOPControl.cpp	/^void G1AdaptiveIHOPControl::send_trace_event(G1NewTracer* tracer) {$/;"	f	class:G1AdaptiveIHOPControl
send_trace_event	g1IHOPControl.cpp	/^void G1IHOPControl::send_trace_event(G1NewTracer* tracer) {$/;"	f	class:G1IHOPControl
send_young_evacuation_statistics	g1Trace.cpp	/^void G1NewTracer::send_young_evacuation_statistics(const G1EvacSummary& summary) const {$/;"	f	class:G1NewTracer
sender	g1SendMsg.hpp	/^    hmalloc_msg_sender sender;$/;"	m	class:messageAll
sendmsg	g1SendMsg.cpp	/^void messageAll::sendmsg(uint64_t addr, uint64_t size, uint32_t hid, int m){$/;"	f	class:messageAll
serial_compaction	g1FullGCCompactTask.cpp	/^void G1FullGCCompactTask::serial_compaction() {$/;"	f	class:G1FullGCCompactTask
serial_compaction_point	g1FullCollector.hpp	/^  G1FullGCCompactionPoint* serial_compaction_point() { return &_serial_compaction_point; }$/;"	f	class:G1FullCollector
serialize	g1Trace.cpp	/^  void serialize(JfrCheckpointWriter& writer) {$/;"	f	class:G1HeapRegionTypeConstant
serialize	g1Trace.cpp	/^  void serialize(JfrCheckpointWriter& writer) {$/;"	f	class:G1YCTypeConstant
service_thread	g1CollectedHeap.hpp	/^  G1ServiceThread* service_thread() const { return _service_thread; }$/;"	f	class:G1CollectedHeap
service_thread_vtime	g1RemSetSummary.hpp	/^  double service_thread_vtime() const {$/;"	f	class:G1RemSetSummary
set	g1AllocRegion.cpp	/^void G1AllocRegion::set(HeapRegion* alloc_region) {$/;"	f	class:G1AllocRegion
set	g1CollectionSetChooser.cpp	/^    void set(uint idx, HeapRegion* hr) {$/;"	f	class:G1BuildCandidateRegionsTask::G1BuildCandidateArray
set	g1FromCardCache.hpp	/^  static void set(uint worker_id, uint region_idx, uintptr_t val) {$/;"	f	class:G1FromCardCache
set	g1RemSetSummary.cpp	/^void G1RemSetSummary::set(G1RemSetSummary* other) {$/;"	f	class:G1RemSetSummary
set	heapRegionType.hpp	/^  void set(Tag tag) {$/;"	f	class:HeapRegionType
set_alloc_regions_used_before	g1EvacuationInfo.hpp	/^  void set_alloc_regions_used_before(size_t used) {$/;"	f	class:G1EvacuationInfo
set_allocation_regions	g1EvacuationInfo.hpp	/^  void set_allocation_regions(uint allocation_regions) {$/;"	f	class:G1EvacuationInfo
set_bitmap	g1ConcurrentMarkBitMap.hpp	/^  void set_bitmap(G1CMBitMap* bm) { _bm = bm; }$/;"	f	class:G1CMBitMapMappingChangedListener
set_by_address	g1BiasedArray.hpp	/^  void set_by_address(HeapWord * address, T value) {$/;"	f	class:G1BiasedMappedArray
set_by_address	g1BiasedArray.hpp	/^  void set_by_address(MemRegion range, T value) {$/;"	f	class:G1BiasedMappedArray
set_by_index	g1BiasedArray.hpp	/^  void set_by_index(idx_t index, T value) {$/;"	f	class:G1BiasedMappedArray
set_bytes_used	g1EvacuationInfo.hpp	/^  void set_bytes_used(size_t used) {$/;"	f	class:G1EvacuationInfo
set_candidate	g1CollectedHeap.hpp	/^    void set_candidate(uint region, bool value) {$/;"	f	class:G1CollectedHeap::HumongousReclaimCandidates
set_candidates	g1CollectionSet.hpp	/^  void set_candidates(G1CollectionSetCandidates* candidates) {$/;"	f	class:G1CollectionSet
set_card_table	g1CardTable.hpp	/^  void set_card_table(G1CardTable* card_table) { _card_table = card_table; }$/;"	f	class:G1CardTableChangedListener
set_cardcounts	g1CardCounts.hpp	/^  void set_cardcounts(G1CardCounts* counts) { _counts = counts; }$/;"	f	class:G1CardCountsMappingChangedListener
set_chunk_dirty	g1RemSet.cpp	/^  void set_chunk_dirty(size_t const card_idx) {$/;"	f	class:G1RemSetScanState
set_chunk_region_dirty	g1RemSet.cpp	/^  void set_chunk_region_dirty(size_t const region_card_idx) {$/;"	f	class:G1RemSetScanState
set_clearing_next_bitmap	g1CollectorState.hpp	/^  void set_clearing_next_bitmap(bool v) { _clearing_next_bitmap = v; }$/;"	f	class:G1CollectorState
set_closed_archive	heapRegion.cpp	/^void HeapRegion::set_closed_archive() {$/;"	f	class:HeapRegion
set_closed_archive	heapRegionType.hpp	/^  void set_closed_archive() { set_from(ClosedArchiveTag, FreeTag); }$/;"	f	class:HeapRegionType
set_cm_oop_closure	g1ConcurrentMark.cpp	/^void G1CMTask::set_cm_oop_closure(G1CMOopClosure* cm_oop_closure) {$/;"	f	class:G1CMTask
set_collectionset_regions	g1EvacuationInfo.hpp	/^  void set_collectionset_regions(uint collectionset_regions) {$/;"	f	class:G1EvacuationInfo
set_collectionset_used_before	g1EvacuationInfo.hpp	/^  void set_collectionset_used_before(size_t used) {$/;"	f	class:G1EvacuationInfo
set_collision_list_next	heapRegionRemSet.hpp	/^  void set_collision_list_next(PerRegionTable* next) {$/;"	f	class:PerRegionTable
set_compaction_top	heapRegion.hpp	/^  void set_compaction_top(HeapWord* compaction_top) { _compaction_top = compaction_top; }$/;"	f	class:HeapRegion
set_concurrency	g1ConcurrentMark.cpp	/^void G1ConcurrentMark::set_concurrency(uint active_tasks) {$/;"	f	class:G1ConcurrentMark
set_concurrency_and_phase	g1ConcurrentMark.cpp	/^void G1ConcurrentMark::set_concurrency_and_phase(uint active_tasks, bool concurrent) {$/;"	f	class:G1ConcurrentMark
set_containing_obj	g1FullGCOopClosures.hpp	/^  void set_containing_obj(oop obj) {$/;"	f	class:G1VerifyOopClosure
set_containing_obj	heapRegion.cpp	/^  void set_containing_obj(oop obj) {$/;"	f	class:G1VerificationClosure
set_containing_set	heapRegion.hpp	/^  void set_containing_set(HeapRegionSetBase* containing_set) { }$/;"	f	class:HeapRegion
set_containing_set	heapRegion.hpp	/^  void set_containing_set(HeapRegionSetBase* containing_set) {$/;"	f	class:HeapRegion
set_continues_humongous	heapRegion.cpp	/^void HeapRegion::set_continues_humongous(HeapRegion* first_hr) {$/;"	f	class:HeapRegion
set_continues_humongous	heapRegionType.hpp	/^  void set_continues_humongous() { set_from(ContinuesHumongousTag, FreeTag); }$/;"	f	class:HeapRegionType
set_eden	heapRegion.cpp	/^void HeapRegion::set_eden() {$/;"	f	class:HeapRegion
set_eden	heapRegionType.hpp	/^  void set_eden()        { set_from(EdenTag, FreeTag); }$/;"	f	class:HeapRegionType
set_eden_pre_gc	heapRegion.cpp	/^void HeapRegion::set_eden_pre_gc() {$/;"	f	class:HeapRegion
set_eden_pre_gc	heapRegionType.hpp	/^  void set_eden_pre_gc() { set_from(EdenTag, SurvTag); }$/;"	f	class:HeapRegionType
set_empty	g1ConcurrentMark.cpp	/^void G1CMMarkStack::set_empty() {$/;"	f	class:G1CMMarkStack
set_evacuation_failed	heapRegion.hpp	/^  void set_evacuation_failed(bool b) {$/;"	f	class:HeapRegion
set_evacuation_failure_alot_for_current_gc	g1CollectedHeap.inline.hpp	/^G1CollectedHeap::set_evacuation_failure_alot_for_current_gc() {$/;"	f	class:G1CollectedHeap
set_for_starts_humongous	g1BlockOffsetTable.cpp	/^void G1BlockOffsetTablePart::set_for_starts_humongous(HeapWord* obj_top, size_t fill_size) {$/;"	f	class:G1BlockOffsetTablePart
set_free	heapRegion.cpp	/^void HeapRegion::set_free() {$/;"	f	class:HeapRegion
set_free	heapRegionType.hpp	/^  void set_free() { set(FreeTag); }$/;"	f	class:HeapRegionType
set_freed_regions	g1FullGCPrepareTask.cpp	/^void G1FullGCPrepareTask::set_freed_regions() {$/;"	f	class:G1FullGCPrepareTask
set_from	heapRegionType.hpp	/^  void set_from(Tag tag, Tag before) {$/;"	f	class:HeapRegionType
set_gc_cause	g1Trace.cpp	/^void G1OldTracer::set_gc_cause(GCCause::Cause cause) {$/;"	f	class:G1OldTracer
set_has_aborted	g1ConcurrentMark.hpp	/^  void set_has_aborted()        { _has_aborted = true; }$/;"	f	class:G1CMTask
set_has_humongous_reclaim_candidate	g1CollectedHeap.inline.hpp	/^inline void G1CollectedHeap::set_has_humongous_reclaim_candidate(bool value) {$/;"	f	class:G1CollectedHeap
set_has_overflown	g1ConcurrentMark.hpp	/^  void set_has_overflown()       { _has_overflown = true; }$/;"	f	class:G1ConcurrentMark
set_has_remset	g1HeapRegionAttr.hpp	/^  void set_has_remset(bool value)      { _needs_remset_update = value ? 1 : 0; }$/;"	f	struct:G1HeapRegionAttr
set_has_remset	g1HeapRegionAttr.hpp	/^  void set_has_remset(uintptr_t index, bool needs_remset_update) {$/;"	f	class:G1HeapRegionAttrBiasedMappedArray
set_humongous	g1HeapRegionAttr.hpp	/^  void set_humongous(uintptr_t index, bool needs_remset_update) {$/;"	f	class:G1HeapRegionAttrBiasedMappedArray
set_humongous_is_live	g1CollectedHeap.inline.hpp	/^inline void G1CollectedHeap::set_humongous_is_live(oop obj) {$/;"	f	class:G1CollectedHeap
set_humongous_reclaim_candidate	g1CollectedHeap.inline.hpp	/^inline void G1CollectedHeap::set_humongous_reclaim_candidate(uint region, bool value) {$/;"	f	class:G1CollectedHeap
set_idle	g1ConcurrentMarkThread.hpp	/^  void set_idle()          { assert(_state != Started, "must not be starting a new cycle"); _state = Idle; }$/;"	f	class:G1ConcurrentMarkThread
set_in_concurrent_start_gc	g1CollectorState.hpp	/^  void set_in_concurrent_start_gc(bool v) { _in_concurrent_start_gc = v; }$/;"	f	class:G1CollectorState
set_in_full_gc	g1CollectorState.hpp	/^  void set_in_full_gc(bool v) { _in_full_gc = v; }$/;"	f	class:G1CollectorState
set_in_old	g1HeapRegionAttr.hpp	/^  void set_in_old(uintptr_t index, bool needs_remset_update) {$/;"	f	class:G1HeapRegionAttrBiasedMappedArray
set_in_progress	g1ConcurrentMarkThread.hpp	/^  void set_in_progress()   { assert(_state == Started, "must be starting a cycle"); _state = InProgress; }$/;"	f	class:G1ConcurrentMarkThread
set_in_young	g1HeapRegionAttr.hpp	/^  void set_in_young(uintptr_t index) {$/;"	f	class:G1HeapRegionAttrBiasedMappedArray
set_in_young_gc_before_mixed	g1CollectorState.hpp	/^  void set_in_young_gc_before_mixed(bool v) { _in_young_gc_before_mixed = v; }$/;"	f	class:G1CollectorState
set_in_young_only_phase	g1CollectorState.hpp	/^  void set_in_young_only_phase(bool v) { _in_young_only_phase = v; }$/;"	f	class:G1CollectorState
set_incomplete	heapRegion.hpp	/^  void set_incomplete() { _is_complete = false; }$/;"	f	class:HeapRegionClosure
set_index_in_opt_cset	heapRegion.hpp	/^  void set_index_in_opt_cset(uint index) { _index_in_opt_cset = index; }$/;"	f	class:HeapRegion
set_initiate_conc_mark_if_possible	g1CollectorState.hpp	/^  void set_initiate_conc_mark_if_possible(bool v) { _initiate_conc_mark_if_possible = v; }$/;"	f	class:G1CollectorState
set_mapping_changed_listener	g1RegionToSpaceMapper.hpp	/^  void set_mapping_changed_listener(G1MappingChangedListener* listener) { _listener = listener; }$/;"	f	class:G1RegionToSpaceMapper
set_mark_or_rebuild_in_progress	g1CollectorState.hpp	/^  void set_mark_or_rebuild_in_progress(bool v) { _mark_or_rebuild_in_progress = v; }$/;"	f	class:G1CollectorState
set_max_cards	g1DirtyCardQueue.cpp	/^void G1DirtyCardQueueSet::set_max_cards(size_t value) {$/;"	f	class:G1DirtyCardQueueSet
set_max_cards_padding	g1DirtyCardQueue.cpp	/^void G1DirtyCardQueueSet::set_max_cards_padding(size_t padding) {$/;"	f	class:G1DirtyCardQueueSet
set_next	heapRegion.hpp	/^  void set_next(HeapRegion* next) { _next = next; }$/;"	f	class:HeapRegion
set_next	heapRegionRemSet.hpp	/^  void set_next(PerRegionTable* next) { _next = next; }$/;"	f	class:PerRegionTable
set_next_index	sparsePRT.hpp	/^  void set_next_index(int ni) { _next_index = ni; }$/;"	f	class:SparsePRTEntry
set_nm	g1CodeBlobClosure.hpp	/^    void set_nm(nmethod* nm) {$/;"	f	class:G1CodeBlobClosure::HeapRegionGatheringOopClosure
set_nmethod	g1HeapVerifier.cpp	/^  void set_nmethod(nmethod* nm) { _nm = nm; }$/;"	f	class:G1VerifyCodeRootOopClosure
set_node_index	heapRegion.hpp	/^  void set_node_index(uint node_index) { _node_index = node_index; }$/;"	f	class:HeapRegion
set_object_can_span	g1BlockOffsetTable.cpp	/^void G1BlockOffsetTablePart::set_object_can_span(bool can_span) {$/;"	f	class:G1BlockOffsetTablePart
set_offset_array	g1BlockOffsetTable.inline.hpp	/^void G1BlockOffsetTable::set_offset_array(size_t index, HeapWord* high, HeapWord* low) {$/;"	f	class:G1BlockOffsetTable
set_offset_array	g1BlockOffsetTable.inline.hpp	/^void G1BlockOffsetTable::set_offset_array(size_t index, u_char offset) {$/;"	f	class:G1BlockOffsetTable
set_offset_array	g1BlockOffsetTable.inline.hpp	/^void G1BlockOffsetTable::set_offset_array(size_t left, size_t right, u_char offset) {$/;"	f	class:G1BlockOffsetTable
set_offset_array_raw	g1BlockOffsetTable.inline.hpp	/^void G1BlockOffsetTable::set_offset_array_raw(size_t index, u_char offset) {$/;"	f	class:G1BlockOffsetTable
set_old	g1HeapRegionAttr.hpp	/^  void set_old()                       { _type = Old; }$/;"	f	struct:G1HeapRegionAttr
set_old	heapRegion.cpp	/^void HeapRegion::set_old() {$/;"	f	class:HeapRegion
set_old	heapRegionType.hpp	/^  void set_old() { set(OldTag); }$/;"	f	class:HeapRegionType
set_old_full	g1Allocator.cpp	/^void G1Allocator::set_old_full() {$/;"	f	class:G1Allocator
set_open_archive	heapRegion.cpp	/^void HeapRegion::set_open_archive() {$/;"	f	class:HeapRegion
set_open_archive	heapRegionType.hpp	/^  void set_open_archive()   { set_from(OpenArchiveTag, FreeTag); }$/;"	f	class:HeapRegionType
set_optional	g1HeapRegionAttr.hpp	/^  void set_optional(uintptr_t index, bool needs_remset_update) {$/;"	f	class:G1HeapRegionAttrBiasedMappedArray
set_pre_dummy_top	heapRegion.hpp	/^  void set_pre_dummy_top(HeapWord* pre_dummy_top) {$/;"	f	class:HeapRegion
set_prev	heapRegion.hpp	/^  void set_prev(HeapRegion* prev) { _prev = prev; }$/;"	f	class:HeapRegion
set_primary_refinement_thread	g1DirtyCardQueue.hpp	/^  void set_primary_refinement_thread(G1ConcurrentRefineThread* thread) {$/;"	f	class:G1DirtyCardQueueSet
set_process_cards_threshold	g1DirtyCardQueue.hpp	/^  void set_process_cards_threshold(size_t sz) {$/;"	f	class:G1DirtyCardQueueSet
set_range_archive	g1Allocator.inline.hpp	/^inline void G1ArchiveAllocator::set_range_archive(MemRegion range, bool open) {$/;"	f	class:G1ArchiveAllocator
set_recorded_rs_length	g1CollectionSet.cpp	/^void G1CollectionSet::set_recorded_rs_length(size_t rs_length) {$/;"	f	class:G1CollectionSet
set_ref_discoverer	g1OopClosures.hpp	/^  void set_ref_discoverer(ReferenceDiscoverer* rd) {$/;"	f	class:G1ScanEvacuatedObjClosure
set_ref_discoverer	g1ParScanThreadState.hpp	/^  void set_ref_discoverer(ReferenceDiscoverer* rd) { _scanner.set_ref_discoverer(rd); }$/;"	f	class:G1ParScanThreadState
set_region_eden	g1Policy.hpp	/^  void set_region_eden(HeapRegion* hr) {$/;"	f	class:G1Policy
set_region_info	g1NUMA.cpp	/^void G1NUMA::set_region_info(size_t region_size, size_t page_size,$/;"	f	class:G1NUMA
set_region_short_lived_locked	g1CollectedHeap.cpp	/^void G1CollectedHeap::set_region_short_lived_locked(HeapRegion* hr) {$/;"	f	class:G1CollectedHeap
set_region_survivor	g1Policy.hpp	/^  void set_region_survivor(HeapRegion* hr) {$/;"	f	class:G1Policy
set_regions_freed	g1EvacuationInfo.hpp	/^  void set_regions_freed(uint freed) {$/;"	f	class:G1EvacuationInfo
set_remainder_to_point_to_start	g1BlockOffsetTable.cpp	/^void G1BlockOffsetTablePart:: set_remainder_to_point_to_start(HeapWord* start, HeapWord* end) {$/;"	f	class:G1BlockOffsetTablePart
set_remainder_to_point_to_start_incl	g1BlockOffsetTable.cpp	/^void G1BlockOffsetTablePart::set_remainder_to_point_to_start_incl(size_t start_card, size_t end_card) {$/;"	f	class:G1BlockOffsetTablePart
set_rs_thread_vtime	g1RemSetSummary.cpp	/^void G1RemSetSummary::set_rs_thread_vtime(uint thread, double value) {$/;"	f	class:G1RemSetSummary
set_scan_top	g1RemSet.cpp	/^  void set_scan_top(uint region_idx, HeapWord* value) {$/;"	f	class:G1RemSetScanState
set_scanned_cld	g1OopClosures.hpp	/^  void set_scanned_cld(ClassLoaderData* cld) { _scanned_cld = cld; }$/;"	f	class:G1ParCopyHelper
set_service_thread_vtime	g1RemSetSummary.hpp	/^  void set_service_thread_vtime(double value) {$/;"	f	class:G1RemSetSummary
set_started	g1ConcurrentMarkThread.hpp	/^  void set_started()       { assert(_state == Idle, "cycle in progress"); _state = Started; }$/;"	f	class:G1ConcurrentMarkThread
set_starts_humongous	heapRegion.cpp	/^void HeapRegion::set_starts_humongous(HeapWord* obj_top, size_t fill_size) {$/;"	f	class:HeapRegion
set_starts_humongous	heapRegionType.hpp	/^  void set_starts_humongous()    { set_from(StartsHumongousTag,    FreeTag); }$/;"	f	class:HeapRegionType
set_state_complete	heapRegionRemSet.hpp	/^  void set_state_complete() {$/;"	f	class:HeapRegionRemSet
set_state_empty	heapRegionRemSet.hpp	/^  void set_state_empty() {$/;"	f	class:HeapRegionRemSet
set_state_updating	heapRegionRemSet.hpp	/^  void set_state_updating() {$/;"	f	class:HeapRegionRemSet
set_survivor	heapRegion.cpp	/^void HeapRegion::set_survivor() {$/;"	f	class:HeapRegion
set_survivor	heapRegionType.hpp	/^  void set_survivor()    { set_from(SurvTag, FreeTag); }$/;"	f	class:HeapRegionType
set_survivor_full	g1Allocator.cpp	/^void G1Allocator::set_survivor_full() {$/;"	f	class:G1Allocator
set_top	heapRegion.hpp	/^  void set_top(HeapWord* value) { _top = value; }$/;"	f	class:HeapRegion
set_type	g1Trace.hpp	/^  void set_type(G1YCType type) {$/;"	f	class:G1YoungGCInfo
set_unrealistically_long_length	heapRegionSet.cpp	/^void FreeRegionList::set_unrealistically_long_length(uint len) {$/;"	f	class:FreeRegionList
set_use_cache	g1HotCardCache.hpp	/^  void set_use_cache(bool b) {$/;"	f	class:G1HotCardCache
set_used	g1CollectedHeap.cpp	/^void G1CollectedHeap::set_used(size_t bytes) {$/;"	f	class:G1CollectedHeap
set_young_index_in_cset	heapRegion.hpp	/^  void set_young_index_in_cset(uint index) {$/;"	f	class:HeapRegion
setup	g1AllocRegion.cpp	/^void G1AllocRegion::setup(G1CollectedHeap* g1h, HeapRegion* dummy_region) {$/;"	f	class:G1AllocRegion
setup_for_region	g1ConcurrentMark.cpp	/^void G1CMTask::setup_for_region(HeapRegion* hr) {$/;"	f	class:G1CMTask
setup_heap_region_size	heapRegion.cpp	/^void HeapRegion::setup_heap_region_size(size_t max_heap_size) {$/;"	f	class:HeapRegion
setup_remset_size	heapRegionRemSet.cpp	/^void HeapRegionRemSet::setup_remset_size() {$/;"	f	class:HeapRegionRemSet
shared_dirty_card_queue	g1BarrierSet.hpp	/^  static G1SharedDirtyCardQueue& shared_dirty_card_queue() {$/;"	f	class:G1BarrierSet
shift_by	g1BiasedArray.hpp	/^  uint shift_by() const { return _shift_by; }$/;"	f	class:G1BiasedMappedArrayBase
short_term_pause_time_ratio	g1Analytics.hpp	/^  double short_term_pause_time_ratio() const {$/;"	f	class:G1Analytics
should_add	g1CollectionSetChooser.cpp	/^    bool should_add(HeapRegion* hr) { return G1CollectionSetChooser::should_add(hr); }$/;"	f	class:G1BuildCandidateRegionsTask::G1BuildCandidateRegionsClosure	file:
should_add	g1CollectionSetChooser.cpp	/^bool G1CollectionSetChooser::should_add(HeapRegion* hr) {$/;"	f	class:G1CollectionSetChooser
should_allocate_mutator_region	g1Policy.cpp	/^bool G1Policy::should_allocate_mutator_region() const {$/;"	f	class:G1Policy
should_be_sliced	g1ConcurrentMarkObjArrayProcessor.inline.hpp	/^inline bool G1CMObjArrayProcessor::should_be_sliced(oop obj) {$/;"	f	class:G1CMObjArrayProcessor
should_clear_soft_refs	g1FullGCScope.cpp	/^bool G1FullGCScope::should_clear_soft_refs() {$/;"	f	class:G1FullGCScope
should_do_concurrent_full_gc	g1CollectedHeap.cpp	/^bool G1CollectedHeap::should_do_concurrent_full_gc(GCCause::Cause cause) {$/;"	f	class:G1CollectedHeap
should_exit_termination	g1ConcurrentMark.cpp	/^bool G1CMTask::should_exit_termination() {$/;"	f	class:G1CMTask
should_expand	sparsePRT.hpp	/^  bool should_expand() const { return _occupied_entries == _num_entries; }$/;"	f	class:RSHashTable
should_retain	g1AllocRegion.cpp	/^bool MutatorAllocRegion::should_retain(HeapRegion* region) {$/;"	f	class:MutatorAllocRegion
should_return	g1ConcurrentMark.cpp	/^  virtual bool should_return() {$/;"	f	class:G1PrecleanYieldClosure
should_return_fine_grain	g1ConcurrentMark.cpp	/^  virtual bool should_return_fine_grain() {$/;"	f	class:G1PrecleanYieldClosure
should_start_periodic_gc	g1ServiceThread.cpp	/^bool G1ServiceThread::should_start_periodic_gc() {$/;"	f	class:G1ServiceThread
should_update_surv_rate_group_predictors	g1Policy.hpp	/^  bool should_update_surv_rate_group_predictors() {$/;"	f	class:G1Policy
should_upgrade_to_full_gc	g1CollectedHeap.cpp	/^bool G1CollectedHeap::should_upgrade_to_full_gc(GCCause::Cause cause) {$/;"	f	class:G1CollectedHeap
should_verify	g1HeapVerifier.cpp	/^bool G1HeapVerifier::should_verify(G1VerifyType type) {$/;"	f	class:G1HeapVerifier
shrink	g1CollectedHeap.cpp	/^void G1CollectedHeap::shrink(size_t shrink_bytes) {$/;"	f	class:G1CollectedHeap
shrink_at	heapRegionManager.cpp	/^void HeapRegionManager::shrink_at(uint index, size_t num_regions) {$/;"	f	class:HeapRegionManager
shrink_by	heapRegionManager.cpp	/^uint HeapRegionManager::shrink_by(uint num_regions_to_remove) {$/;"	f	class:HeapRegionManager
shrink_by	heterogeneousHeapRegionManager.cpp	/^uint HeterogeneousHeapRegionManager::shrink_by(uint num_regions) {$/;"	f	class:HeterogeneousHeapRegionManager
shrink_dram	heterogeneousHeapRegionManager.cpp	/^uint HeterogeneousHeapRegionManager::shrink_dram(uint num_regions, bool update_free_list) {$/;"	f	class:HeterogeneousHeapRegionManager
shrink_helper	g1CollectedHeap.cpp	/^void G1CollectedHeap::shrink_helper(size_t shrink_bytes) {$/;"	f	class:G1CollectedHeap
shrink_in_range	heterogeneousHeapRegionManager.cpp	/^uint HeterogeneousHeapRegionManager::shrink_in_range(uint start, uint end, uint num_regions, bool update_free_list) {$/;"	f	class:HeterogeneousHeapRegionManager
shrink_nvdimm	heterogeneousHeapRegionManager.cpp	/^uint HeterogeneousHeapRegionManager::shrink_nvdimm(uint num_regions, bool update_free_list) {$/;"	f	class:HeterogeneousHeapRegionManager
sigma	g1Predictions.hpp	/^  double sigma() const { return _sigma; }$/;"	f	class:G1Predictions
size	g1ConcurrentMark.hpp	/^  size_t size() const { return _chunks_in_chunk_list * EntriesPerChunk; }$/;"	f	class:G1CMMarkStack
size	g1RemSet.cpp	/^    uint size() const { return _cur_idx; }$/;"	f	class:G1RemSetScanState::G1DirtyRegions
size	g1RemSet.cpp	/^  uint size() const { return _scan_state->scan_chunk_size(); }$/;"	f	class:G1CardTableChunkClaimer
size	sparsePRT.hpp	/^  static size_t size() { return sizeof(SparsePRTEntry) + sizeof(card_elem_t) * (cards_num() - card_array_alignment); }$/;"	f	class:SparsePRTEntry
sleep_before_next_cycle	g1ConcurrentMarkThread.cpp	/^void G1ConcurrentMarkThread::sleep_before_next_cycle() {$/;"	f	class:G1ConcurrentMarkThread
sleep_before_next_cycle	g1ServiceThread.cpp	/^void G1ServiceThread::sleep_before_next_cycle() {$/;"	f	class:G1ServiceThread
slice	g1ConcurrentMark.hpp	/^  HeapWord* slice() const {$/;"	f	class:G1TaskQueueEntry
soft_ref_policy	g1CollectedHeap.cpp	/^SoftRefPolicy* G1CollectedHeap::soft_ref_policy() {$/;"	f	class:G1CollectedHeap
sort_and_copy_into	g1CollectionSetChooser.cpp	/^    void sort_and_copy_into(HeapRegion** dest, uint num_regions) {$/;"	f	class:G1BuildCandidateRegionsTask::G1BuildCandidateArray
sort_cards	g1DirtyCardQueue.cpp	/^  void sort_cards(size_t start_index) {$/;"	f	class:G1RefineBufferedCards	file:
stack_closure	g1FullGCMarker.hpp	/^  G1FollowStackClosure* stack_closure() { return &_stack_closure; }$/;"	f	class:G1FullGCMarker
start	heapRegionManager.hpp	/^  uint start() const { return _start; }$/;"	f	class:HeapRegionRange
start_adding_regions	g1SurvRateGroup.cpp	/^void G1SurvRateGroup::start_adding_regions() {$/;"	f	class:G1SurvRateGroup
start_incremental_building	g1CollectionSet.cpp	/^void G1CollectionSet::start_incremental_building() {$/;"	f	class:G1CollectionSet
start_index_of_dram	g1RegionToSpaceMapper.hpp	/^  uint start_index_of_dram() { return _start_index_of_dram; }$/;"	f	class:G1RegionToHeteroSpaceMapper
start_index_of_dram	heterogeneousHeapRegionManager.cpp	/^uint HeterogeneousHeapRegionManager::start_index_of_dram() const { return _max_regions;}$/;"	f	class:HeterogeneousHeapRegionManager
start_index_of_nvdimm	heterogeneousHeapRegionManager.cpp	/^uint HeterogeneousHeapRegionManager::start_index_of_nvdimm() const { return 0; }$/;"	f	class:HeterogeneousHeapRegionManager
start_new_collection_set	g1CollectedHeap.cpp	/^void G1CollectedHeap::start_new_collection_set() {$/;"	f	class:G1CollectedHeap
start_term_time	g1CollectedHeap.hpp	/^  void start_term_time() { _term_attempts++; _start_term = os::elapsedTime(); }$/;"	f	class:G1ParEvacuateFollowersClosure
start_time	g1MMUTracker.hpp	/^  inline double start_time() { return _start_time; }$/;"	f	class:G1MMUTrackerQueueElem
start_work	g1CollectedHeap.cpp	/^  virtual void start_work(uint worker_id) { }$/;"	f	class:G1EvacuateRegionsBaseTask
start_work	g1CollectedHeap.cpp	/^  void start_work(uint worker_id) {$/;"	f	class:G1EvacuateRegionsTask	file:
started	g1ConcurrentMarkThread.hpp	/^  bool started()           { return _state == Started; }$/;"	f	class:G1ConcurrentMarkThread
state_for_worker	g1ParScanThreadState.cpp	/^G1ParScanThreadState* G1ParScanThreadStateSet::state_for_worker(uint worker_id) {$/;"	f	class:G1ParScanThreadStateSet
static_mem_size	g1CodeCacheRemSet.cpp	/^size_t G1CodeRootSet::static_mem_size() {$/;"	f	class:G1CodeRootSet
static_mem_size	g1CodeRootSetTable.hpp	/^  static size_t static_mem_size() {$/;"	f	class:G1CodeRootSetTable
static_mem_size	g1FromCardCache.hpp	/^  static size_t static_mem_size() {$/;"	f	class:G1FromCardCache
static_mem_size	heapRegionRemSet.cpp	/^size_t OtherRegionsTable::static_mem_size() {$/;"	f	class:OtherRegionsTable
static_mem_size	heapRegionRemSet.hpp	/^  static size_t static_mem_size() {$/;"	f	class:HeapRegionRemSet
stats	g1CollectedHeap.cpp	/^    FreeCSetStats* stats() {$/;"	f	class:G1FreeCollectionSetTask::FreeCSetClosure	file:
stddev_estimate	g1Predictions.hpp	/^  double stddev_estimate(TruncatedSeq const* seq) const {$/;"	f	class:G1Predictions
steal_and_trim_queue	g1ParScanThreadState.cpp	/^void G1ParScanThreadState::steal_and_trim_queue(G1ScannerTasksQueueSet* task_queues) {$/;"	f	class:G1ParScanThreadState
step_over_gc_barrier	c2/g1BarrierSetC2.cpp	/^Node* G1BarrierSetC2::step_over_gc_barrier(Node* c) const {$/;"	f	class:G1BarrierSetC2
stop	g1CollectedHeap.cpp	/^void G1CollectedHeap::stop() {$/;"	f	class:G1CollectedHeap
stop	g1ConcurrentRefine.cpp	/^void G1ConcurrentRefine::stop() {$/;"	f	class:G1ConcurrentRefine
stop	g1ConcurrentRefine.cpp	/^void G1ConcurrentRefineThreadControl::stop() {$/;"	f	class:G1ConcurrentRefineThreadControl
stop	g1GCPhaseTimes.cpp	/^void G1EvacPhaseWithTrimTimeTracker::stop() {$/;"	f	class:G1EvacPhaseWithTrimTimeTracker
stop_adding_regions	g1SurvRateGroup.cpp	/^void G1SurvRateGroup::stop_adding_regions() {$/;"	f	class:G1SurvRateGroup
stop_incremental_building	g1CollectionSet.hpp	/^  void stop_incremental_building() { _inc_build_state = Inactive; }$/;"	f	class:G1CollectionSet
stop_service	g1ConcurrentMarkThread.cpp	/^void G1ConcurrentMarkThread::stop_service() {$/;"	f	class:G1ConcurrentMarkThread
stop_service	g1ConcurrentRefineThread.cpp	/^void G1ConcurrentRefineThread::stop_service() {$/;"	f	class:G1ConcurrentRefineThread
stop_service	g1ServiceThread.cpp	/^void G1ServiceThread::stop_service() {$/;"	f	class:G1ServiceThread
string_dedup_cleaning	g1CollectedHeap.cpp	/^void G1CollectedHeap::string_dedup_cleaning(BoolObjectClosure* is_alive,$/;"	f	class:G1CollectedHeap
strong_clds	g1RootClosures.cpp	/^  CLDClosure* strong_clds()           { return &_closures._clds; }$/;"	f	class:G1EvacuationClosures
strong_clds	g1RootClosures.cpp	/^  CLDClosure* strong_clds()           { return &_strong._clds; }$/;"	f	class:G1ConcurrentStartMarkClosures
strong_clds	g1RootProcessor.cpp	/^  CLDClosure* strong_clds()      { return _clds; }$/;"	f	class:StrongRootsClosures
strong_clds	g1RootProcessor.cpp	/^  CLDClosure* strong_clds() { return _clds; }$/;"	f	class:AllRootsClosures
strong_code_root_scan_time	g1RemSet.cpp	/^  Tickspan strong_code_root_scan_time() const { return _strong_code_root_scan_time;  }$/;"	f	class:G1ScanCollectionSetRegionClosure
strong_code_root_trim_partially_time	g1RemSet.cpp	/^  Tickspan strong_code_root_trim_partially_time() const { return _strong_code_trim_partially_time; }$/;"	f	class:G1ScanCollectionSetRegionClosure
strong_code_roots_do	heapRegion.cpp	/^void HeapRegion::strong_code_roots_do(CodeBlobClosure* blk) const {$/;"	f	class:HeapRegion
strong_code_roots_do	heapRegionRemSet.cpp	/^void HeapRegionRemSet::strong_code_roots_do(CodeBlobClosure* blk) const {$/;"	f	class:HeapRegionRemSet
strong_code_roots_list_contains	heapRegionRemSet.hpp	/^  bool strong_code_roots_list_contains(nmethod* nm) {$/;"	f	class:HeapRegionRemSet
strong_code_roots_list_length	heapRegionRemSet.hpp	/^  size_t strong_code_roots_list_length() const {$/;"	f	class:HeapRegionRemSet
strong_code_roots_mem_size	heapRegionRemSet.cpp	/^size_t HeapRegionRemSet::strong_code_roots_mem_size() {$/;"	f	class:HeapRegionRemSet
strong_codeblobs	g1RootClosures.cpp	/^  CodeBlobClosure* strong_codeblobs()      { return &_closures._codeblobs; }$/;"	f	class:G1EvacuationClosures
strong_codeblobs	g1RootClosures.cpp	/^  CodeBlobClosure* strong_codeblobs()      { return &_strong._codeblobs; }$/;"	f	class:G1ConcurrentStartMarkClosures
strong_codeblobs	g1RootProcessor.cpp	/^  CodeBlobClosure* strong_codeblobs() { return NULL; }$/;"	f	class:AllRootsClosures
strong_codeblobs	g1RootProcessor.cpp	/^  CodeBlobClosure* strong_codeblobs() { return _blobs; }$/;"	f	class:StrongRootsClosures
strong_oops	g1RootClosures.cpp	/^  OopClosure* strong_oops() { return &_closures._oops; }$/;"	f	class:G1EvacuationClosures
strong_oops	g1RootClosures.cpp	/^  OopClosure* strong_oops() { return &_strong._oops; }$/;"	f	class:G1ConcurrentStartMarkClosures
strong_oops	g1RootProcessor.cpp	/^  OopClosure* strong_oops() { return _roots; }$/;"	f	class:AllRootsClosures
strong_oops	g1RootProcessor.cpp	/^  OopClosure* strong_oops() { return _roots; }$/;"	f	class:StrongRootsClosures
subtract_from	g1RemSetSummary.cpp	/^void G1RemSetSummary::subtract_from(G1RemSetSummary* other) {$/;"	f	class:G1RemSetSummary
success	g1CollectedHeap.cpp	/^  bool success() { return _success; }$/;"	f	class:NoYoungRegionsClosure
sum	g1NUMAStats.cpp	/^size_t G1NUMAStats::NodeDataArray::sum(uint req_index) const {$/;"	f	class:G1NUMAStats::NodeDataArray
sum_thread_work_items	g1GCPhaseTimes.cpp	/^size_t G1GCPhaseTimes::sum_thread_work_items(GCParPhases phase, uint index) {$/;"	f	class:G1GCPhaseTimes
supports_concurrent_gc_breakpoints	g1CollectedHeap.cpp	/^bool G1CollectedHeap::supports_concurrent_gc_breakpoints() const {$/;"	f	class:G1CollectedHeap
supports_tlab_allocation	g1CollectedHeap.cpp	/^bool G1CollectedHeap::supports_tlab_allocation() const {$/;"	f	class:G1CollectedHeap
surv_rate_pred	g1SurvRateGroup.hpp	/^  double surv_rate_pred(G1Predictions const& predictor, int age) const {$/;"	f	class:G1SurvRateGroup
surv_rate_prediction	heapRegion.inline.hpp	/^inline double HeapRegion::surv_rate_prediction(G1Predictions const& predictor) const {$/;"	f	class:HeapRegion
surviving_young_words	g1ParScanThreadState.cpp	/^const size_t* G1ParScanThreadStateSet::surviving_young_words() const {$/;"	f	class:G1ParScanThreadStateSet
survivor	g1CollectedHeap.hpp	/^  const G1SurvivorRegions* survivor() const { return &_survivor; }$/;"	f	class:G1CollectedHeap
survivor_attempt_allocation	g1Allocator.cpp	/^HeapWord* G1Allocator::survivor_attempt_allocation(size_t min_word_size,$/;"	f	class:G1Allocator
survivor_gc_alloc_region	g1Allocator.inline.hpp	/^inline SurvivorGCAllocRegion* G1Allocator::survivor_gc_alloc_region(uint node_index) {$/;"	f	class:G1Allocator
survivor_is_full	g1Allocator.cpp	/^bool G1Allocator::survivor_is_full() const {$/;"	f	class:G1Allocator
survivor_region_length	g1CollectionSet.hpp	/^  uint survivor_region_length() const { return _survivor_region_length; }$/;"	f	class:G1CollectionSet
survivor_regions_count	g1CollectedHeap.hpp	/^  uint survivor_regions_count() const { return _survivor.length(); }$/;"	f	class:G1CollectedHeap
survivor_regions_count	g1CollectedHeap.hpp	/^  uint survivor_regions_count(uint node_index) const { return _survivor.regions_on_node(node_index); }$/;"	f	class:G1CollectedHeap
survivor_regions_used_bytes	g1CollectedHeap.hpp	/^  size_t survivor_regions_used_bytes() const { return _survivor.used_bytes(); }$/;"	f	class:G1CollectedHeap
survivor_space_memory_usage	g1MonitoringSupport.cpp	/^MemoryUsage G1MonitoringSupport::survivor_space_memory_usage(size_t initial_size, size_t max_size) {$/;"	f	class:G1MonitoringSupport
survivor_space_used	g1MonitoringSupport.hpp	/^  size_t survivor_space_used()        { return _survivor_space_used; }$/;"	f	class:G1MonitoringSupport
swap_mark_bitmaps	g1ConcurrentMark.cpp	/^void G1ConcurrentMark::swap_mark_bitmaps() {$/;"	f	class:G1ConcurrentMark
switch_region	g1FullGCCompactionPoint.cpp	/^void G1FullGCCompactionPoint::switch_region() {$/;"	f	class:G1FullGCCompactionPoint
take	g1DirtyCardQueue.cpp	/^G1DirtyCardQueueSet::HeadTail G1DirtyCardQueueSet::PausedBuffers::PausedList::take() {$/;"	f	class:G1DirtyCardQueueSet::PausedBuffers::PausedList
take_all	g1DirtyCardQueue.cpp	/^G1DirtyCardQueueSet::HeadTail G1DirtyCardQueueSet::PausedBuffers::take_all() {$/;"	f	class:G1DirtyCardQueueSet::PausedBuffers
take_all	g1DirtyCardQueue.cpp	/^G1DirtyCardQueueSet::HeadTail G1DirtyCardQueueSet::Queue::take_all() {$/;"	f	class:G1DirtyCardQueueSet::Queue
take_all_completed_buffers	g1DirtyCardQueue.cpp	/^G1BufferNodeList G1DirtyCardQueueSet::take_all_completed_buffers() {$/;"	f	class:G1DirtyCardQueueSet
take_all_completed_buffers	g1RedirtyCardsQueue.cpp	/^G1BufferNodeList G1RedirtyCardsQueueBase::LocalQSet::take_all_completed_buffers() {$/;"	f	class:G1RedirtyCardsQueueBase::LocalQSet
take_all_completed_buffers	g1RedirtyCardsQueue.cpp	/^G1BufferNodeList G1RedirtyCardsQueueSet::take_all_completed_buffers() {$/;"	f	class:G1RedirtyCardsQueueSet
take_previous	g1DirtyCardQueue.cpp	/^G1DirtyCardQueueSet::HeadTail G1DirtyCardQueueSet::PausedBuffers::take_previous() {$/;"	f	class:G1DirtyCardQueueSet::PausedBuffers
target_heap_capacity	g1HeapSizingPolicy.cpp	/^static size_t target_heap_capacity(size_t used_bytes, uintx free_ratio) {$/;"	f	file:
target_number	heapRegionBounds.inline.hpp	/^size_t HeapRegionBounds::target_number() {$/;"	f	class:HeapRegionBounds
task	g1ConcurrentMark.hpp	/^  G1CMTask* task(uint id) {$/;"	f	class:G1ConcurrentMark
task_queue	g1CollectedHeap.inline.hpp	/^inline G1ScannerTasksQueue* G1CollectedHeap::task_queue(uint i) const {$/;"	f	class:G1CollectedHeap
tear_down_region_sets	g1CollectedHeap.cpp	/^void G1CollectedHeap::tear_down_region_sets(bool free_list_only) {$/;"	f	class:G1CollectedHeap
tenuring_threshold	g1Policy.hpp	/^  uint tenuring_threshold() const { return _tenuring_threshold; }$/;"	f	class:G1Policy
term_attempts	g1CollectedHeap.hpp	/^  size_t term_attempts() const { return _term_attempts; }$/;"	f	class:G1ParEvacuateFollowersClosure
term_time	g1CollectedHeap.hpp	/^  double term_time() const { return _term_time; }$/;"	f	class:G1ParEvacuateFollowersClosure
terminating	g1VMOperations.hpp	/^  bool terminating() const { return _terminating; }$/;"	f	class:VM_G1TryInitiateConcMark
terminator	g1CollectedHeap.hpp	/^  TaskTerminator*         terminator()     { return _terminator; }$/;"	f	class:G1ParEvacuateFollowersClosure
terminator	g1ConcurrentMark.hpp	/^  TaskTerminator*     terminator()   { return &_terminator; }$/;"	f	class:G1ConcurrentMark
threads_do	g1ConcurrentMark.cpp	/^void G1ConcurrentMark::threads_do(ThreadClosure* tc) const {$/;"	f	class:G1ConcurrentMark
threads_do	g1ConcurrentRefine.cpp	/^void G1ConcurrentRefine::threads_do(ThreadClosure *tc) {$/;"	f	class:G1ConcurrentRefine
threshold	g1BlockOffsetTable.hpp	/^  HeapWord* threshold() const { return _next_offset_threshold; }$/;"	f	class:G1BlockOffsetTablePart
time_since_last_collection	g1CollectedHeap.hpp	/^  Tickspan time_since_last_collection() const { return Ticks::now() - _collection_pause_end; }$/;"	f	class:G1CollectedHeap
timer	g1FullGCScope.cpp	/^STWGCTimer* G1FullGCScope::timer() {$/;"	f	class:G1FullGCScope
timer_for_region	g1CollectedHeap.cpp	/^    Tickspan& timer_for_region(HeapRegion* r) {$/;"	f	class:G1FreeCollectionSetTask::FreeCSetClosure	file:
tlab_capacity	g1CollectedHeap.cpp	/^size_t G1CollectedHeap::tlab_capacity(Thread* ignored) const {$/;"	f	class:G1CollectedHeap
tlab_used	g1CollectedHeap.cpp	/^size_t G1CollectedHeap::tlab_used(Thread* ignored) const {$/;"	f	class:G1CollectedHeap
to_string	g1HeapRegionTraceType.hpp	/^  static const char* to_string(G1HeapRegionTraceType::Type type) {$/;"	f	class:G1HeapRegionTraceType
to_string	g1YCTypes.hpp	/^  static const char* to_string(G1YCType type) {$/;"	f	class:G1YCTypeHelper
top	g1DirtyCardQueue.cpp	/^BufferNode* G1DirtyCardQueueSet::Queue::top() const {$/;"	f	class:G1DirtyCardQueueSet::Queue
top	heapRegion.hpp	/^  HeapWord* top() const { return _top; }$/;"	f	class:HeapRegion
top_at_rebuild_start	g1ConcurrentMark.inline.hpp	/^inline HeapWord* G1ConcurrentMark::top_at_rebuild_start(uint region) const {$/;"	f	class:G1ConcurrentMark
total_cards_occupied	g1RemSetSummary.cpp	/^  size_t total_cards_occupied() const       { return _all.cards_occupied(); }$/;"	f	class:HRRSStatsIter	file:
total_code_root_elems	g1RemSetSummary.cpp	/^  size_t total_code_root_elems() const      { return _all.code_root_elems(); }$/;"	f	class:HRRSStatsIter	file:
total_code_root_mem_sz	g1RemSetSummary.cpp	/^  size_t total_code_root_mem_sz() const     { return _all.code_root_mem_size(); }$/;"	f	class:HRRSStatsIter	file:
total_free_bytes	heapRegionManager.hpp	/^  size_t total_free_bytes() const {$/;"	f	class:HeapRegionManager
total_free_cset_time_ms	g1GCPhaseTimes.hpp	/^  double total_free_cset_time_ms() {$/;"	f	class:G1GCPhaseTimes
total_rebuild_freelist_time_ms	g1GCPhaseTimes.hpp	/^  double total_rebuild_freelist_time_ms() {$/;"	f	class:G1GCPhaseTimes
total_regions_committed	heterogeneousHeapRegionManager.cpp	/^uint HeterogeneousHeapRegionManager::total_regions_committed() const {$/;"	f	class:HeterogeneousHeapRegionManager
total_rs_mem_sz	g1RemSetSummary.cpp	/^  size_t total_rs_mem_sz() const            { return _all.rs_mem_size(); }$/;"	f	class:HRRSStatsIter	file:
total_selected_for_rebuild	g1ConcurrentMark.cpp	/^  uint total_selected_for_rebuild() const { return _total_selected_for_rebuild; }$/;"	f	class:G1UpdateRemSetTrackingBeforeRebuildTask
total_used	g1CollectedHeap.cpp	/^  size_t total_used() {$/;"	f	class:RebuildRegionSetsClosure
trace	g1AllocRegion.cpp	/^void G1AllocRegion::trace(const char* str, size_t min_word_size, size_t desired_word_size, size_t actual_word_size, HeapWord* result) {$/;"	f	class:G1AllocRegion
trace_count	g1GCPhaseTimes.cpp	/^void G1GCPhaseTimes::trace_count(const char* name, size_t value) const {$/;"	f	class:G1GCPhaseTimes
trace_heap	g1CollectedHeap.cpp	/^void G1CollectedHeap::trace_heap(GCWhen::Type when, const GCTracer* gc_tracer) {$/;"	f	class:G1CollectedHeap
trace_phase	g1GCPhaseTimes.cpp	/^void G1GCPhaseTimes::trace_phase(WorkerDataArray<double>* phase, bool print_sum, uint extra_indent) const {$/;"	f	class:G1GCPhaseTimes
trace_time	g1GCPhaseTimes.cpp	/^void G1GCPhaseTimes::trace_time(const char* name, double value) const {$/;"	f	class:G1GCPhaseTimes
tracer	g1FullGCScope.cpp	/^G1FullGCTracer* G1FullGCScope::tracer() {$/;"	f	class:G1FullGCScope
transfer_survivors_to_cset	g1Policy.cpp	/^void G1Policy::transfer_survivors_to_cset(const G1SurvivorRegions* survivors) {$/;"	f	class:G1Policy
transient_failure	g1VMOperations.hpp	/^  bool transient_failure() const { return _transient_failure; }$/;"	f	class:VM_G1TryInitiateConcMark
trim_index	g1MMUTracker.hpp	/^  inline int trim_index(int index) {$/;"	f	class:G1MMUTrackerQueue
trim_queue	g1ParScanThreadState.inline.hpp	/^void G1ParScanThreadState::trim_queue() {$/;"	f	class:G1ParScanThreadState
trim_queue_partially	g1OopClosures.inline.hpp	/^inline void G1ScanClosureBase::trim_queue_partially() {$/;"	f	class:G1ScanClosureBase
trim_queue_partially	g1OopClosures.inline.hpp	/^void G1ParCopyHelper::trim_queue_partially() {$/;"	f	class:G1ParCopyHelper
trim_queue_partially	g1ParScanThreadState.inline.hpp	/^void G1ParScanThreadState::trim_queue_partially() {$/;"	f	class:G1ParScanThreadState
trim_queue_to_threshold	g1ParScanThreadState.cpp	/^void G1ParScanThreadState::trim_queue_to_threshold(uint threshold) {$/;"	f	class:G1ParScanThreadState
trim_ticks	g1ParScanThreadState.inline.hpp	/^inline Tickspan G1ParScanThreadState::trim_ticks() const {$/;"	f	class:G1ParScanThreadState
try_collect	g1CollectedHeap.cpp	/^bool G1CollectedHeap::try_collect(GCCause::Cause cause) {$/;"	f	class:G1CollectedHeap
try_collect_concurrently	g1CollectedHeap.cpp	/^bool G1CollectedHeap::try_collect_concurrently(GCCause::Cause cause,$/;"	f	class:G1CollectedHeap
try_stealing	g1ConcurrentMark.cpp	/^bool G1ConcurrentMark::try_stealing(uint worker_id, G1TaskQueueEntry& task_entry) {$/;"	f	class:G1ConcurrentMark
type	g1BarrierSet.hpp	/^  typedef ::G1BarrierSet type;$/;"	t	struct:BarrierSet::GetType
type	g1HeapRegionAttr.hpp	/^  region_type_t type() const           { return _type; }$/;"	f	struct:G1HeapRegionAttr
type	g1HeapRegionEventSender.cpp	/^  virtual VMOp_Type type() const { return VMOp_HeapIterateOperation; }$/;"	f	class:VM_G1SendHeapRegionInfoEvents	file:
type	g1Trace.hpp	/^  G1YCType type() const { return _type; }$/;"	f	class:G1YoungGCInfo
type	g1VMOperations.hpp	/^  virtual VMOp_Type type() const { return VMOp_G1CollectForAllocation; }$/;"	f	class:VM_G1CollectForAllocation
type	g1VMOperations.hpp	/^  virtual VMOp_Type type() const { return VMOp_G1CollectFull; }$/;"	f	class:VM_G1CollectFull
type	g1VMOperations.hpp	/^  virtual VMOp_Type type() const { return VMOp_G1Concurrent; }$/;"	f	class:VM_G1Concurrent
type	g1VMOperations.hpp	/^  virtual VMOp_Type type() const { return VMOp_G1TryInitiateConcMark; }$/;"	f	class:VM_G1TryInitiateConcMark
uncommit	g1HRPrinter.hpp	/^  void uncommit(HeapRegion* hr) {$/;"	f	class:G1HRPrinter
uncommit	g1PageBasedVirtualSpace.cpp	/^void G1PageBasedVirtualSpace::uncommit(size_t start_page, size_t size_in_pages) {$/;"	f	class:G1PageBasedVirtualSpace
uncommit_internal	g1PageBasedVirtualSpace.cpp	/^void G1PageBasedVirtualSpace::uncommit_internal(size_t start_page, size_t end_page) {$/;"	f	class:G1PageBasedVirtualSpace
uncommit_regions	g1RegionToSpaceMapper.cpp	/^  virtual void uncommit_regions(uint start_idx, size_t num_regions) {$/;"	f	class:G1RegionsLargerThanCommitSizeMapper
uncommit_regions	g1RegionToSpaceMapper.cpp	/^  virtual void uncommit_regions(uint start_idx, size_t num_regions) {$/;"	f	class:G1RegionsSmallerThanCommitSizeMapper
uncommit_regions	g1RegionToSpaceMapper.cpp	/^void G1RegionToHeteroSpaceMapper::uncommit_regions(uint start_idx, size_t num_regions) {$/;"	f	class:G1RegionToHeteroSpaceMapper
uncommit_regions	heapRegionManager.cpp	/^void HeapRegionManager::uncommit_regions(uint start, size_t num_regions) {$/;"	f	class:HeapRegionManager
uncommitted_size	g1PageBasedVirtualSpace.cpp	/^size_t G1PageBasedVirtualSpace::uncommitted_size()  const {$/;"	f	class:G1PageBasedVirtualSpace
undo_allocation	g1Allocator.cpp	/^void G1PLABAllocator::undo_allocation(G1HeapRegionAttr dest, HeapWord* obj, size_t word_sz, uint node_index) {$/;"	f	class:G1PLABAllocator
undo_allocation	g1ParScanThreadState.cpp	/^void G1ParScanThreadState::undo_allocation(G1HeapRegionAttr dest_attr,$/;"	f	class:G1ParScanThreadState
undo_waste	g1Allocator.cpp	/^size_t G1PLABAllocator::undo_waste() const {$/;"	f	class:G1PLABAllocator
uninstall_surv_rate_group	heapRegion.inline.hpp	/^inline void HeapRegion::uninstall_surv_rate_group() {$/;"	f	class:HeapRegion
union_bitmap_into	heapRegionRemSet.hpp	/^  void union_bitmap_into(BitMap* bm) {$/;"	f	class:PerRegionTable
unlink_from_list	heapRegion.cpp	/^void HeapRegion::unlink_from_list() {$/;"	f	class:HeapRegion
unlink_or_oops_do_impl	g1StringDedupQueue.cpp	/^void G1StringDedupQueue::unlink_or_oops_do_impl(StringDedupUnlinkOrOopsDoClosure* cl, size_t queue) {$/;"	f	class:G1StringDedupQueue
unregister_nmethod	g1CollectedHeap.cpp	/^void G1CollectedHeap::unregister_nmethod(nmethod* nm) {$/;"	f	class:G1CollectedHeap
unsafe_max_tlab_alloc	g1Allocator.cpp	/^size_t G1Allocator::unsafe_max_tlab_alloc() {$/;"	f	class:G1Allocator
unsafe_max_tlab_alloc	g1CollectedHeap.cpp	/^size_t G1CollectedHeap::unsafe_max_tlab_alloc(Thread* ignored) const {$/;"	f	class:G1CollectedHeap
unused_committed_regions_in_bytes	g1CollectedHeap.cpp	/^size_t G1CollectedHeap::unused_committed_regions_in_bytes() const {$/;"	f	class:G1CollectedHeap
update	g1FullGCCompactionPoint.cpp	/^void G1FullGCCompactionPoint::update() {$/;"	f	class:G1FullGCCompactionPoint
update	g1NUMAStats.cpp	/^void G1NUMAStats::update(G1NUMAStats::NodeDataItems phase,$/;"	f	class:G1NUMAStats
update	g1RemSetSummary.cpp	/^void G1RemSetSummary::update() {$/;"	f	class:G1RemSetSummary
update_accum_task_vtime	g1ConcurrentMark.hpp	/^  void update_accum_task_vtime(int i, double vtime) {$/;"	f	class:G1ConcurrentMark
update_after_rebuild	g1RemSetTrackingPolicy.cpp	/^void G1RemSetTrackingPolicy::update_after_rebuild(HeapRegion* r) {$/;"	f	class:G1RemSetTrackingPolicy
update_all	g1MonitoringSupport.cpp	/^  virtual void update_all() {$/;"	f	class:G1OldGenerationCounters
update_all	g1MonitoringSupport.cpp	/^  virtual void update_all() {$/;"	f	class:G1YoungGenerationCounters
update_alloc_region	g1AllocRegion.cpp	/^void G1AllocRegion::update_alloc_region(HeapRegion* alloc_region) {$/;"	f	class:G1AllocRegion
update_allocation_info	g1IHOPControl.cpp	/^void G1AdaptiveIHOPControl::update_allocation_info(double allocation_time_s,$/;"	f	class:G1AdaptiveIHOPControl
update_allocation_info	g1IHOPControl.cpp	/^void G1IHOPControl::update_allocation_info(double allocation_time_s, size_t additional_buffer_size) {$/;"	f	class:G1IHOPControl
update_at_allocate	g1RemSetTrackingPolicy.cpp	/^void G1RemSetTrackingPolicy::update_at_allocate(HeapRegion* r) {$/;"	f	class:G1RemSetTrackingPolicy
update_at_free	g1RemSetTrackingPolicy.cpp	/^void G1RemSetTrackingPolicy::update_at_free(HeapRegion* r) {$/;"	f	class:G1RemSetTrackingPolicy
update_before_rebuild	g1RemSetTrackingPolicy.cpp	/^bool G1RemSetTrackingPolicy::update_before_rebuild(HeapRegion* r, size_t live_bytes) {$/;"	f	class:G1RemSetTrackingPolicy
update_derived_pointers	g1FullCollector.cpp	/^static void update_derived_pointers() {$/;"	f	file:
update_eden_size	g1MonitoringSupport.cpp	/^void G1MonitoringSupport::update_eden_size() {$/;"	f	class:G1MonitoringSupport
update_humongous_before_rebuild	g1RemSetTrackingPolicy.cpp	/^bool G1RemSetTrackingPolicy::update_humongous_before_rebuild(HeapRegion* r, bool is_live) {$/;"	f	class:G1RemSetTrackingPolicy
update_ihop_prediction	g1Policy.cpp	/^void G1Policy::update_ihop_prediction(double mutator_time_s,$/;"	f	class:G1Policy
update_incremental_marker	g1CollectionSet.hpp	/^  void update_incremental_marker() { _inc_build_state = Active; _inc_part_start = _collection_set_cur_length; }$/;"	f	class:G1CollectionSet
update_liveness	g1ConcurrentMark.inline.hpp	/^inline void G1CMTask::update_liveness(oop const obj, const size_t obj_size) {$/;"	f	class:G1CMTask
update_marked_bytes	g1ConcurrentMark.cpp	/^    void update_marked_bytes(HeapRegion* hr) {$/;"	f	class:G1UpdateRemSetTrackingBeforeRebuildTask::G1UpdateRemSetTrackingBeforeRebuild	file:
update_marking_length	g1IHOPControl.cpp	/^void G1AdaptiveIHOPControl::update_marking_length(double marking_length_s) {$/;"	f	class:G1AdaptiveIHOPControl
update_marking_length	g1IHOPControl.hpp	/^  virtual void update_marking_length(double marking_length_s) {$/;"	f	class:G1StaticIHOPControl
update_max_gc_locker_expansion	g1Policy.cpp	/^void G1Policy::update_max_gc_locker_expansion() {$/;"	f	class:G1Policy
update_numa_stats	g1ParScanThreadState.cpp	/^void G1ParScanThreadState::update_numa_stats(uint node_index) {$/;"	f	class:G1ParScanThreadState
update_recent_gc_times	g1Analytics.cpp	/^void G1Analytics::update_recent_gc_times(double end_time_sec,$/;"	f	class:G1Analytics
update_region_limit	g1ConcurrentMark.cpp	/^void G1CMTask::update_region_limit() {$/;"	f	class:G1CMTask
update_remset_before_rebuild	g1ConcurrentMark.cpp	/^    void update_remset_before_rebuild(HeapRegion* hr) {$/;"	f	class:G1UpdateRemSetTrackingBeforeRebuildTask::G1UpdateRemSetTrackingBeforeRebuild	file:
update_rs_length_prediction	g1Policy.cpp	/^void G1Policy::update_rs_length_prediction() {$/;"	f	class:G1Policy
update_rs_length_prediction	g1Policy.cpp	/^void G1Policy::update_rs_length_prediction(size_t prediction) {$/;"	f	class:G1Policy
update_sets	g1FullGCPrepareTask.cpp	/^void G1FullGCPrepareTask::G1CalculatePointersClosure::update_sets() {$/;"	f	class:G1FullGCPrepareTask::G1CalculatePointersClosure
update_sizes	g1MonitoringSupport.cpp	/^void G1MonitoringSupport::update_sizes() {$/;"	f	class:G1MonitoringSupport
update_statistics	g1NUMA.cpp	/^void G1NUMA::update_statistics(G1NUMAStats::NodeDataItems phase,$/;"	f	class:G1NUMA
update_survivors_policy	g1Policy.cpp	/^void G1Policy::update_survivors_policy() {$/;"	f	class:G1Policy
update_tail	g1RedirtyCardsQueue.cpp	/^void G1RedirtyCardsQueueSet::update_tail(BufferNode* node) {$/;"	f	class:G1RedirtyCardsQueueSet
update_target_occupancy	g1IHOPControl.cpp	/^void G1IHOPControl::update_target_occupancy(size_t new_target_occupancy) {$/;"	f	class:G1IHOPControl
update_top_at_rebuild_start	g1ConcurrentMark.inline.hpp	/^inline void G1ConcurrentMark::update_top_at_rebuild_start(HeapRegion* r) {$/;"	f	class:G1ConcurrentMark
update_totals	g1CollectionSetChooser.cpp	/^  void update_totals(uint num_regions, size_t reclaimable_bytes) {$/;"	f	class:G1BuildCandidateRegionsTask	file:
update_young_list_max_and_target_length	g1Policy.cpp	/^uint G1Policy::update_young_list_max_and_target_length() {$/;"	f	class:G1Policy
update_young_list_max_and_target_length	g1Policy.cpp	/^uint G1Policy::update_young_list_max_and_target_length(size_t rs_length) {$/;"	f	class:G1Policy
update_young_list_target_length	g1Policy.cpp	/^uint G1Policy::update_young_list_target_length(size_t rs_length) {$/;"	f	class:G1Policy
update_young_region_prediction	g1CollectionSet.cpp	/^void G1CollectionSet::update_young_region_prediction(HeapRegion* hr,$/;"	f	class:G1CollectionSet
update_zones	g1ConcurrentRefine.cpp	/^void G1ConcurrentRefine::update_zones(double logged_cards_scan_time,$/;"	f	class:G1ConcurrentRefine
updatemsg	g1SendMsg.cpp	/^void messageAll::updatemsg(uint64_t addr, uint32_t hid){$/;"	f	class:messageAll
use_adaptive_young_list_length	g1Policy.cpp	/^bool G1Policy::use_adaptive_young_list_length() const {$/;"	f	class:G1Policy
use_adaptive_young_list_length	g1YoungGenSizer.hpp	/^  bool use_adaptive_young_list_length() const {$/;"	f	class:G1YoungGenSizer
use_cache	g1HotCardCache.hpp	/^  bool use_cache() { return _use_cache; }$/;"	f	class:G1HotCardCache
used	g1Allocator.hpp	/^  size_t used() {$/;"	f	class:G1ArchiveAllocator
used	g1CollectedHeap.cpp	/^size_t G1CollectedHeap::used() const {$/;"	f	class:G1CollectedHeap
used	heapRegion.hpp	/^  size_t used() const { return byte_size(bottom(), top()); }$/;"	f	class:HeapRegion
used_bytes	g1EdenRegions.hpp	/^  size_t used_bytes() const { return _used_bytes; }$/;"	f	class:G1EdenRegions
used_bytes	g1SurvivorRegions.hpp	/^  size_t used_bytes() const { return _used_bytes; }$/;"	f	class:G1SurvivorRegions
used_in_alloc_regions	g1AllocRegion.cpp	/^size_t MutatorAllocRegion::used_in_alloc_regions() {$/;"	f	class:MutatorAllocRegion
used_in_alloc_regions	g1Allocator.cpp	/^size_t G1Allocator::used_in_alloc_regions() {$/;"	f	class:G1Allocator
used_in_bytes	g1MemoryPool.hpp	/^  size_t used_in_bytes() { return _g1mm->eden_space_used(); }$/;"	f	class:G1EdenPool
used_in_bytes	g1MemoryPool.hpp	/^  size_t used_in_bytes() { return _g1mm->old_gen_used(); }$/;"	f	class:G1OldGenPool
used_in_bytes	g1MemoryPool.hpp	/^  size_t used_in_bytes() { return _g1mm->survivor_space_used(); }$/;"	f	class:G1SurvivorPool
used_memory	g1OopStarChunkedList.hpp	/^  size_t used_memory() { return _used_memory; }$/;"	f	class:G1OopStarChunkedList
used_unlocked	g1CollectedHeap.cpp	/^size_t G1CollectedHeap::used_unlocked() const {$/;"	f	class:G1CollectedHeap
valid	g1CollectionSet.cpp	/^  bool valid() const { return _valid; }$/;"	f	class:G1VerifyYoungAgesClosure
valid_entry	sparsePRT.hpp	/^  bool valid_entry() const { return r_ind() >= 0; }$/;"	f	class:SparsePRTEntry
value	g1BarrierSet.hpp	/^  static const BarrierSet::Name value = BarrierSet::G1BarrierSet;$/;"	m	struct:BarrierSet::GetName
value	g1RemSet.cpp	/^  uint value() const { return _cur_claim; }$/;"	f	class:G1CardTableChunkClaimer
verifier	g1CollectedHeap.hpp	/^  G1HeapVerifier* verifier() {$/;"	f	class:G1CollectedHeap
verify	g1BlockOffsetTable.cpp	/^void G1BlockOffsetTablePart::verify() const {$/;"	f	class:G1BlockOffsetTablePart
verify	g1CollectedHeap.cpp	/^void G1CollectedHeap::verify(VerifyOption vo) {$/;"	f	class:G1CollectedHeap
verify	g1CollectionSetCandidates.cpp	/^void G1CollectionSetCandidates::verify() const {$/;"	f	class:G1CollectionSetCandidates
verify	g1HeapVerifier.cpp	/^double G1HeapVerifier::verify(G1VerifyType type, VerifyOption vo, const char* msg) {$/;"	f	class:G1HeapVerifier
verify	g1HeapVerifier.cpp	/^void G1HeapVerifier::verify(VerifyOption vo) {$/;"	f	class:G1HeapVerifier
verify	heapRegion.cpp	/^void HeapRegion::verify() const {$/;"	f	class:HeapRegion
verify	heapRegion.cpp	/^void HeapRegion::verify(VerifyOption vo,$/;"	f	class:HeapRegion
verify	heapRegionManager.cpp	/^void HeapRegionManager::verify() {$/;"	f	class:HeapRegionManager
verify	heapRegionSet.cpp	/^void FreeRegionList::verify() {$/;"	f	class:FreeRegionList
verify	heapRegionSet.cpp	/^void HeapRegionSetBase::verify() {$/;"	f	class:HeapRegionSetBase
verify	heterogeneousHeapRegionManager.cpp	/^void HeterogeneousHeapRegionManager::verify() {$/;"	f	class:HeterogeneousHeapRegionManager
verify_after_full_collection	g1CollectedHeap.cpp	/^void G1CollectedHeap::verify_after_full_collection() {$/;"	f	class:G1CollectedHeap
verify_after_gc	g1HeapVerifier.cpp	/^void G1HeapVerifier::verify_after_gc(G1VerifyType type) {$/;"	f	class:G1HeapVerifier
verify_after_marking	g1FullCollector.cpp	/^void G1FullCollector::verify_after_marking() {$/;"	f	class:G1FullCollector
verify_after_young_collection	g1CollectedHeap.cpp	/^void G1CollectedHeap::verify_after_young_collection(G1HeapVerifier::G1VerifyType type) {$/;"	f	class:G1CollectedHeap
verify_archive_regions	g1HeapVerifier.cpp	/^void G1HeapVerifier::verify_archive_regions() {$/;"	f	class:G1HeapVerifier
verify_before_full_collection	g1CollectedHeap.cpp	/^void G1CollectedHeap::verify_before_full_collection(bool explicit_gc) {$/;"	f	class:G1CollectedHeap
verify_before_gc	g1HeapVerifier.cpp	/^void G1HeapVerifier::verify_before_gc(G1VerifyType type) {$/;"	f	class:G1HeapVerifier
verify_before_young_collection	g1CollectedHeap.cpp	/^void G1CollectedHeap::verify_before_young_collection(G1HeapVerifier::G1VerifyType type) {$/;"	f	class:G1CollectedHeap
verify_biased_index	g1BiasedArray.cpp	/^void G1BiasedMappedArrayBase::verify_biased_index(idx_t biased_index) const {$/;"	f	class:G1BiasedMappedArrayBase
verify_biased_index_inclusive_end	g1BiasedArray.cpp	/^void G1BiasedMappedArrayBase::verify_biased_index_inclusive_end(idx_t biased_index) const {$/;"	f	class:G1BiasedMappedArrayBase
verify_bitmaps	g1HeapVerifier.cpp	/^bool G1HeapVerifier::verify_bitmaps(const char* caller, HeapRegion* hr) {$/;"	f	class:G1HeapVerifier
verify_card_table_cleanup	g1HeapVerifier.cpp	/^void G1HeapVerifier::verify_card_table_cleanup() {$/;"	f	class:G1HeapVerifier
verify_counts	g1HeapVerifier.cpp	/^  void verify_counts(HeapRegionSet* old_set, HeapRegionSet* archive_set, HeapRegionSet* humongous_set, HeapRegionManager* free_list) {$/;"	f	class:VerifyRegionListsClosure
verify_dirty_region	g1HeapVerifier.cpp	/^void G1HeapVerifier::verify_dirty_region(HeapRegion* hr) {$/;"	f	class:G1HeapVerifier
verify_dirty_young_regions	g1HeapVerifier.cpp	/^void G1HeapVerifier::verify_dirty_young_regions() {$/;"	f	class:G1HeapVerifier
verify_during_pause	g1ConcurrentMark.cpp	/^void G1ConcurrentMark::verify_during_pause(G1HeapVerifier::G1VerifyType type, VerifyOption vo, const char* caller) {$/;"	f	class:G1ConcurrentMark
verify_empty	g1RedirtyCardsQueue.cpp	/^void G1RedirtyCardsQueueSet::verify_empty() const {$/;"	f	class:G1RedirtyCardsQueueSet
verify_end	heapRegionSet.cpp	/^void HeapRegionSetBase::verify_end() {$/;"	f	class:HeapRegionSetBase
verify_g1_young_region	g1CardTable.cpp	/^void G1CardTable::verify_g1_young_region(MemRegion mr) {$/;"	f	class:G1CardTable
verify_gc_barriers	c2/g1BarrierSetC2.cpp	/^void G1BarrierSetC2::verify_gc_barriers(Compile* compile, CompilePhase phase) const {$/;"	f	class:G1BarrierSetC2
verify_impl	g1StringDedupQueue.cpp	/^void G1StringDedupQueue::verify_impl() {$/;"	f	class:G1StringDedupQueue
verify_index	g1BiasedArray.cpp	/^void G1BiasedMappedArrayBase::verify_index(idx_t index) const {$/;"	f	class:G1BiasedMappedArrayBase
verify_list	heapRegionSet.cpp	/^void FreeRegionList::verify_list() {$/;"	f	class:FreeRegionList
verify_liveness	heapRegion.cpp	/^  void verify_liveness(T* p) {$/;"	f	class:VerifyLiveClosure
verify_nmethod	g1CollectedHeap.hpp	/^  virtual void verify_nmethod(nmethod* nm) {}$/;"	f	class:G1CollectedHeap
verify_no_bits_over_tams	g1HeapVerifier.cpp	/^bool G1HeapVerifier::verify_no_bits_over_tams(const char* bitmap_name, const G1CMBitMap* const bitmap,$/;"	f	class:G1HeapVerifier
verify_no_collection_set_oops	g1ConcurrentMark.cpp	/^void G1ConcurrentMark::verify_no_collection_set_oops() {$/;"	f	class:G1ConcurrentMark
verify_not_dirty_region	g1HeapVerifier.cpp	/^void G1HeapVerifier::verify_not_dirty_region(HeapRegion* hr) {$/;"	f	class:G1HeapVerifier
verify_num_cards	g1DirtyCardQueue.cpp	/^void G1DirtyCardQueueSet::verify_num_cards() const {$/;"	f	class:G1DirtyCardQueueSet
verify_numa_regions	g1CollectedHeap.cpp	/^void G1CollectedHeap::verify_numa_regions(const char* desc) {$/;"	f	class:G1CollectedHeap
verify_optional	heapRegionManager.cpp	/^void HeapRegionManager::verify_optional() {$/;"	f	class:HeapRegionManager
verify_optional	heapRegionSet.hpp	/^  void verify_optional() { DEBUG_ONLY(verify();) }$/;"	f	class:HeapRegionSetBase
verify_ready_for_archiving	g1HeapVerifier.cpp	/^void G1HeapVerifier::verify_ready_for_archiving() {$/;"	f	class:G1HeapVerifier
verify_region	heapRegionSet.cpp	/^void HeapRegionSetBase::verify_region(HeapRegion* hr) {$/;"	f	class:HeapRegionSetBase
verify_region_attr_remset_update	g1CollectedHeap.cpp	/^void G1CollectedHeap::verify_region_attr_remset_update() {$/;"	f	class:G1CollectedHeap
verify_region_sets	g1HeapVerifier.cpp	/^void G1HeapVerifier::verify_region_sets() {$/;"	f	class:G1HeapVerifier
verify_region_sets_optional	g1HeapVerifier.hpp	/^  void verify_region_sets_optional() { DEBUG_ONLY(verify_region_sets();) }$/;"	f	class:G1HeapVerifier
verify_rem_set	heapRegion.cpp	/^void HeapRegion::verify_rem_set() const {$/;"	f	class:HeapRegion
verify_rem_set	heapRegion.cpp	/^void HeapRegion::verify_rem_set(VerifyOption vo, bool* failures) const {$/;"	f	class:HeapRegion
verify_remembered_set	heapRegion.cpp	/^  void verify_remembered_set(T* p) {$/;"	f	class:VerifyRemSetClosure
verify_start	heapRegionSet.cpp	/^void HeapRegionSetBase::verify_start() {$/;"	f	class:HeapRegionSetBase
verify_strong_code_roots	heapRegion.cpp	/^void HeapRegion::verify_strong_code_roots(VerifyOption vo, bool* failures) const {$/;"	f	class:HeapRegion
verify_task	g1ParScanThreadState.cpp	/^void G1ParScanThreadState::verify_task(PartialArrayScanTask task) const {$/;"	f	class:G1ParScanThreadState
verify_task	g1ParScanThreadState.cpp	/^void G1ParScanThreadState::verify_task(ScannerTask task) const {$/;"	f	class:G1ParScanThreadState
verify_task	g1ParScanThreadState.cpp	/^void G1ParScanThreadState::verify_task(narrowOop* task) const {$/;"	f	class:G1ParScanThreadState
verify_task	g1ParScanThreadState.cpp	/^void G1ParScanThreadState::verify_task(oop* task) const {$/;"	f	class:G1ParScanThreadState
verify_young_ages	g1CollectionSet.cpp	/^bool G1CollectionSet::verify_young_ages() {$/;"	f	class:G1CollectionSet
verify_young_cset_indices	g1CollectionSet.cpp	/^void G1CollectionSet::verify_young_cset_indices() const {$/;"	f	class:G1CollectionSet
visit	c1/g1BarrierSetC1.hpp	/^  virtual void visit(LIR_OpVisitState* visitor) {$/;"	f	class:G1PostBarrierStub
visit	c1/g1BarrierSetC1.hpp	/^  virtual void visit(LIR_OpVisitState* visitor) {$/;"	f	class:G1PreBarrierStub
vtime_accum	g1ConcurrentMarkThread.inline.hpp	/^inline double G1ConcurrentMarkThread::vtime_accum() {$/;"	f	class:G1ConcurrentMarkThread
vtime_accum	g1ConcurrentRefineThread.hpp	/^  double vtime_accum() { return _vtime_accum; }$/;"	f	class:G1ConcurrentRefineThread
vtime_accum	g1ServiceThread.hpp	/^  double vtime_accum() { return _vtime_accum; }$/;"	f	class:G1ServiceThread
vtime_mark_accum	g1ConcurrentMarkThread.inline.hpp	/^inline double G1ConcurrentMarkThread::vtime_mark_accum() {$/;"	f	class:G1ConcurrentMarkThread
wait_for_completed_buffers	g1ConcurrentRefineThread.cpp	/^void G1ConcurrentRefineThread::wait_for_completed_buffers() {$/;"	f	class:G1ConcurrentRefineThread
wait_for_root_region_scanning	g1CollectedHeap.cpp	/^void G1CollectedHeap::wait_for_root_region_scanning() {$/;"	f	class:G1CollectedHeap
wait_impl	g1StringDedupQueue.cpp	/^void G1StringDedupQueue::wait_impl() {$/;"	f	class:G1StringDedupQueue
wait_until_scan_finished	g1ConcurrentMark.cpp	/^bool G1CMRootMemRegions::wait_until_scan_finished() {$/;"	f	class:G1CMRootMemRegions
wall_time	g1ConcurrentStartToMixedTimeTracker.hpp	/^  double wall_time() const {$/;"	f	class:G1ConcurrentStartToMixedTimeTracker
waste	g1Allocator.cpp	/^size_t G1PLABAllocator::waste() const {$/;"	f	class:G1PLABAllocator
weak_clds	g1RootClosures.cpp	/^  CLDClosure* weak_clds()             { return &_closures._clds; }$/;"	f	class:G1EvacuationClosures
weak_clds	g1RootClosures.cpp	/^  CLDClosure* weak_clds()             { return &_weak._clds; }$/;"	f	class:G1ConcurrentStartMarkClosures
weak_clds	g1RootProcessor.cpp	/^  CLDClosure* weak_clds()        { return NULL; }$/;"	f	class:StrongRootsClosures
weak_clds	g1RootProcessor.cpp	/^  CLDClosure* weak_clds() { return _clds; }$/;"	f	class:AllRootsClosures
weak_codeblobs	g1RootClosures.cpp	/^  CodeBlobClosure* weak_codeblobs()        { return &_closures._codeblobs; }$/;"	f	class:G1EvacuationClosures
weak_codeblobs	g1RootClosures.cpp	/^  CodeBlobClosure* weak_codeblobs()        { return &_weak._codeblobs; }$/;"	f	class:G1ConcurrentStartMarkClosures
weak_oops	g1RootClosures.cpp	/^  OopClosure* weak_oops()   { return &_closures._oops; }$/;"	f	class:G1EvacuationClosures
weak_oops	g1RootClosures.cpp	/^  OopClosure* weak_oops()   { return &_weak._oops; }$/;"	f	class:G1ConcurrentStartMarkClosures
weak_oops	g1RootProcessor.cpp	/^  OopClosure* weak_oops()   { return NULL; }$/;"	f	class:StrongRootsClosures
weak_oops	g1RootProcessor.cpp	/^  OopClosure* weak_oops() { return _roots; }$/;"	f	class:AllRootsClosures
weak_phase_times	g1GCPhaseTimes.hpp	/^  WeakProcessorPhaseTimes* weak_phase_times() { return &_weak_phase_times; }$/;"	f	class:G1GCPhaseTimes
weak_refs_work	g1ConcurrentMark.cpp	/^void G1ConcurrentMark::weak_refs_work(bool clear_all_soft_refs) {$/;"	f	class:G1ConcurrentMark
when_max_gc_ms	g1MMUTracker.hpp	/^  inline jlong when_max_gc_ms(double current_time) {$/;"	f	class:G1MMUTracker
when_max_gc_sec	g1MMUTracker.hpp	/^  inline double when_max_gc_sec(double current_time) {$/;"	f	class:G1MMUTracker
when_ms	g1MMUTracker.hpp	/^  inline jlong when_ms(double current_time, double pause_time) {$/;"	f	class:G1MMUTracker
when_sec	g1MMUTracker.cpp	/^double G1MMUTrackerQueue::when_sec(double current_time, double pause_time) {$/;"	f	class:G1MMUTrackerQueue
whitebox_attached	g1VMOperations.hpp	/^  bool whitebox_attached() const { return _whitebox_attached; }$/;"	f	class:VM_G1TryInitiateConcMark
will_become_free	g1CollectedHeap.cpp	/^  bool will_become_free(HeapRegion* hr) const {$/;"	f	class:RedirtyLoggedCardTableEntryClosure	file:
will_fit	g1Policy.cpp	/^  bool will_fit(uint young_length) const {$/;"	f	class:G1YoungLengthPredictor
words_scanned_period	g1ConcurrentMark.hpp	/^    words_scanned_period          = 12*1024,$/;"	e	enum:G1CMTask::PrivateConstants
work	g1CollectedHeap.cpp	/^  virtual void work(uint worker_id) {$/;"	f	class:G1FreeCollectionSetTask
work	g1CollectedHeap.cpp	/^  virtual void work(uint worker_id) {$/;"	f	class:G1RedirtyLoggedCardsTask
work	g1CollectedHeap.cpp	/^  virtual void work(uint worker_id) {$/;"	f	class:G1STWRefProcTaskProxy
work	g1CollectedHeap.cpp	/^  void work(uint worker_id) {$/;"	f	class:G1EvacuateRegionsBaseTask
work	g1CollectedHeap.cpp	/^  void work(uint worker_id) {$/;"	f	class:G1PrepareEvacuationTask
work	g1CollectedHeap.cpp	/^  void work(uint worker_id) {$/;"	f	class:G1StringDedupCleaningTask
work	g1CollectionSetChooser.cpp	/^  void work(uint worker_id) {$/;"	f	class:G1BuildCandidateRegionsTask
work	g1ConcurrentMark.cpp	/^  virtual void work(uint worker_id) {$/;"	f	class:G1CMRefProcTaskProxy
work	g1ConcurrentMark.cpp	/^  virtual void work(uint worker_id) {$/;"	f	class:G1UpdateRemSetTrackingBeforeRebuildTask
work	g1ConcurrentMark.cpp	/^  void work(uint worker_id) {$/;"	f	class:G1CMConcurrentMarkingTask
work	g1ConcurrentMark.cpp	/^  void work(uint worker_id) {$/;"	f	class:G1CMRemarkTask
work	g1ConcurrentMark.cpp	/^  void work(uint worker_id) {$/;"	f	class:G1CMRootRegionScanTask
work	g1ConcurrentMark.cpp	/^  void work(uint worker_id) {$/;"	f	class:G1ClearBitMapTask
work	g1ConcurrentMark.cpp	/^  void work(uint worker_id) {$/;"	f	class:G1ReclaimEmptyRegionsTask
work	g1EvacFailure.cpp	/^void G1ParRemoveSelfForwardPtrsTask::work(uint worker_id) {$/;"	f	class:G1ParRemoveSelfForwardPtrsTask
work	g1FullGCAdjustTask.cpp	/^void G1FullGCAdjustTask::work(uint worker_id) {$/;"	f	class:G1FullGCAdjustTask
work	g1FullGCCompactTask.cpp	/^void G1FullGCCompactTask::work(uint worker_id) {$/;"	f	class:G1FullGCCompactTask
work	g1FullGCMarkTask.cpp	/^void G1FullGCMarkTask::work(uint worker_id) {$/;"	f	class:G1FullGCMarkTask
work	g1FullGCPrepareTask.cpp	/^void G1FullGCPrepareTask::work(uint worker_id) {$/;"	f	class:G1FullGCPrepareTask
work	g1FullGCReferenceProcessorExecutor.cpp	/^void G1FullGCReferenceProcessingExecutor::G1RefProcTaskProxy::work(uint worker_id) {$/;"	f	class:G1FullGCReferenceProcessingExecutor::G1RefProcTaskProxy
work	g1HeapVerifier.cpp	/^  void work(uint worker_id) {$/;"	f	class:G1ParVerifyTask
work	g1PageBasedVirtualSpace.cpp	/^  virtual void work(uint worker_id) {$/;"	f	class:G1PretouchTask
work	g1ParallelCleaning.cpp	/^void G1ParallelCleaningTask::work(uint worker_id) {$/;"	f	class:G1ParallelCleaningTask
work	g1ParallelCleaning.cpp	/^void JVMCICleaningTask::work(bool unloading_occurred) {$/;"	f	class:JVMCICleaningTask
work	g1RemSet.cpp	/^    void work(uint worker_id) {$/;"	f	class:G1RemSetScanState::G1ClearCardTableTask
work	g1RemSet.cpp	/^  virtual void work(uint worker_id) {$/;"	f	class:G1MergeHeapRootsTask
work	g1RemSet.cpp	/^  void work(uint worker_id) {$/;"	f	class:G1RebuildRemSetTask
work	heapRegionManager.cpp	/^  void work(uint worker_id) {$/;"	f	class:G1RebuildFreeListTask
worker_freelist	heapRegionManager.cpp	/^  FreeRegionList* worker_freelist(uint worker) {$/;"	f	class:G1RebuildFreeListTask
worker_id	g1ConcurrentMark.hpp	/^  uint worker_id() { return _worker_id; }$/;"	f	class:G1CMTask
worker_id	g1ParScanThreadState.hpp	/^  uint worker_id() { return _worker_id; }$/;"	f	class:G1ParScanThreadState
worker_id_offset	g1ConcurrentRefine.cpp	/^uint G1ConcurrentRefine::worker_id_offset() {$/;"	f	class:G1ConcurrentRefine
worker_stats	g1CollectedHeap.cpp	/^  FreeCSetStats* worker_stats(uint worker) {$/;"	f	class:G1FreeCollectionSetTask	file:
worker_threads_do	g1ConcurrentRefine.cpp	/^void G1ConcurrentRefineThreadControl::worker_threads_do(ThreadClosure* tc) {$/;"	f	class:G1ConcurrentRefineThreadControl
worker_time	g1GCPhaseTimes.cpp	/^double G1GCPhaseTimes::worker_time(GCParPhases phase, uint worker) {$/;"	f	class:G1GCPhaseTimes
workers	g1CollectedHeap.hpp	/^  WorkGang* workers() const { return _workers; }$/;"	f	class:G1CollectedHeap
workers	g1FullCollector.hpp	/^  uint                     workers() { return _num_workers; }$/;"	f	class:G1FullCollector
write_ref_array_post_entry	g1BarrierSetRuntime.cpp	/^void G1BarrierSetRuntime::write_ref_array_post_entry(HeapWord* dst, size_t length) {$/;"	f	class:G1BarrierSetRuntime
write_ref_array_pre	g1BarrierSet.cpp	/^void G1BarrierSet::write_ref_array_pre(narrowOop* dst, size_t count, bool dest_uninitialized) {$/;"	f	class:G1BarrierSet
write_ref_array_pre	g1BarrierSet.cpp	/^void G1BarrierSet::write_ref_array_pre(oop* dst, size_t count, bool dest_uninitialized) {$/;"	f	class:G1BarrierSet
write_ref_array_pre_narrow_oop_entry	g1BarrierSetRuntime.cpp	/^void G1BarrierSetRuntime::write_ref_array_pre_narrow_oop_entry(narrowOop* dst, size_t length) {$/;"	f	class:G1BarrierSetRuntime
write_ref_array_pre_oop_entry	g1BarrierSetRuntime.cpp	/^void G1BarrierSetRuntime::write_ref_array_pre_oop_entry(oop* dst, size_t length) {$/;"	f	class:G1BarrierSetRuntime
write_ref_array_pre_work	g1BarrierSet.cpp	/^G1BarrierSet::write_ref_array_pre_work(T* dst, size_t count) {$/;"	f	class:G1BarrierSet
write_ref_array_work	g1BarrierSet.hpp	/^  void write_ref_array_work(MemRegion mr) { invalidate(mr); }$/;"	f	class:G1BarrierSet
write_ref_field_post	g1BarrierSet.inline.hpp	/^inline void G1BarrierSet::write_ref_field_post(T* field, oop new_val) {$/;"	f	class:G1BarrierSet
write_ref_field_post_entry_Type	c2/g1BarrierSetC2.cpp	/^const TypeFunc *G1BarrierSetC2::write_ref_field_post_entry_Type() {$/;"	f	class:G1BarrierSetC2
write_ref_field_post_slow	g1BarrierSet.cpp	/^void G1BarrierSet::write_ref_field_post_slow(volatile CardValue* byte) {$/;"	f	class:G1BarrierSet
write_ref_field_pre	g1BarrierSet.inline.hpp	/^inline void G1BarrierSet::write_ref_field_pre(T* field) {$/;"	f	class:G1BarrierSet
write_ref_field_pre_entry_Type	c2/g1BarrierSetC2.cpp	/^const TypeFunc *G1BarrierSetC2::write_ref_field_pre_entry_Type() {$/;"	f	class:G1BarrierSetC2
write_region	g1BarrierSet.hpp	/^  void write_region(MemRegion mr)         { invalidate(mr); }$/;"	f	class:G1BarrierSet
yc_type	g1CollectorState.hpp	/^  G1YCType yc_type() const {$/;"	f	class:G1CollectorState
yellow_zone	g1ConcurrentRefine.hpp	/^  size_t yellow_zone() const     { return _yellow_zone; }$/;"	f	class:G1ConcurrentRefine
young_card_merge_to_scan_ratio_defaults	g1Analytics.cpp	/^static double young_card_merge_to_scan_ratio_defaults[] = {$/;"	v	file:
young_collection_expansion_amount	g1HeapSizingPolicy.cpp	/^size_t G1HeapSizingPolicy::young_collection_expansion_amount() {$/;"	f	class:G1HeapSizingPolicy
young_collection_verify_type	g1CollectedHeap.cpp	/^G1HeapVerifier::G1VerifyType G1CollectedHeap::young_collection_verify_type() const {$/;"	f	class:G1CollectedHeap
young_cset_choice_time_ms	g1GCPhaseTimes.hpp	/^  double young_cset_choice_time_ms() {$/;"	f	class:G1GCPhaseTimes
young_gc_name	g1CollectedHeap.cpp	/^const char* G1CollectedHeap::young_gc_name() const {$/;"	f	class:G1CollectedHeap
young_gc_pause_kind	g1Policy.cpp	/^G1Policy::PauseKind G1Policy::young_gc_pause_kind() const {$/;"	f	class:G1Policy
young_gen_committed	g1MonitoringSupport.hpp	/^  size_t young_gen_committed()        { return _young_gen_committed; }$/;"	f	class:G1MonitoringSupport
young_index_in_cset	heapRegion.hpp	/^  uint  young_index_in_cset() const { return _young_index_in_cset; }$/;"	f	class:HeapRegion
young_list_max_length	g1Policy.hpp	/^  uint young_list_max_length() const {$/;"	f	class:G1Policy
young_list_target_length	g1Policy.hpp	/^  size_t young_list_target_length() const { return _young_list_target_length; }$/;"	f	class:G1Policy
young_list_target_lengths	g1Policy.cpp	/^G1Policy::YoungTargetLengths G1Policy::young_list_target_lengths(size_t rs_length) const {$/;"	f	class:G1Policy
young_only_cost_per_card_scan_ms_defaults	g1Analytics.cpp	/^static double young_only_cost_per_card_scan_ms_defaults[] = {$/;"	v	file:
young_other_cost_per_region_ms_defaults	g1Analytics.cpp	/^static double young_other_cost_per_region_ms_defaults[] = {$/;"	v	file:
young_other_time_ms	g1Policy.cpp	/^double G1Policy::young_other_time_ms() const {$/;"	f	class:G1Policy
young_region_length	g1CollectionSet.hpp	/^  uint young_region_length() const { return eden_region_length() +$/;"	f	class:G1CollectionSet
young_regions_count	g1CollectedHeap.hpp	/^  uint young_regions_count() const { return _eden.length() + _survivor.length(); }$/;"	f	class:G1CollectedHeap
zap_dead_objects	g1EvacFailure.cpp	/^  void zap_dead_objects(HeapWord* start, HeapWord* end) {$/;"	f	class:RemoveSelfForwardPtrObjClosure
zap_remainder	g1EvacFailure.cpp	/^  void zap_remainder() {$/;"	f	class:RemoveSelfForwardPtrObjClosure
zero_bottom_entry_raw	g1BlockOffsetTable.cpp	/^void G1BlockOffsetTablePart::zero_bottom_entry_raw() {$/;"	f	class:G1BlockOffsetTablePart
zero_marked_bytes	heapRegion.hpp	/^  void zero_marked_bytes()      {$/;"	f	class:HeapRegion
~Data	g1HeapTransition.cpp	/^G1HeapTransition::Data::~Data() {$/;"	f	class:G1HeapTransition::Data
~FreeRegionList	heapRegionSet.cpp	/^FreeRegionList::~FreeRegionList() {$/;"	f	class:FreeRegionList
~G1Allocator	g1Allocator.cpp	/^G1Allocator::~G1Allocator() {$/;"	f	class:G1Allocator
~G1ArchiveAllocator	g1Allocator.hpp	/^  virtual ~G1ArchiveAllocator() {$/;"	f	class:G1ArchiveAllocator
~G1BarrierSet	g1BarrierSet.hpp	/^  ~G1BarrierSet() { }$/;"	f	class:G1BarrierSet
~G1BuildCandidateArray	g1CollectionSetChooser.cpp	/^    ~G1BuildCandidateArray() {$/;"	f	class:G1BuildCandidateRegionsTask::G1BuildCandidateArray
~G1CMConcurrentMarkingTask	g1ConcurrentMark.cpp	/^  ~G1CMConcurrentMarkingTask() { }$/;"	f	class:G1CMConcurrentMarkingTask
~G1CMMarkStack	g1ConcurrentMark.cpp	/^G1CMMarkStack::~G1CMMarkStack() {$/;"	f	class:G1CMMarkStack
~G1CMRootMemRegions	g1ConcurrentMark.cpp	/^G1CMRootMemRegions::~G1CMRootMemRegions() {$/;"	f	class:G1CMRootMemRegions
~G1CodeRootSet	g1CodeCacheRemSet.cpp	/^G1CodeRootSet::~G1CodeRootSet() {$/;"	f	class:G1CodeRootSet
~G1CodeRootSetTable	g1CodeCacheRemSet.cpp	/^G1CodeRootSetTable::~G1CodeRootSetTable() {$/;"	f	class:G1CodeRootSetTable
~G1CollectionSet	g1CollectionSet.cpp	/^G1CollectionSet::~G1CollectionSet() {$/;"	f	class:G1CollectionSet
~G1CollectionSetCandidates	g1CollectionSetCandidates.hpp	/^  ~G1CollectionSetCandidates() {$/;"	f	class:G1CollectionSetCandidates
~G1ConcPhaseTimer	g1ConcurrentMarkThread.cpp	/^  ~G1ConcPhaseTimer() {$/;"	f	class:G1ConcPhaseTimer
~G1ConcurrentMark	g1ConcurrentMark.cpp	/^G1ConcurrentMark::~G1ConcurrentMark() {$/;"	f	class:G1ConcurrentMark
~G1ConcurrentRefine	g1ConcurrentRefine.cpp	/^G1ConcurrentRefine::~G1ConcurrentRefine() {$/;"	f	class:G1ConcurrentRefine
~G1ConcurrentRefineThread	g1ConcurrentRefineThread.cpp	/^G1ConcurrentRefineThread::~G1ConcurrentRefineThread() {$/;"	f	class:G1ConcurrentRefineThread
~G1ConcurrentRefineThreadControl	g1ConcurrentRefine.cpp	/^G1ConcurrentRefineThreadControl::~G1ConcurrentRefineThreadControl() {$/;"	f	class:G1ConcurrentRefineThreadControl
~G1DirtyCardQueue	g1DirtyCardQueue.cpp	/^G1DirtyCardQueue::~G1DirtyCardQueue() {$/;"	f	class:G1DirtyCardQueue
~G1DirtyCardQueueSet	g1DirtyCardQueue.cpp	/^G1DirtyCardQueueSet::~G1DirtyCardQueueSet() {$/;"	f	class:G1DirtyCardQueueSet
~G1DirtyRegions	g1RemSet.cpp	/^    ~G1DirtyRegions() {$/;"	f	class:G1RemSetScanState::G1DirtyRegions
~G1EvacPhaseTimesTracker	g1GCPhaseTimes.cpp	/^G1EvacPhaseTimesTracker::~G1EvacPhaseTimesTracker() {$/;"	f	class:G1EvacPhaseTimesTracker
~G1EvacPhaseWithTrimTimeTracker	g1GCPhaseTimes.cpp	/^G1EvacPhaseWithTrimTimeTracker::~G1EvacPhaseWithTrimTimeTracker() {$/;"	f	class:G1EvacPhaseWithTrimTimeTracker
~G1EvacStats	g1EvacStats.cpp	/^G1EvacStats::~G1EvacStats() { }$/;"	f	class:G1EvacStats
~G1FreeCollectionSetTask	g1CollectedHeap.cpp	/^  ~G1FreeCollectionSetTask() {$/;"	f	class:G1FreeCollectionSetTask
~G1FreeIdSet	g1FreeIdSet.cpp	/^G1FreeIdSet::~G1FreeIdSet() {$/;"	f	class:G1FreeIdSet
~G1FullCollector	g1FullCollector.cpp	/^G1FullCollector::~G1FullCollector() {$/;"	f	class:G1FullCollector
~G1FullGCCompactionPoint	g1FullGCCompactionPoint.cpp	/^G1FullGCCompactionPoint::~G1FullGCCompactionPoint() {$/;"	f	class:G1FullGCCompactionPoint
~G1FullGCMarker	g1FullGCMarker.cpp	/^G1FullGCMarker::~G1FullGCMarker() {$/;"	f	class:G1FullGCMarker
~G1FullGCReferenceProcessingExecutor	g1FullGCReferenceProcessorExecutor.cpp	/^G1FullGCReferenceProcessingExecutor::~G1FullGCReferenceProcessingExecutor() {$/;"	f	class:G1FullGCReferenceProcessingExecutor
~G1FullGCScope	g1FullGCScope.cpp	/^G1FullGCScope::~G1FullGCScope() {$/;"	f	class:G1FullGCScope
~G1GCParPhaseTimesTracker	g1GCPhaseTimes.cpp	/^G1GCParPhaseTimesTracker::~G1GCParPhaseTimesTracker() {$/;"	f	class:G1GCParPhaseTimesTracker
~G1HotCardCache	g1HotCardCache.cpp	/^G1HotCardCache::~G1HotCardCache() {$/;"	f	class:G1HotCardCache
~G1IHOPControl	g1IHOPControl.hpp	/^  virtual ~G1IHOPControl() { }$/;"	f	class:G1IHOPControl
~G1MonitoringSupport	g1MonitoringSupport.cpp	/^G1MonitoringSupport::~G1MonitoringSupport() {$/;"	f	class:G1MonitoringSupport
~G1NUMA	g1NUMA.cpp	/^G1NUMA::~G1NUMA() {$/;"	f	class:G1NUMA
~G1NUMAStats	g1NUMAStats.cpp	/^G1NUMAStats::~G1NUMAStats() {$/;"	f	class:G1NUMAStats
~G1NodeIndexCheckClosure	g1NUMA.cpp	/^G1NodeIndexCheckClosure::~G1NodeIndexCheckClosure() {$/;"	f	class:G1NodeIndexCheckClosure
~G1OopStarChunkedList	g1OopStarChunkedList.cpp	/^G1OopStarChunkedList::~G1OopStarChunkedList() {$/;"	f	class:G1OopStarChunkedList
~G1PLABAllocator	g1Allocator.cpp	/^G1PLABAllocator::~G1PLABAllocator() {$/;"	f	class:G1PLABAllocator
~G1PageBasedVirtualSpace	g1PageBasedVirtualSpace.cpp	/^G1PageBasedVirtualSpace::~G1PageBasedVirtualSpace() {$/;"	f	class:G1PageBasedVirtualSpace
~G1ParCopyHelper	g1OopClosures.hpp	/^  ~G1ParCopyHelper() { }$/;"	f	class:G1ParCopyHelper
~G1ParScanThreadState	g1ParScanThreadState.cpp	/^G1ParScanThreadState::~G1ParScanThreadState() {$/;"	f	class:G1ParScanThreadState
~G1ParScanThreadStateSet	g1ParScanThreadState.cpp	/^G1ParScanThreadStateSet::~G1ParScanThreadStateSet() {$/;"	f	class:G1ParScanThreadStateSet
~G1Policy	g1Policy.cpp	/^G1Policy::~G1Policy() {$/;"	f	class:G1Policy
~G1PrepareEvacuationTask	g1CollectedHeap.cpp	/^  ~G1PrepareEvacuationTask() {$/;"	f	class:G1PrepareEvacuationTask
~G1PrepareRegionsClosure	g1CollectedHeap.cpp	/^    ~G1PrepareRegionsClosure() {$/;"	f	class:G1PrepareEvacuationTask::G1PrepareRegionsClosure
~G1PrintRegionLivenessInfoClosure	g1ConcurrentMark.cpp	/^G1PrintRegionLivenessInfoClosure::~G1PrintRegionLivenessInfoClosure() {$/;"	f	class:G1PrintRegionLivenessInfoClosure
~G1RebuildFreeListTask	heapRegionManager.cpp	/^  ~G1RebuildFreeListTask() {$/;"	f	class:G1RebuildFreeListTask
~G1RedirtyCardsQueue	g1RedirtyCardsQueue.cpp	/^G1RedirtyCardsQueue::~G1RedirtyCardsQueue() {$/;"	f	class:G1RedirtyCardsQueue
~G1RedirtyCardsQueueBase	g1RedirtyCardsQueue.hpp	/^  ~G1RedirtyCardsQueueBase() {}$/;"	f	class:G1RedirtyCardsQueueBase
~G1RedirtyCardsQueueSet	g1RedirtyCardsQueue.cpp	/^G1RedirtyCardsQueueSet::~G1RedirtyCardsQueueSet() {$/;"	f	class:G1RedirtyCardsQueueSet
~G1RegionMarkStatsCache	g1RegionMarkStatsCache.cpp	/^G1RegionMarkStatsCache::~G1RegionMarkStatsCache() {$/;"	f	class:G1RegionMarkStatsCache
~G1RegionToSpaceMapper	g1RegionToSpaceMapper.hpp	/^  virtual ~G1RegionToSpaceMapper() {}$/;"	f	class:G1RegionToSpaceMapper
~G1RegionsOnNodes	g1RegionsOnNodes.cpp	/^G1RegionsOnNodes::~G1RegionsOnNodes() {$/;"	f	class:G1RegionsOnNodes
~G1RemSet	g1RemSet.cpp	/^G1RemSet::~G1RemSet() {$/;"	f	class:G1RemSet
~G1RemSetScanState	g1RemSet.cpp	/^  ~G1RemSetScanState() {$/;"	f	class:G1RemSetScanState
~G1RemSetSummary	g1RemSetSummary.cpp	/^G1RemSetSummary::~G1RemSetSummary() {$/;"	f	class:G1RemSetSummary
~G1RootClosures	g1RootClosures.hpp	/^  virtual ~G1RootClosures() {}$/;"	f	class:G1RootClosures
~G1ScanClosureBase	g1OopClosures.hpp	/^  ~G1ScanClosureBase() { }$/;"	f	class:G1ScanClosureBase
~G1ScanInYoungSetter	g1OopClosures.hpp	/^  ~G1ScanInYoungSetter() {$/;"	f	class:G1ScanInYoungSetter
~G1SharedDirtyCardQueue	g1SharedDirtyCardQueue.cpp	/^G1SharedDirtyCardQueue::~G1SharedDirtyCardQueue() {$/;"	f	class:G1SharedDirtyCardQueue
~G1StringDedupCleaningTask	g1CollectedHeap.cpp	/^  ~G1StringDedupCleaningTask() {$/;"	f	class:G1StringDedupCleaningTask
~G1StringDedupQueue	g1StringDedupQueue.cpp	/^G1StringDedupQueue::~G1StringDedupQueue() {$/;"	f	class:G1StringDedupQueue
~G1VerifyYoungCSetIndicesClosure	g1CollectionSet.cpp	/^  ~G1VerifyYoungCSetIndicesClosure() {$/;"	f	class:G1VerifyYoungCSetIndicesClosure
~HeapRegionClaimer	heapRegionManager.cpp	/^HeapRegionClaimer::~HeapRegionClaimer() {$/;"	f	class:HeapRegionClaimer
~JFREventForRegion	g1CollectedHeap.cpp	/^      ~JFREventForRegion() {$/;"	f	class:G1FreeCollectionSetTask::FreeCSetClosure::JFREventForRegion
~LocalQSet	g1RedirtyCardsQueue.cpp	/^G1RedirtyCardsQueueBase::LocalQSet::~LocalQSet() {$/;"	f	class:G1RedirtyCardsQueueBase::LocalQSet
~NodeDataArray	g1NUMAStats.cpp	/^G1NUMAStats::NodeDataArray::~NodeDataArray() {$/;"	f	class:G1NUMAStats::NodeDataArray
~NodeInfo	heapRegionSet.cpp	/^FreeRegionList::NodeInfo::~NodeInfo() {$/;"	f	class:FreeRegionList::NodeInfo
~PausedBuffers	g1DirtyCardQueue.cpp	/^G1DirtyCardQueueSet::PausedBuffers::~PausedBuffers() {$/;"	f	class:G1DirtyCardQueueSet::PausedBuffers
~PausedList	g1DirtyCardQueue.cpp	/^G1DirtyCardQueueSet::PausedBuffers::PausedList::~PausedList() {$/;"	f	class:G1DirtyCardQueueSet::PausedBuffers::PausedList
~PrintRSetsClosure	g1CollectedHeap.cpp	/^  ~PrintRSetsClosure() {$/;"	f	class:PrintRSetsClosure
~Queue	g1DirtyCardQueue.cpp	/^G1DirtyCardQueueSet::Queue::~Queue() {$/;"	f	class:G1DirtyCardQueueSet::Queue
~RSHashTable	sparsePRT.cpp	/^RSHashTable::~RSHashTable() {$/;"	f	class:RSHashTable
~SparsePRT	sparsePRT.cpp	/^SparsePRT::~SparsePRT() {$/;"	f	class:SparsePRT
~TearDownRegionSetsClosure	g1CollectedHeap.cpp	/^  ~TearDownRegionSetsClosure() {$/;"	f	class:TearDownRegionSetsClosure
~TimerForRegion	g1CollectedHeap.cpp	/^      ~TimerForRegion() {$/;"	f	class:G1FreeCollectionSetTask::FreeCSetClosure::TimerForRegion
~messageAll	g1SendMsg.cpp	/^messageAll::~messageAll(){$/;"	f	class:messageAll
